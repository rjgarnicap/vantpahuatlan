import{c as R,l as Y}from"./three.module-19edce0d.js";import{M as z}from"./MeshBVH-3fd67ca2.js";class x{constructor(l){this.name="WorkerBase",this.running=!1,this.worker=l,this.worker.onerror=d=>{throw d.message?new Error(`${this.name}: Could not create Web Worker with error "${d.message}"`):new Error(`${this.name}: Could not create Web Worker.`)}}runTask(){}generate(...l){if(this.running)throw new Error("GenerateMeshBVHWorker: Already running job.");if(this.worker===null)throw new Error("GenerateMeshBVHWorker: Worker has been disposed.");this.running=!0;const d=this.runTask(this.worker,...l);return d.finally(()=>{this.running=!1}),d}dispose(){this.worker.terminate(),this.worker=null}}const u="KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiOy8qKgogKiBAbGljZW5zZQogKiBDb3B5cmlnaHQgMjAxMC0yMDIzIFRocmVlLmpzIEF1dGhvcnMKICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVAogKi9jb25zdCBXZT0iMTYyIixzcz0iIjtjbGFzcyBYZXthZGRFdmVudExpc3RlbmVyKHQsZSl7dGhpcy5fbGlzdGVuZXJzPT09dm9pZCAwJiYodGhpcy5fbGlzdGVuZXJzPXt9KTtjb25zdCBpPXRoaXMuX2xpc3RlbmVycztpW3RdPT09dm9pZCAwJiYoaVt0XT1bXSksaVt0XS5pbmRleE9mKGUpPT09LTEmJmlbdF0ucHVzaChlKX1oYXNFdmVudExpc3RlbmVyKHQsZSl7aWYodGhpcy5fbGlzdGVuZXJzPT09dm9pZCAwKXJldHVybiExO2NvbnN0IGk9dGhpcy5fbGlzdGVuZXJzO3JldHVybiBpW3RdIT09dm9pZCAwJiZpW3RdLmluZGV4T2YoZSkhPT0tMX1yZW1vdmVFdmVudExpc3RlbmVyKHQsZSl7aWYodGhpcy5fbGlzdGVuZXJzPT09dm9pZCAwKXJldHVybjtjb25zdCBzPXRoaXMuX2xpc3RlbmVyc1t0XTtpZihzIT09dm9pZCAwKXtjb25zdCBuPXMuaW5kZXhPZihlKTtuIT09LTEmJnMuc3BsaWNlKG4sMSl9fWRpc3BhdGNoRXZlbnQodCl7aWYodGhpcy5fbGlzdGVuZXJzPT09dm9pZCAwKXJldHVybjtjb25zdCBpPXRoaXMuX2xpc3RlbmVyc1t0LnR5cGVdO2lmKGkhPT12b2lkIDApe3QudGFyZ2V0PXRoaXM7Y29uc3Qgcz1pLnNsaWNlKDApO2ZvcihsZXQgbj0wLHI9cy5sZW5ndGg7bjxyO24rKylzW25dLmNhbGwodGhpcyx0KTt0LnRhcmdldD1udWxsfX19Y29uc3QgcT1bIjAwIiwiMDEiLCIwMiIsIjAzIiwiMDQiLCIwNSIsIjA2IiwiMDciLCIwOCIsIjA5IiwiMGEiLCIwYiIsIjBjIiwiMGQiLCIwZSIsIjBmIiwiMTAiLCIxMSIsIjEyIiwiMTMiLCIxNCIsIjE1IiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIxYSIsIjFiIiwiMWMiLCIxZCIsIjFlIiwiMWYiLCIyMCIsIjIxIiwiMjIiLCIyMyIsIjI0IiwiMjUiLCIyNiIsIjI3IiwiMjgiLCIyOSIsIjJhIiwiMmIiLCIyYyIsIjJkIiwiMmUiLCIyZiIsIjMwIiwiMzEiLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiM2EiLCIzYiIsIjNjIiwiM2QiLCIzZSIsIjNmIiwiNDAiLCI0MSIsIjQyIiwiNDMiLCI0NCIsIjQ1IiwiNDYiLCI0NyIsIjQ4IiwiNDkiLCI0YSIsIjRiIiwiNGMiLCI0ZCIsIjRlIiwiNGYiLCI1MCIsIjUxIiwiNTIiLCI1MyIsIjU0IiwiNTUiLCI1NiIsIjU3IiwiNTgiLCI1OSIsIjVhIiwiNWIiLCI1YyIsIjVkIiwiNWUiLCI1ZiIsIjYwIiwiNjEiLCI2MiIsIjYzIiwiNjQiLCI2NSIsIjY2IiwiNjciLCI2OCIsIjY5IiwiNmEiLCI2YiIsIjZjIiwiNmQiLCI2ZSIsIjZmIiwiNzAiLCI3MSIsIjcyIiwiNzMiLCI3NCIsIjc1IiwiNzYiLCI3NyIsIjc4IiwiNzkiLCI3YSIsIjdiIiwiN2MiLCI3ZCIsIjdlIiwiN2YiLCI4MCIsIjgxIiwiODIiLCI4MyIsIjg0IiwiODUiLCI4NiIsIjg3IiwiODgiLCI4OSIsIjhhIiwiOGIiLCI4YyIsIjhkIiwiOGUiLCI4ZiIsIjkwIiwiOTEiLCI5MiIsIjkzIiwiOTQiLCI5NSIsIjk2IiwiOTciLCI5OCIsIjk5IiwiOWEiLCI5YiIsIjljIiwiOWQiLCI5ZSIsIjlmIiwiYTAiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwiYTYiLCJhNyIsImE4IiwiYTkiLCJhYSIsImFiIiwiYWMiLCJhZCIsImFlIiwiYWYiLCJiMCIsImIxIiwiYjIiLCJiMyIsImI0IiwiYjUiLCJiNiIsImI3IiwiYjgiLCJiOSIsImJhIiwiYmIiLCJiYyIsImJkIiwiYmUiLCJiZiIsImMwIiwiYzEiLCJjMiIsImMzIiwiYzQiLCJjNSIsImM2IiwiYzciLCJjOCIsImM5IiwiY2EiLCJjYiIsImNjIiwiY2QiLCJjZSIsImNmIiwiZDAiLCJkMSIsImQyIiwiZDMiLCJkNCIsImQ1IiwiZDYiLCJkNyIsImQ4IiwiZDkiLCJkYSIsImRiIiwiZGMiLCJkZCIsImRlIiwiZGYiLCJlMCIsImUxIiwiZTIiLCJlMyIsImU0IiwiZTUiLCJlNiIsImU3IiwiZTgiLCJlOSIsImVhIiwiZWIiLCJlYyIsImVkIiwiZWUiLCJlZiIsImYwIiwiZjEiLCJmMiIsImYzIiwiZjQiLCJmNSIsImY2IiwiZjciLCJmOCIsImY5IiwiZmEiLCJmYiIsImZjIiwiZmQiLCJmZSIsImZmIl07ZnVuY3Rpb24gZmUoKXtjb25zdCB1PU1hdGgucmFuZG9tKCkqNDI5NDk2NzI5NXwwLHQ9TWF0aC5yYW5kb20oKSo0Mjk0OTY3Mjk1fDAsZT1NYXRoLnJhbmRvbSgpKjQyOTQ5NjcyOTV8MCxpPU1hdGgucmFuZG9tKCkqNDI5NDk2NzI5NXwwO3JldHVybihxW3UmMjU1XStxW3U+PjgmMjU1XStxW3U+PjE2JjI1NV0rcVt1Pj4yNCYyNTVdKyItIitxW3QmMjU1XStxW3Q+PjgmMjU1XSsiLSIrcVt0Pj4xNiYxNXw2NF0rcVt0Pj4yNCYyNTVdKyItIitxW2UmNjN8MTI4XStxW2U+PjgmMjU1XSsiLSIrcVtlPj4xNiYyNTVdK3FbZT4+MjQmMjU1XStxW2kmMjU1XStxW2k+PjgmMjU1XStxW2k+PjE2JjI1NV0rcVtpPj4yNCYyNTVdKS50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIGF0KHUsdCxlKXtyZXR1cm4gTWF0aC5tYXgodCxNYXRoLm1pbihlLHUpKX1mdW5jdGlvbiBKdCh1LHQpe3N3aXRjaCh0LmNvbnN0cnVjdG9yKXtjYXNlIEZsb2F0MzJBcnJheTpyZXR1cm4gdTtjYXNlIFVpbnQzMkFycmF5OnJldHVybiB1LzQyOTQ5NjcyOTU7Y2FzZSBVaW50MTZBcnJheTpyZXR1cm4gdS82NTUzNTtjYXNlIFVpbnQ4QXJyYXk6cmV0dXJuIHUvMjU1O2Nhc2UgSW50MzJBcnJheTpyZXR1cm4gTWF0aC5tYXgodS8yMTQ3NDgzNjQ3LC0xKTtjYXNlIEludDE2QXJyYXk6cmV0dXJuIE1hdGgubWF4KHUvMzI3NjcsLTEpO2Nhc2UgSW50OEFycmF5OnJldHVybiBNYXRoLm1heCh1LzEyNywtMSk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgY29tcG9uZW50IHR5cGUuIil9fWZ1bmN0aW9uIE8odSx0KXtzd2l0Y2godC5jb25zdHJ1Y3Rvcil7Y2FzZSBGbG9hdDMyQXJyYXk6cmV0dXJuIHU7Y2FzZSBVaW50MzJBcnJheTpyZXR1cm4gTWF0aC5yb3VuZCh1KjQyOTQ5NjcyOTUpO2Nhc2UgVWludDE2QXJyYXk6cmV0dXJuIE1hdGgucm91bmQodSo2NTUzNSk7Y2FzZSBVaW50OEFycmF5OnJldHVybiBNYXRoLnJvdW5kKHUqMjU1KTtjYXNlIEludDMyQXJyYXk6cmV0dXJuIE1hdGgucm91bmQodSoyMTQ3NDgzNjQ3KTtjYXNlIEludDE2QXJyYXk6cmV0dXJuIE1hdGgucm91bmQodSozMjc2Nyk7Y2FzZSBJbnQ4QXJyYXk6cmV0dXJuIE1hdGgucm91bmQodSoxMjcpO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIGNvbXBvbmVudCB0eXBlLiIpfX1jbGFzcyB2e2NvbnN0cnVjdG9yKHQ9MCxlPTApe3YucHJvdG90eXBlLmlzVmVjdG9yMj0hMCx0aGlzLng9dCx0aGlzLnk9ZX1nZXQgd2lkdGgoKXtyZXR1cm4gdGhpcy54fXNldCB3aWR0aCh0KXt0aGlzLng9dH1nZXQgaGVpZ2h0KCl7cmV0dXJuIHRoaXMueX1zZXQgaGVpZ2h0KHQpe3RoaXMueT10fXNldCh0LGUpe3JldHVybiB0aGlzLng9dCx0aGlzLnk9ZSx0aGlzfXNldFNjYWxhcih0KXtyZXR1cm4gdGhpcy54PXQsdGhpcy55PXQsdGhpc31zZXRYKHQpe3JldHVybiB0aGlzLng9dCx0aGlzfXNldFkodCl7cmV0dXJuIHRoaXMueT10LHRoaXN9c2V0Q29tcG9uZW50KHQsZSl7c3dpdGNoKHQpe2Nhc2UgMDp0aGlzLng9ZTticmVhaztjYXNlIDE6dGhpcy55PWU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoImluZGV4IGlzIG91dCBvZiByYW5nZTogIit0KX1yZXR1cm4gdGhpc31nZXRDb21wb25lbnQodCl7c3dpdGNoKHQpe2Nhc2UgMDpyZXR1cm4gdGhpcy54O2Nhc2UgMTpyZXR1cm4gdGhpcy55O2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICIrdCl9fWNsb25lKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMueCx0aGlzLnkpfWNvcHkodCl7cmV0dXJuIHRoaXMueD10LngsdGhpcy55PXQueSx0aGlzfWFkZCh0KXtyZXR1cm4gdGhpcy54Kz10LngsdGhpcy55Kz10LnksdGhpc31hZGRTY2FsYXIodCl7cmV0dXJuIHRoaXMueCs9dCx0aGlzLnkrPXQsdGhpc31hZGRWZWN0b3JzKHQsZSl7cmV0dXJuIHRoaXMueD10LngrZS54LHRoaXMueT10LnkrZS55LHRoaXN9YWRkU2NhbGVkVmVjdG9yKHQsZSl7cmV0dXJuIHRoaXMueCs9dC54KmUsdGhpcy55Kz10LnkqZSx0aGlzfXN1Yih0KXtyZXR1cm4gdGhpcy54LT10LngsdGhpcy55LT10LnksdGhpc31zdWJTY2FsYXIodCl7cmV0dXJuIHRoaXMueC09dCx0aGlzLnktPXQsdGhpc31zdWJWZWN0b3JzKHQsZSl7cmV0dXJuIHRoaXMueD10LngtZS54LHRoaXMueT10LnktZS55LHRoaXN9bXVsdGlwbHkodCl7cmV0dXJuIHRoaXMueCo9dC54LHRoaXMueSo9dC55LHRoaXN9bXVsdGlwbHlTY2FsYXIodCl7cmV0dXJuIHRoaXMueCo9dCx0aGlzLnkqPXQsdGhpc31kaXZpZGUodCl7cmV0dXJuIHRoaXMueC89dC54LHRoaXMueS89dC55LHRoaXN9ZGl2aWRlU2NhbGFyKHQpe3JldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKDEvdCl9YXBwbHlNYXRyaXgzKHQpe2NvbnN0IGU9dGhpcy54LGk9dGhpcy55LHM9dC5lbGVtZW50cztyZXR1cm4gdGhpcy54PXNbMF0qZStzWzNdKmkrc1s2XSx0aGlzLnk9c1sxXSplK3NbNF0qaStzWzddLHRoaXN9bWluKHQpe3JldHVybiB0aGlzLng9TWF0aC5taW4odGhpcy54LHQueCksdGhpcy55PU1hdGgubWluKHRoaXMueSx0LnkpLHRoaXN9bWF4KHQpe3JldHVybiB0aGlzLng9TWF0aC5tYXgodGhpcy54LHQueCksdGhpcy55PU1hdGgubWF4KHRoaXMueSx0LnkpLHRoaXN9Y2xhbXAodCxlKXtyZXR1cm4gdGhpcy54PU1hdGgubWF4KHQueCxNYXRoLm1pbihlLngsdGhpcy54KSksdGhpcy55PU1hdGgubWF4KHQueSxNYXRoLm1pbihlLnksdGhpcy55KSksdGhpc31jbGFtcFNjYWxhcih0LGUpe3JldHVybiB0aGlzLng9TWF0aC5tYXgodCxNYXRoLm1pbihlLHRoaXMueCkpLHRoaXMueT1NYXRoLm1heCh0LE1hdGgubWluKGUsdGhpcy55KSksdGhpc31jbGFtcExlbmd0aCh0LGUpe2NvbnN0IGk9dGhpcy5sZW5ndGgoKTtyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoaXx8MSkubXVsdGlwbHlTY2FsYXIoTWF0aC5tYXgodCxNYXRoLm1pbihlLGkpKSl9Zmxvb3IoKXtyZXR1cm4gdGhpcy54PU1hdGguZmxvb3IodGhpcy54KSx0aGlzLnk9TWF0aC5mbG9vcih0aGlzLnkpLHRoaXN9Y2VpbCgpe3JldHVybiB0aGlzLng9TWF0aC5jZWlsKHRoaXMueCksdGhpcy55PU1hdGguY2VpbCh0aGlzLnkpLHRoaXN9cm91bmQoKXtyZXR1cm4gdGhpcy54PU1hdGgucm91bmQodGhpcy54KSx0aGlzLnk9TWF0aC5yb3VuZCh0aGlzLnkpLHRoaXN9cm91bmRUb1plcm8oKXtyZXR1cm4gdGhpcy54PU1hdGgudHJ1bmModGhpcy54KSx0aGlzLnk9TWF0aC50cnVuYyh0aGlzLnkpLHRoaXN9bmVnYXRlKCl7cmV0dXJuIHRoaXMueD0tdGhpcy54LHRoaXMueT0tdGhpcy55LHRoaXN9ZG90KHQpe3JldHVybiB0aGlzLngqdC54K3RoaXMueSp0Lnl9Y3Jvc3ModCl7cmV0dXJuIHRoaXMueCp0LnktdGhpcy55KnQueH1sZW5ndGhTcSgpe3JldHVybiB0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnl9bGVuZ3RoKCl7cmV0dXJuIE1hdGguc3FydCh0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnkpfW1hbmhhdHRhbkxlbmd0aCgpe3JldHVybiBNYXRoLmFicyh0aGlzLngpK01hdGguYWJzKHRoaXMueSl9bm9ybWFsaXplKCl7cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKHRoaXMubGVuZ3RoKCl8fDEpfWFuZ2xlKCl7cmV0dXJuIE1hdGguYXRhbjIoLXRoaXMueSwtdGhpcy54KStNYXRoLlBJfWFuZ2xlVG8odCl7Y29uc3QgZT1NYXRoLnNxcnQodGhpcy5sZW5ndGhTcSgpKnQubGVuZ3RoU3EoKSk7aWYoZT09PTApcmV0dXJuIE1hdGguUEkvMjtjb25zdCBpPXRoaXMuZG90KHQpL2U7cmV0dXJuIE1hdGguYWNvcyhhdChpLC0xLDEpKX1kaXN0YW5jZVRvKHQpe3JldHVybiBNYXRoLnNxcnQodGhpcy5kaXN0YW5jZVRvU3F1YXJlZCh0KSl9ZGlzdGFuY2VUb1NxdWFyZWQodCl7Y29uc3QgZT10aGlzLngtdC54LGk9dGhpcy55LXQueTtyZXR1cm4gZSplK2kqaX1tYW5oYXR0YW5EaXN0YW5jZVRvKHQpe3JldHVybiBNYXRoLmFicyh0aGlzLngtdC54KStNYXRoLmFicyh0aGlzLnktdC55KX1zZXRMZW5ndGgodCl7cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodCl9bGVycCh0LGUpe3JldHVybiB0aGlzLngrPSh0LngtdGhpcy54KSplLHRoaXMueSs9KHQueS10aGlzLnkpKmUsdGhpc31sZXJwVmVjdG9ycyh0LGUsaSl7cmV0dXJuIHRoaXMueD10LngrKGUueC10LngpKmksdGhpcy55PXQueSsoZS55LXQueSkqaSx0aGlzfWVxdWFscyh0KXtyZXR1cm4gdC54PT09dGhpcy54JiZ0Lnk9PT10aGlzLnl9ZnJvbUFycmF5KHQsZT0wKXtyZXR1cm4gdGhpcy54PXRbZV0sdGhpcy55PXRbZSsxXSx0aGlzfXRvQXJyYXkodD1bXSxlPTApe3JldHVybiB0W2VdPXRoaXMueCx0W2UrMV09dGhpcy55LHR9ZnJvbUJ1ZmZlckF0dHJpYnV0ZSh0LGUpe3JldHVybiB0aGlzLng9dC5nZXRYKGUpLHRoaXMueT10LmdldFkoZSksdGhpc31yb3RhdGVBcm91bmQodCxlKXtjb25zdCBpPU1hdGguY29zKGUpLHM9TWF0aC5zaW4oZSksbj10aGlzLngtdC54LHI9dGhpcy55LXQueTtyZXR1cm4gdGhpcy54PW4qaS1yKnMrdC54LHRoaXMueT1uKnMrcippK3QueSx0aGlzfXJhbmRvbSgpe3JldHVybiB0aGlzLng9TWF0aC5yYW5kb20oKSx0aGlzLnk9TWF0aC5yYW5kb20oKSx0aGlzfSpbU3ltYm9sLml0ZXJhdG9yXSgpe3lpZWxkIHRoaXMueCx5aWVsZCB0aGlzLnl9fWNsYXNzIFR0e2NvbnN0cnVjdG9yKHQsZSxpLHMsbixyLGEsbyxoKXtUdC5wcm90b3R5cGUuaXNNYXRyaXgzPSEwLHRoaXMuZWxlbWVudHM9WzEsMCwwLDAsMSwwLDAsMCwxXSx0IT09dm9pZCAwJiZ0aGlzLnNldCh0LGUsaSxzLG4scixhLG8saCl9c2V0KHQsZSxpLHMsbixyLGEsbyxoKXtjb25zdCBjPXRoaXMuZWxlbWVudHM7cmV0dXJuIGNbMF09dCxjWzFdPXMsY1syXT1hLGNbM109ZSxjWzRdPW4sY1s1XT1vLGNbNl09aSxjWzddPXIsY1s4XT1oLHRoaXN9aWRlbnRpdHkoKXtyZXR1cm4gdGhpcy5zZXQoMSwwLDAsMCwxLDAsMCwwLDEpLHRoaXN9Y29weSh0KXtjb25zdCBlPXRoaXMuZWxlbWVudHMsaT10LmVsZW1lbnRzO3JldHVybiBlWzBdPWlbMF0sZVsxXT1pWzFdLGVbMl09aVsyXSxlWzNdPWlbM10sZVs0XT1pWzRdLGVbNV09aVs1XSxlWzZdPWlbNl0sZVs3XT1pWzddLGVbOF09aVs4XSx0aGlzfWV4dHJhY3RCYXNpcyh0LGUsaSl7cmV0dXJuIHQuc2V0RnJvbU1hdHJpeDNDb2x1bW4odGhpcywwKSxlLnNldEZyb21NYXRyaXgzQ29sdW1uKHRoaXMsMSksaS5zZXRGcm9tTWF0cml4M0NvbHVtbih0aGlzLDIpLHRoaXN9c2V0RnJvbU1hdHJpeDQodCl7Y29uc3QgZT10LmVsZW1lbnRzO3JldHVybiB0aGlzLnNldChlWzBdLGVbNF0sZVs4XSxlWzFdLGVbNV0sZVs5XSxlWzJdLGVbNl0sZVsxMF0pLHRoaXN9bXVsdGlwbHkodCl7cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyh0aGlzLHQpfXByZW11bHRpcGx5KHQpe3JldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXModCx0aGlzKX1tdWx0aXBseU1hdHJpY2VzKHQsZSl7Y29uc3QgaT10LmVsZW1lbnRzLHM9ZS5lbGVtZW50cyxuPXRoaXMuZWxlbWVudHMscj1pWzBdLGE9aVszXSxvPWlbNl0saD1pWzFdLGM9aVs0XSxmPWlbN10sbD1pWzJdLGQ9aVs1XSxwPWlbOF0seT1zWzBdLHg9c1szXSxtPXNbNl0sZz1zWzFdLHc9c1s0XSxNPXNbN10sYj1zWzJdLHo9c1s1XSxfPXNbOF07cmV0dXJuIG5bMF09cip5K2EqZytvKmIsblszXT1yKngrYSp3K28qeixuWzZdPXIqbSthKk0rbypfLG5bMV09aCp5K2MqZytmKmIsbls0XT1oKngrYyp3K2YqeixuWzddPWgqbStjKk0rZipfLG5bMl09bCp5K2QqZytwKmIsbls1XT1sKngrZCp3K3AqeixuWzhdPWwqbStkKk0rcCpfLHRoaXN9bXVsdGlwbHlTY2FsYXIodCl7Y29uc3QgZT10aGlzLmVsZW1lbnRzO3JldHVybiBlWzBdKj10LGVbM10qPXQsZVs2XSo9dCxlWzFdKj10LGVbNF0qPXQsZVs3XSo9dCxlWzJdKj10LGVbNV0qPXQsZVs4XSo9dCx0aGlzfWRldGVybWluYW50KCl7Y29uc3QgdD10aGlzLmVsZW1lbnRzLGU9dFswXSxpPXRbMV0scz10WzJdLG49dFszXSxyPXRbNF0sYT10WzVdLG89dFs2XSxoPXRbN10sYz10WzhdO3JldHVybiBlKnIqYy1lKmEqaC1pKm4qYytpKmEqbytzKm4qaC1zKnIqb31pbnZlcnQoKXtjb25zdCB0PXRoaXMuZWxlbWVudHMsZT10WzBdLGk9dFsxXSxzPXRbMl0sbj10WzNdLHI9dFs0XSxhPXRbNV0sbz10WzZdLGg9dFs3XSxjPXRbOF0sZj1jKnItYSpoLGw9YSpvLWMqbixkPWgqbi1yKm8scD1lKmYraSpsK3MqZDtpZihwPT09MClyZXR1cm4gdGhpcy5zZXQoMCwwLDAsMCwwLDAsMCwwLDApO2NvbnN0IHk9MS9wO3JldHVybiB0WzBdPWYqeSx0WzFdPShzKmgtYyppKSp5LHRbMl09KGEqaS1zKnIpKnksdFszXT1sKnksdFs0XT0oYyplLXMqbykqeSx0WzVdPShzKm4tYSplKSp5LHRbNl09ZCp5LHRbN109KGkqby1oKmUpKnksdFs4XT0ociplLWkqbikqeSx0aGlzfXRyYW5zcG9zZSgpe2xldCB0O2NvbnN0IGU9dGhpcy5lbGVtZW50cztyZXR1cm4gdD1lWzFdLGVbMV09ZVszXSxlWzNdPXQsdD1lWzJdLGVbMl09ZVs2XSxlWzZdPXQsdD1lWzVdLGVbNV09ZVs3XSxlWzddPXQsdGhpc31nZXROb3JtYWxNYXRyaXgodCl7cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeDQodCkuaW52ZXJ0KCkudHJhbnNwb3NlKCl9dHJhbnNwb3NlSW50b0FycmF5KHQpe2NvbnN0IGU9dGhpcy5lbGVtZW50cztyZXR1cm4gdFswXT1lWzBdLHRbMV09ZVszXSx0WzJdPWVbNl0sdFszXT1lWzFdLHRbNF09ZVs0XSx0WzVdPWVbN10sdFs2XT1lWzJdLHRbN109ZVs1XSx0WzhdPWVbOF0sdGhpc31zZXRVdlRyYW5zZm9ybSh0LGUsaSxzLG4scixhKXtjb25zdCBvPU1hdGguY29zKG4pLGg9TWF0aC5zaW4obik7cmV0dXJuIHRoaXMuc2V0KGkqbyxpKmgsLWkqKG8qcitoKmEpK3IrdCwtcypoLHMqbywtcyooLWgqcitvKmEpK2ErZSwwLDAsMSksdGhpc31zY2FsZSh0LGUpe3JldHVybiB0aGlzLnByZW11bHRpcGx5KE9lLm1ha2VTY2FsZSh0LGUpKSx0aGlzfXJvdGF0ZSh0KXtyZXR1cm4gdGhpcy5wcmVtdWx0aXBseShPZS5tYWtlUm90YXRpb24oLXQpKSx0aGlzfXRyYW5zbGF0ZSh0LGUpe3JldHVybiB0aGlzLnByZW11bHRpcGx5KE9lLm1ha2VUcmFuc2xhdGlvbih0LGUpKSx0aGlzfW1ha2VUcmFuc2xhdGlvbih0LGUpe3JldHVybiB0LmlzVmVjdG9yMj90aGlzLnNldCgxLDAsdC54LDAsMSx0LnksMCwwLDEpOnRoaXMuc2V0KDEsMCx0LDAsMSxlLDAsMCwxKSx0aGlzfW1ha2VSb3RhdGlvbih0KXtjb25zdCBlPU1hdGguY29zKHQpLGk9TWF0aC5zaW4odCk7cmV0dXJuIHRoaXMuc2V0KGUsLWksMCxpLGUsMCwwLDAsMSksdGhpc31tYWtlU2NhbGUodCxlKXtyZXR1cm4gdGhpcy5zZXQodCwwLDAsMCxlLDAsMCwwLDEpLHRoaXN9ZXF1YWxzKHQpe2NvbnN0IGU9dGhpcy5lbGVtZW50cyxpPXQuZWxlbWVudHM7Zm9yKGxldCBzPTA7czw5O3MrKylpZihlW3NdIT09aVtzXSlyZXR1cm4hMTtyZXR1cm4hMH1mcm9tQXJyYXkodCxlPTApe2ZvcihsZXQgaT0wO2k8OTtpKyspdGhpcy5lbGVtZW50c1tpXT10W2krZV07cmV0dXJuIHRoaXN9dG9BcnJheSh0PVtdLGU9MCl7Y29uc3QgaT10aGlzLmVsZW1lbnRzO3JldHVybiB0W2VdPWlbMF0sdFtlKzFdPWlbMV0sdFtlKzJdPWlbMl0sdFtlKzNdPWlbM10sdFtlKzRdPWlbNF0sdFtlKzVdPWlbNV0sdFtlKzZdPWlbNl0sdFtlKzddPWlbN10sdFtlKzhdPWlbOF0sdH1jbG9uZSgpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmZyb21BcnJheSh0aGlzLmVsZW1lbnRzKX19Y29uc3QgT2U9bmV3IFR0O2Z1bmN0aW9uIG5zKHUpe2ZvcihsZXQgdD11Lmxlbmd0aC0xO3Q+PTA7LS10KWlmKHVbdF0+PTY1NTM1KXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIFRpKHUpe3JldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiLHUpfWNvbnN0IFBpPXt9O2Z1bmN0aW9uIHJzKHUpe3UgaW4gUGl8fChQaVt1XT0hMCxjb25zb2xlLndhcm4odSkpfWZ1bmN0aW9uIFllKHUpe3JldHVybiB1PC4wNDA0NT91Ki4wNzczOTkzODA4Ok1hdGgucG93KHUqLjk0Nzg2NzI5ODYrLjA1MjEzMjcwMTQsMi40KX1sZXQgRXQ7Y2xhc3Mgb3N7c3RhdGljIGdldERhdGFVUkwodCl7aWYoL15kYXRhOi9pLnRlc3QodC5zcmMpfHx0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQ+InUiKXJldHVybiB0LnNyYztsZXQgZTtpZih0IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpZT10O2Vsc2V7RXQ9PT12b2lkIDAmJihFdD1UaSgiY2FudmFzIikpLEV0LndpZHRoPXQud2lkdGgsRXQuaGVpZ2h0PXQuaGVpZ2h0O2NvbnN0IGk9RXQuZ2V0Q29udGV4dCgiMmQiKTt0IGluc3RhbmNlb2YgSW1hZ2VEYXRhP2kucHV0SW1hZ2VEYXRhKHQsMCwwKTppLmRyYXdJbWFnZSh0LDAsMCx0LndpZHRoLHQuaGVpZ2h0KSxlPUV0fXJldHVybiBlLndpZHRoPjIwNDh8fGUuaGVpZ2h0PjIwNDg/KGNvbnNvbGUud2FybigiVEhSRUUuSW1hZ2VVdGlscy5nZXREYXRhVVJMOiBJbWFnZSBjb252ZXJ0ZWQgdG8ganBnIGZvciBwZXJmb3JtYW5jZSByZWFzb25zIix0KSxlLnRvRGF0YVVSTCgiaW1hZ2UvanBlZyIsLjYpKTplLnRvRGF0YVVSTCgiaW1hZ2UvcG5nIil9c3RhdGljIHNSR0JUb0xpbmVhcih0KXtpZih0eXBlb2YgSFRNTEltYWdlRWxlbWVudDwidSImJnQgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50fHx0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQ8InUiJiZ0IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnR8fHR5cGVvZiBJbWFnZUJpdG1hcDwidSImJnQgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCl7Y29uc3QgZT1UaSgiY2FudmFzIik7ZS53aWR0aD10LndpZHRoLGUuaGVpZ2h0PXQuaGVpZ2h0O2NvbnN0IGk9ZS5nZXRDb250ZXh0KCIyZCIpO2kuZHJhd0ltYWdlKHQsMCwwLHQud2lkdGgsdC5oZWlnaHQpO2NvbnN0IHM9aS5nZXRJbWFnZURhdGEoMCwwLHQud2lkdGgsdC5oZWlnaHQpLG49cy5kYXRhO2ZvcihsZXQgcj0wO3I8bi5sZW5ndGg7cisrKW5bcl09WWUobltyXS8yNTUpKjI1NTtyZXR1cm4gaS5wdXRJbWFnZURhdGEocywwLDApLGV9ZWxzZSBpZih0LmRhdGEpe2NvbnN0IGU9dC5kYXRhLnNsaWNlKDApO2ZvcihsZXQgaT0wO2k8ZS5sZW5ndGg7aSsrKWUgaW5zdGFuY2VvZiBVaW50OEFycmF5fHxlIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXk/ZVtpXT1NYXRoLmZsb29yKFllKGVbaV0vMjU1KSoyNTUpOmVbaV09WWUoZVtpXSk7cmV0dXJue2RhdGE6ZSx3aWR0aDp0LndpZHRoLGhlaWdodDp0LmhlaWdodH19ZWxzZSByZXR1cm4gY29uc29sZS53YXJuKCJUSFJFRS5JbWFnZVV0aWxzLnNSR0JUb0xpbmVhcigpOiBVbnN1cHBvcnRlZCBpbWFnZSB0eXBlLiBObyBjb2xvciBzcGFjZSBjb252ZXJzaW9uIGFwcGxpZWQuIiksdH19bGV0IGFzPTA7Y2xhc3MgY3N7Y29uc3RydWN0b3IodD1udWxsKXt0aGlzLmlzU291cmNlPSEwLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCJpZCIse3ZhbHVlOmFzKyt9KSx0aGlzLnV1aWQ9ZmUoKSx0aGlzLmRhdGE9dCx0aGlzLmRhdGFSZWFkeT0hMCx0aGlzLnZlcnNpb249MH1zZXQgbmVlZHNVcGRhdGUodCl7dD09PSEwJiZ0aGlzLnZlcnNpb24rK310b0pTT04odCl7Y29uc3QgZT10PT09dm9pZCAwfHx0eXBlb2YgdD09InN0cmluZyI7aWYoIWUmJnQuaW1hZ2VzW3RoaXMudXVpZF0hPT12b2lkIDApcmV0dXJuIHQuaW1hZ2VzW3RoaXMudXVpZF07Y29uc3QgaT17dXVpZDp0aGlzLnV1aWQsdXJsOiIifSxzPXRoaXMuZGF0YTtpZihzIT09bnVsbCl7bGV0IG47aWYoQXJyYXkuaXNBcnJheShzKSl7bj1bXTtmb3IobGV0IHI9MCxhPXMubGVuZ3RoO3I8YTtyKyspc1tyXS5pc0RhdGFUZXh0dXJlP24ucHVzaChaZShzW3JdLmltYWdlKSk6bi5wdXNoKFplKHNbcl0pKX1lbHNlIG49WmUocyk7aS51cmw9bn1yZXR1cm4gZXx8KHQuaW1hZ2VzW3RoaXMudXVpZF09aSksaX19ZnVuY3Rpb24gWmUodSl7cmV0dXJuIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50PCJ1IiYmdSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnR8fHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudDwidSImJnUgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudHx8dHlwZW9mIEltYWdlQml0bWFwPCJ1IiYmdSBpbnN0YW5jZW9mIEltYWdlQml0bWFwP29zLmdldERhdGFVUkwodSk6dS5kYXRhP3tkYXRhOkFycmF5LmZyb20odS5kYXRhKSx3aWR0aDp1LndpZHRoLGhlaWdodDp1LmhlaWdodCx0eXBlOnUuZGF0YS5jb25zdHJ1Y3Rvci5uYW1lfTooY29uc29sZS53YXJuKCJUSFJFRS5UZXh0dXJlOiBVbmFibGUgdG8gc2VyaWFsaXplIFRleHR1cmUuIikse30pfWxldCBocz0wO2NsYXNzIGd0IGV4dGVuZHMgWGV7Y29uc3RydWN0b3IodD1ndC5ERUZBVUxUX0lNQUdFLGU9Z3QuREVGQVVMVF9NQVBQSU5HLGk9MTAwMSxzPTEwMDEsbj0xMDA2LHI9MTAwOCxhPTEwMjMsbz0xMDA5LGg9Z3QuREVGQVVMVF9BTklTT1RST1BZLGM9c3Mpe3N1cGVyKCksdGhpcy5pc1RleHR1cmU9ITAsT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsImlkIix7dmFsdWU6aHMrK30pLHRoaXMudXVpZD1mZSgpLHRoaXMubmFtZT0iIix0aGlzLnNvdXJjZT1uZXcgY3ModCksdGhpcy5taXBtYXBzPVtdLHRoaXMubWFwcGluZz1lLHRoaXMuY2hhbm5lbD0wLHRoaXMud3JhcFM9aSx0aGlzLndyYXBUPXMsdGhpcy5tYWdGaWx0ZXI9bix0aGlzLm1pbkZpbHRlcj1yLHRoaXMuYW5pc290cm9weT1oLHRoaXMuZm9ybWF0PWEsdGhpcy5pbnRlcm5hbEZvcm1hdD1udWxsLHRoaXMudHlwZT1vLHRoaXMub2Zmc2V0PW5ldyB2KDAsMCksdGhpcy5yZXBlYXQ9bmV3IHYoMSwxKSx0aGlzLmNlbnRlcj1uZXcgdigwLDApLHRoaXMucm90YXRpb249MCx0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITAsdGhpcy5tYXRyaXg9bmV3IFR0LHRoaXMuZ2VuZXJhdGVNaXBtYXBzPSEwLHRoaXMucHJlbXVsdGlwbHlBbHBoYT0hMSx0aGlzLmZsaXBZPSEwLHRoaXMudW5wYWNrQWxpZ25tZW50PTQsdGhpcy5jb2xvclNwYWNlPWMsdGhpcy51c2VyRGF0YT17fSx0aGlzLnZlcnNpb249MCx0aGlzLm9uVXBkYXRlPW51bGwsdGhpcy5pc1JlbmRlclRhcmdldFRleHR1cmU9ITEsdGhpcy5uZWVkc1BNUkVNVXBkYXRlPSExfWdldCBpbWFnZSgpe3JldHVybiB0aGlzLnNvdXJjZS5kYXRhfXNldCBpbWFnZSh0PW51bGwpe3RoaXMuc291cmNlLmRhdGE9dH11cGRhdGVNYXRyaXgoKXt0aGlzLm1hdHJpeC5zZXRVdlRyYW5zZm9ybSh0aGlzLm9mZnNldC54LHRoaXMub2Zmc2V0LnksdGhpcy5yZXBlYXQueCx0aGlzLnJlcGVhdC55LHRoaXMucm90YXRpb24sdGhpcy5jZW50ZXIueCx0aGlzLmNlbnRlci55KX1jbG9uZSgpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyl9Y29weSh0KXtyZXR1cm4gdGhpcy5uYW1lPXQubmFtZSx0aGlzLnNvdXJjZT10LnNvdXJjZSx0aGlzLm1pcG1hcHM9dC5taXBtYXBzLnNsaWNlKDApLHRoaXMubWFwcGluZz10Lm1hcHBpbmcsdGhpcy5jaGFubmVsPXQuY2hhbm5lbCx0aGlzLndyYXBTPXQud3JhcFMsdGhpcy53cmFwVD10LndyYXBULHRoaXMubWFnRmlsdGVyPXQubWFnRmlsdGVyLHRoaXMubWluRmlsdGVyPXQubWluRmlsdGVyLHRoaXMuYW5pc290cm9weT10LmFuaXNvdHJvcHksdGhpcy5mb3JtYXQ9dC5mb3JtYXQsdGhpcy5pbnRlcm5hbEZvcm1hdD10LmludGVybmFsRm9ybWF0LHRoaXMudHlwZT10LnR5cGUsdGhpcy5vZmZzZXQuY29weSh0Lm9mZnNldCksdGhpcy5yZXBlYXQuY29weSh0LnJlcGVhdCksdGhpcy5jZW50ZXIuY29weSh0LmNlbnRlciksdGhpcy5yb3RhdGlvbj10LnJvdGF0aW9uLHRoaXMubWF0cml4QXV0b1VwZGF0ZT10Lm1hdHJpeEF1dG9VcGRhdGUsdGhpcy5tYXRyaXguY29weSh0Lm1hdHJpeCksdGhpcy5nZW5lcmF0ZU1pcG1hcHM9dC5nZW5lcmF0ZU1pcG1hcHMsdGhpcy5wcmVtdWx0aXBseUFscGhhPXQucHJlbXVsdGlwbHlBbHBoYSx0aGlzLmZsaXBZPXQuZmxpcFksdGhpcy51bnBhY2tBbGlnbm1lbnQ9dC51bnBhY2tBbGlnbm1lbnQsdGhpcy5jb2xvclNwYWNlPXQuY29sb3JTcGFjZSx0aGlzLnVzZXJEYXRhPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodC51c2VyRGF0YSkpLHRoaXMubmVlZHNVcGRhdGU9ITAsdGhpc310b0pTT04odCl7Y29uc3QgZT10PT09dm9pZCAwfHx0eXBlb2YgdD09InN0cmluZyI7aWYoIWUmJnQudGV4dHVyZXNbdGhpcy51dWlkXSE9PXZvaWQgMClyZXR1cm4gdC50ZXh0dXJlc1t0aGlzLnV1aWRdO2NvbnN0IGk9e21ldGFkYXRhOnt2ZXJzaW9uOjQuNix0eXBlOiJUZXh0dXJlIixnZW5lcmF0b3I6IlRleHR1cmUudG9KU09OIn0sdXVpZDp0aGlzLnV1aWQsbmFtZTp0aGlzLm5hbWUsaW1hZ2U6dGhpcy5zb3VyY2UudG9KU09OKHQpLnV1aWQsbWFwcGluZzp0aGlzLm1hcHBpbmcsY2hhbm5lbDp0aGlzLmNoYW5uZWwscmVwZWF0Olt0aGlzLnJlcGVhdC54LHRoaXMucmVwZWF0LnldLG9mZnNldDpbdGhpcy5vZmZzZXQueCx0aGlzLm9mZnNldC55XSxjZW50ZXI6W3RoaXMuY2VudGVyLngsdGhpcy5jZW50ZXIueV0scm90YXRpb246dGhpcy5yb3RhdGlvbix3cmFwOlt0aGlzLndyYXBTLHRoaXMud3JhcFRdLGZvcm1hdDp0aGlzLmZvcm1hdCxpbnRlcm5hbEZvcm1hdDp0aGlzLmludGVybmFsRm9ybWF0LHR5cGU6dGhpcy50eXBlLGNvbG9yU3BhY2U6dGhpcy5jb2xvclNwYWNlLG1pbkZpbHRlcjp0aGlzLm1pbkZpbHRlcixtYWdGaWx0ZXI6dGhpcy5tYWdGaWx0ZXIsYW5pc290cm9weTp0aGlzLmFuaXNvdHJvcHksZmxpcFk6dGhpcy5mbGlwWSxnZW5lcmF0ZU1pcG1hcHM6dGhpcy5nZW5lcmF0ZU1pcG1hcHMscHJlbXVsdGlwbHlBbHBoYTp0aGlzLnByZW11bHRpcGx5QWxwaGEsdW5wYWNrQWxpZ25tZW50OnRoaXMudW5wYWNrQWxpZ25tZW50fTtyZXR1cm4gT2JqZWN0LmtleXModGhpcy51c2VyRGF0YSkubGVuZ3RoPjAmJihpLnVzZXJEYXRhPXRoaXMudXNlckRhdGEpLGV8fCh0LnRleHR1cmVzW3RoaXMudXVpZF09aSksaX1kaXNwb3NlKCl7dGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOiJkaXNwb3NlIn0pfXRyYW5zZm9ybVV2KHQpe2lmKHRoaXMubWFwcGluZyE9PTMwMClyZXR1cm4gdDtpZih0LmFwcGx5TWF0cml4Myh0aGlzLm1hdHJpeCksdC54PDB8fHQueD4xKXN3aXRjaCh0aGlzLndyYXBTKXtjYXNlIDFlMzp0Lng9dC54LU1hdGguZmxvb3IodC54KTticmVhaztjYXNlIDEwMDE6dC54PXQueDwwPzA6MTticmVhaztjYXNlIDEwMDI6TWF0aC5hYnMoTWF0aC5mbG9vcih0LngpJTIpPT09MT90Lng9TWF0aC5jZWlsKHQueCktdC54OnQueD10LngtTWF0aC5mbG9vcih0LngpO2JyZWFrfWlmKHQueTwwfHx0Lnk+MSlzd2l0Y2godGhpcy53cmFwVCl7Y2FzZSAxZTM6dC55PXQueS1NYXRoLmZsb29yKHQueSk7YnJlYWs7Y2FzZSAxMDAxOnQueT10Lnk8MD8wOjE7YnJlYWs7Y2FzZSAxMDAyOk1hdGguYWJzKE1hdGguZmxvb3IodC55KSUyKT09PTE/dC55PU1hdGguY2VpbCh0LnkpLXQueTp0Lnk9dC55LU1hdGguZmxvb3IodC55KTticmVha31yZXR1cm4gdGhpcy5mbGlwWSYmKHQueT0xLXQueSksdH1zZXQgbmVlZHNVcGRhdGUodCl7dD09PSEwJiYodGhpcy52ZXJzaW9uKyssdGhpcy5zb3VyY2UubmVlZHNVcGRhdGU9ITApfX1ndC5ERUZBVUxUX0lNQUdFPW51bGwsZ3QuREVGQVVMVF9NQVBQSU5HPTMwMCxndC5ERUZBVUxUX0FOSVNPVFJPUFk9MTtjbGFzcyBRdHtjb25zdHJ1Y3Rvcih0PTAsZT0wLGk9MCxzPTEpe3RoaXMuaXNRdWF0ZXJuaW9uPSEwLHRoaXMuX3g9dCx0aGlzLl95PWUsdGhpcy5fej1pLHRoaXMuX3c9c31zdGF0aWMgc2xlcnBGbGF0KHQsZSxpLHMsbixyLGEpe2xldCBvPWlbcyswXSxoPWlbcysxXSxjPWlbcysyXSxmPWlbcyszXTtjb25zdCBsPW5bciswXSxkPW5bcisxXSxwPW5bcisyXSx5PW5bciszXTtpZihhPT09MCl7dFtlKzBdPW8sdFtlKzFdPWgsdFtlKzJdPWMsdFtlKzNdPWY7cmV0dXJufWlmKGE9PT0xKXt0W2UrMF09bCx0W2UrMV09ZCx0W2UrMl09cCx0W2UrM109eTtyZXR1cm59aWYoZiE9PXl8fG8hPT1sfHxoIT09ZHx8YyE9PXApe2xldCB4PTEtYTtjb25zdCBtPW8qbCtoKmQrYypwK2YqeSxnPW0+PTA/MTotMSx3PTEtbSptO2lmKHc+TnVtYmVyLkVQU0lMT04pe2NvbnN0IGI9TWF0aC5zcXJ0KHcpLHo9TWF0aC5hdGFuMihiLG0qZyk7eD1NYXRoLnNpbih4KnopL2IsYT1NYXRoLnNpbihhKnopL2J9Y29uc3QgTT1hKmc7aWYobz1vKngrbCpNLGg9aCp4K2QqTSxjPWMqeCtwKk0sZj1mKngreSpNLHg9PT0xLWEpe2NvbnN0IGI9MS9NYXRoLnNxcnQobypvK2gqaCtjKmMrZipmKTtvKj1iLGgqPWIsYyo9YixmKj1ifX10W2VdPW8sdFtlKzFdPWgsdFtlKzJdPWMsdFtlKzNdPWZ9c3RhdGljIG11bHRpcGx5UXVhdGVybmlvbnNGbGF0KHQsZSxpLHMsbixyKXtjb25zdCBhPWlbc10sbz1pW3MrMV0saD1pW3MrMl0sYz1pW3MrM10sZj1uW3JdLGw9bltyKzFdLGQ9bltyKzJdLHA9bltyKzNdO3JldHVybiB0W2VdPWEqcCtjKmYrbypkLWgqbCx0W2UrMV09bypwK2MqbCtoKmYtYSpkLHRbZSsyXT1oKnArYypkK2EqbC1vKmYsdFtlKzNdPWMqcC1hKmYtbypsLWgqZCx0fWdldCB4KCl7cmV0dXJuIHRoaXMuX3h9c2V0IHgodCl7dGhpcy5feD10LHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKX1nZXQgeSgpe3JldHVybiB0aGlzLl95fXNldCB5KHQpe3RoaXMuX3k9dCx0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCl9Z2V0IHooKXtyZXR1cm4gdGhpcy5fen1zZXQgeih0KXt0aGlzLl96PXQsdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpfWdldCB3KCl7cmV0dXJuIHRoaXMuX3d9c2V0IHcodCl7dGhpcy5fdz10LHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKX1zZXQodCxlLGkscyl7cmV0dXJuIHRoaXMuX3g9dCx0aGlzLl95PWUsdGhpcy5fej1pLHRoaXMuX3c9cyx0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCksdGhpc31jbG9uZSgpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLl94LHRoaXMuX3ksdGhpcy5feix0aGlzLl93KX1jb3B5KHQpe3JldHVybiB0aGlzLl94PXQueCx0aGlzLl95PXQueSx0aGlzLl96PXQueix0aGlzLl93PXQudyx0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCksdGhpc31zZXRGcm9tRXVsZXIodCxlPSEwKXtjb25zdCBpPXQuX3gscz10Ll95LG49dC5feixyPXQuX29yZGVyLGE9TWF0aC5jb3Msbz1NYXRoLnNpbixoPWEoaS8yKSxjPWEocy8yKSxmPWEobi8yKSxsPW8oaS8yKSxkPW8ocy8yKSxwPW8obi8yKTtzd2l0Y2gocil7Y2FzZSJYWVoiOnRoaXMuX3g9bCpjKmYraCpkKnAsdGhpcy5feT1oKmQqZi1sKmMqcCx0aGlzLl96PWgqYypwK2wqZCpmLHRoaXMuX3c9aCpjKmYtbCpkKnA7YnJlYWs7Y2FzZSJZWFoiOnRoaXMuX3g9bCpjKmYraCpkKnAsdGhpcy5feT1oKmQqZi1sKmMqcCx0aGlzLl96PWgqYypwLWwqZCpmLHRoaXMuX3c9aCpjKmYrbCpkKnA7YnJlYWs7Y2FzZSJaWFkiOnRoaXMuX3g9bCpjKmYtaCpkKnAsdGhpcy5feT1oKmQqZitsKmMqcCx0aGlzLl96PWgqYypwK2wqZCpmLHRoaXMuX3c9aCpjKmYtbCpkKnA7YnJlYWs7Y2FzZSJaWVgiOnRoaXMuX3g9bCpjKmYtaCpkKnAsdGhpcy5feT1oKmQqZitsKmMqcCx0aGlzLl96PWgqYypwLWwqZCpmLHRoaXMuX3c9aCpjKmYrbCpkKnA7YnJlYWs7Y2FzZSJZWlgiOnRoaXMuX3g9bCpjKmYraCpkKnAsdGhpcy5feT1oKmQqZitsKmMqcCx0aGlzLl96PWgqYypwLWwqZCpmLHRoaXMuX3c9aCpjKmYtbCpkKnA7YnJlYWs7Y2FzZSJYWlkiOnRoaXMuX3g9bCpjKmYtaCpkKnAsdGhpcy5feT1oKmQqZi1sKmMqcCx0aGlzLl96PWgqYypwK2wqZCpmLHRoaXMuX3c9aCpjKmYrbCpkKnA7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLndhcm4oIlRIUkVFLlF1YXRlcm5pb246IC5zZXRGcm9tRXVsZXIoKSBlbmNvdW50ZXJlZCBhbiB1bmtub3duIG9yZGVyOiAiK3IpfXJldHVybiBlPT09ITAmJnRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKSx0aGlzfXNldEZyb21BeGlzQW5nbGUodCxlKXtjb25zdCBpPWUvMixzPU1hdGguc2luKGkpO3JldHVybiB0aGlzLl94PXQueCpzLHRoaXMuX3k9dC55KnMsdGhpcy5fej10Lnoqcyx0aGlzLl93PU1hdGguY29zKGkpLHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKSx0aGlzfXNldEZyb21Sb3RhdGlvbk1hdHJpeCh0KXtjb25zdCBlPXQuZWxlbWVudHMsaT1lWzBdLHM9ZVs0XSxuPWVbOF0scj1lWzFdLGE9ZVs1XSxvPWVbOV0saD1lWzJdLGM9ZVs2XSxmPWVbMTBdLGw9aSthK2Y7aWYobD4wKXtjb25zdCBkPS41L01hdGguc3FydChsKzEpO3RoaXMuX3c9LjI1L2QsdGhpcy5feD0oYy1vKSpkLHRoaXMuX3k9KG4taCkqZCx0aGlzLl96PShyLXMpKmR9ZWxzZSBpZihpPmEmJmk+Zil7Y29uc3QgZD0yKk1hdGguc3FydCgxK2ktYS1mKTt0aGlzLl93PShjLW8pL2QsdGhpcy5feD0uMjUqZCx0aGlzLl95PShzK3IpL2QsdGhpcy5fej0obitoKS9kfWVsc2UgaWYoYT5mKXtjb25zdCBkPTIqTWF0aC5zcXJ0KDErYS1pLWYpO3RoaXMuX3c9KG4taCkvZCx0aGlzLl94PShzK3IpL2QsdGhpcy5feT0uMjUqZCx0aGlzLl96PShvK2MpL2R9ZWxzZXtjb25zdCBkPTIqTWF0aC5zcXJ0KDErZi1pLWEpO3RoaXMuX3c9KHItcykvZCx0aGlzLl94PShuK2gpL2QsdGhpcy5feT0obytjKS9kLHRoaXMuX3o9LjI1KmR9cmV0dXJuIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKSx0aGlzfXNldEZyb21Vbml0VmVjdG9ycyh0LGUpe2xldCBpPXQuZG90KGUpKzE7cmV0dXJuIGk8TnVtYmVyLkVQU0lMT04/KGk9MCxNYXRoLmFicyh0LngpPk1hdGguYWJzKHQueik/KHRoaXMuX3g9LXQueSx0aGlzLl95PXQueCx0aGlzLl96PTAsdGhpcy5fdz1pKToodGhpcy5feD0wLHRoaXMuX3k9LXQueix0aGlzLl96PXQueSx0aGlzLl93PWkpKToodGhpcy5feD10LnkqZS56LXQueiplLnksdGhpcy5feT10LnoqZS54LXQueCplLnosdGhpcy5fej10LngqZS55LXQueSplLngsdGhpcy5fdz1pKSx0aGlzLm5vcm1hbGl6ZSgpfWFuZ2xlVG8odCl7cmV0dXJuIDIqTWF0aC5hY29zKE1hdGguYWJzKGF0KHRoaXMuZG90KHQpLC0xLDEpKSl9cm90YXRlVG93YXJkcyh0LGUpe2NvbnN0IGk9dGhpcy5hbmdsZVRvKHQpO2lmKGk9PT0wKXJldHVybiB0aGlzO2NvbnN0IHM9TWF0aC5taW4oMSxlL2kpO3JldHVybiB0aGlzLnNsZXJwKHQscyksdGhpc31pZGVudGl0eSgpe3JldHVybiB0aGlzLnNldCgwLDAsMCwxKX1pbnZlcnQoKXtyZXR1cm4gdGhpcy5jb25qdWdhdGUoKX1jb25qdWdhdGUoKXtyZXR1cm4gdGhpcy5feCo9LTEsdGhpcy5feSo9LTEsdGhpcy5feio9LTEsdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpLHRoaXN9ZG90KHQpe3JldHVybiB0aGlzLl94KnQuX3grdGhpcy5feSp0Ll95K3RoaXMuX3oqdC5feit0aGlzLl93KnQuX3d9bGVuZ3RoU3EoKXtyZXR1cm4gdGhpcy5feCp0aGlzLl94K3RoaXMuX3kqdGhpcy5feSt0aGlzLl96KnRoaXMuX3ordGhpcy5fdyp0aGlzLl93fWxlbmd0aCgpe3JldHVybiBNYXRoLnNxcnQodGhpcy5feCp0aGlzLl94K3RoaXMuX3kqdGhpcy5feSt0aGlzLl96KnRoaXMuX3ordGhpcy5fdyp0aGlzLl93KX1ub3JtYWxpemUoKXtsZXQgdD10aGlzLmxlbmd0aCgpO3JldHVybiB0PT09MD8odGhpcy5feD0wLHRoaXMuX3k9MCx0aGlzLl96PTAsdGhpcy5fdz0xKToodD0xL3QsdGhpcy5feD10aGlzLl94KnQsdGhpcy5feT10aGlzLl95KnQsdGhpcy5fej10aGlzLl96KnQsdGhpcy5fdz10aGlzLl93KnQpLHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKSx0aGlzfW11bHRpcGx5KHQpe3JldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnModGhpcyx0KX1wcmVtdWx0aXBseSh0KXtyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKHQsdGhpcyl9bXVsdGlwbHlRdWF0ZXJuaW9ucyh0LGUpe2NvbnN0IGk9dC5feCxzPXQuX3ksbj10Ll96LHI9dC5fdyxhPWUuX3gsbz1lLl95LGg9ZS5feixjPWUuX3c7cmV0dXJuIHRoaXMuX3g9aSpjK3IqYStzKmgtbipvLHRoaXMuX3k9cypjK3IqbytuKmEtaSpoLHRoaXMuX3o9bipjK3IqaCtpKm8tcyphLHRoaXMuX3c9cipjLWkqYS1zKm8tbipoLHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKSx0aGlzfXNsZXJwKHQsZSl7aWYoZT09PTApcmV0dXJuIHRoaXM7aWYoZT09PTEpcmV0dXJuIHRoaXMuY29weSh0KTtjb25zdCBpPXRoaXMuX3gscz10aGlzLl95LG49dGhpcy5feixyPXRoaXMuX3c7bGV0IGE9cip0Ll93K2kqdC5feCtzKnQuX3krbip0Ll96O2lmKGE8MD8odGhpcy5fdz0tdC5fdyx0aGlzLl94PS10Ll94LHRoaXMuX3k9LXQuX3ksdGhpcy5fej0tdC5feixhPS1hKTp0aGlzLmNvcHkodCksYT49MSlyZXR1cm4gdGhpcy5fdz1yLHRoaXMuX3g9aSx0aGlzLl95PXMsdGhpcy5fej1uLHRoaXM7Y29uc3Qgbz0xLWEqYTtpZihvPD1OdW1iZXIuRVBTSUxPTil7Y29uc3QgZD0xLWU7cmV0dXJuIHRoaXMuX3c9ZCpyK2UqdGhpcy5fdyx0aGlzLl94PWQqaStlKnRoaXMuX3gsdGhpcy5feT1kKnMrZSp0aGlzLl95LHRoaXMuX3o9ZCpuK2UqdGhpcy5feix0aGlzLm5vcm1hbGl6ZSgpLHRoaXN9Y29uc3QgaD1NYXRoLnNxcnQobyksYz1NYXRoLmF0YW4yKGgsYSksZj1NYXRoLnNpbigoMS1lKSpjKS9oLGw9TWF0aC5zaW4oZSpjKS9oO3JldHVybiB0aGlzLl93PXIqZit0aGlzLl93KmwsdGhpcy5feD1pKmYrdGhpcy5feCpsLHRoaXMuX3k9cypmK3RoaXMuX3kqbCx0aGlzLl96PW4qZit0aGlzLl96KmwsdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpLHRoaXN9c2xlcnBRdWF0ZXJuaW9ucyh0LGUsaSl7cmV0dXJuIHRoaXMuY29weSh0KS5zbGVycChlLGkpfXJhbmRvbSgpe2NvbnN0IHQ9MipNYXRoLlBJKk1hdGgucmFuZG9tKCksZT0yKk1hdGguUEkqTWF0aC5yYW5kb20oKSxpPU1hdGgucmFuZG9tKCkscz1NYXRoLnNxcnQoMS1pKSxuPU1hdGguc3FydChpKTtyZXR1cm4gdGhpcy5zZXQocypNYXRoLnNpbih0KSxzKk1hdGguY29zKHQpLG4qTWF0aC5zaW4oZSksbipNYXRoLmNvcyhlKSl9ZXF1YWxzKHQpe3JldHVybiB0Ll94PT09dGhpcy5feCYmdC5feT09PXRoaXMuX3kmJnQuX3o9PT10aGlzLl96JiZ0Ll93PT09dGhpcy5fd31mcm9tQXJyYXkodCxlPTApe3JldHVybiB0aGlzLl94PXRbZV0sdGhpcy5feT10W2UrMV0sdGhpcy5fej10W2UrMl0sdGhpcy5fdz10W2UrM10sdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpLHRoaXN9dG9BcnJheSh0PVtdLGU9MCl7cmV0dXJuIHRbZV09dGhpcy5feCx0W2UrMV09dGhpcy5feSx0W2UrMl09dGhpcy5feix0W2UrM109dGhpcy5fdyx0fWZyb21CdWZmZXJBdHRyaWJ1dGUodCxlKXtyZXR1cm4gdGhpcy5feD10LmdldFgoZSksdGhpcy5feT10LmdldFkoZSksdGhpcy5fej10LmdldFooZSksdGhpcy5fdz10LmdldFcoZSksdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpLHRoaXN9dG9KU09OKCl7cmV0dXJuIHRoaXMudG9BcnJheSgpfV9vbkNoYW5nZSh0KXtyZXR1cm4gdGhpcy5fb25DaGFuZ2VDYWxsYmFjaz10LHRoaXN9X29uQ2hhbmdlQ2FsbGJhY2soKXt9KltTeW1ib2wuaXRlcmF0b3JdKCl7eWllbGQgdGhpcy5feCx5aWVsZCB0aGlzLl95LHlpZWxkIHRoaXMuX3oseWllbGQgdGhpcy5fd319Y2xhc3MgQXtjb25zdHJ1Y3Rvcih0PTAsZT0wLGk9MCl7QS5wcm90b3R5cGUuaXNWZWN0b3IzPSEwLHRoaXMueD10LHRoaXMueT1lLHRoaXMuej1pfXNldCh0LGUsaSl7cmV0dXJuIGk9PT12b2lkIDAmJihpPXRoaXMueiksdGhpcy54PXQsdGhpcy55PWUsdGhpcy56PWksdGhpc31zZXRTY2FsYXIodCl7cmV0dXJuIHRoaXMueD10LHRoaXMueT10LHRoaXMuej10LHRoaXN9c2V0WCh0KXtyZXR1cm4gdGhpcy54PXQsdGhpc31zZXRZKHQpe3JldHVybiB0aGlzLnk9dCx0aGlzfXNldFoodCl7cmV0dXJuIHRoaXMuej10LHRoaXN9c2V0Q29tcG9uZW50KHQsZSl7c3dpdGNoKHQpe2Nhc2UgMDp0aGlzLng9ZTticmVhaztjYXNlIDE6dGhpcy55PWU7YnJlYWs7Y2FzZSAyOnRoaXMuej1lO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICIrdCl9cmV0dXJuIHRoaXN9Z2V0Q29tcG9uZW50KHQpe3N3aXRjaCh0KXtjYXNlIDA6cmV0dXJuIHRoaXMueDtjYXNlIDE6cmV0dXJuIHRoaXMueTtjYXNlIDI6cmV0dXJuIHRoaXMuejtkZWZhdWx0OnRocm93IG5ldyBFcnJvcigiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAiK3QpfX1jbG9uZSgpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLngsdGhpcy55LHRoaXMueil9Y29weSh0KXtyZXR1cm4gdGhpcy54PXQueCx0aGlzLnk9dC55LHRoaXMuej10LnosdGhpc31hZGQodCl7cmV0dXJuIHRoaXMueCs9dC54LHRoaXMueSs9dC55LHRoaXMueis9dC56LHRoaXN9YWRkU2NhbGFyKHQpe3JldHVybiB0aGlzLngrPXQsdGhpcy55Kz10LHRoaXMueis9dCx0aGlzfWFkZFZlY3RvcnModCxlKXtyZXR1cm4gdGhpcy54PXQueCtlLngsdGhpcy55PXQueStlLnksdGhpcy56PXQueitlLnosdGhpc31hZGRTY2FsZWRWZWN0b3IodCxlKXtyZXR1cm4gdGhpcy54Kz10LngqZSx0aGlzLnkrPXQueSplLHRoaXMueis9dC56KmUsdGhpc31zdWIodCl7cmV0dXJuIHRoaXMueC09dC54LHRoaXMueS09dC55LHRoaXMuei09dC56LHRoaXN9c3ViU2NhbGFyKHQpe3JldHVybiB0aGlzLngtPXQsdGhpcy55LT10LHRoaXMuei09dCx0aGlzfXN1YlZlY3RvcnModCxlKXtyZXR1cm4gdGhpcy54PXQueC1lLngsdGhpcy55PXQueS1lLnksdGhpcy56PXQuei1lLnosdGhpc31tdWx0aXBseSh0KXtyZXR1cm4gdGhpcy54Kj10LngsdGhpcy55Kj10LnksdGhpcy56Kj10LnosdGhpc31tdWx0aXBseVNjYWxhcih0KXtyZXR1cm4gdGhpcy54Kj10LHRoaXMueSo9dCx0aGlzLnoqPXQsdGhpc31tdWx0aXBseVZlY3RvcnModCxlKXtyZXR1cm4gdGhpcy54PXQueCplLngsdGhpcy55PXQueSplLnksdGhpcy56PXQueiplLnosdGhpc31hcHBseUV1bGVyKHQpe3JldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbihDaS5zZXRGcm9tRXVsZXIodCkpfWFwcGx5QXhpc0FuZ2xlKHQsZSl7cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKENpLnNldEZyb21BeGlzQW5nbGUodCxlKSl9YXBwbHlNYXRyaXgzKHQpe2NvbnN0IGU9dGhpcy54LGk9dGhpcy55LHM9dGhpcy56LG49dC5lbGVtZW50cztyZXR1cm4gdGhpcy54PW5bMF0qZStuWzNdKmkrbls2XSpzLHRoaXMueT1uWzFdKmUrbls0XSppK25bN10qcyx0aGlzLno9blsyXSplK25bNV0qaStuWzhdKnMsdGhpc31hcHBseU5vcm1hbE1hdHJpeCh0KXtyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDModCkubm9ybWFsaXplKCl9YXBwbHlNYXRyaXg0KHQpe2NvbnN0IGU9dGhpcy54LGk9dGhpcy55LHM9dGhpcy56LG49dC5lbGVtZW50cyxyPTEvKG5bM10qZStuWzddKmkrblsxMV0qcytuWzE1XSk7cmV0dXJuIHRoaXMueD0oblswXSplK25bNF0qaStuWzhdKnMrblsxMl0pKnIsdGhpcy55PShuWzFdKmUrbls1XSppK25bOV0qcytuWzEzXSkqcix0aGlzLno9KG5bMl0qZStuWzZdKmkrblsxMF0qcytuWzE0XSkqcix0aGlzfWFwcGx5UXVhdGVybmlvbih0KXtjb25zdCBlPXRoaXMueCxpPXRoaXMueSxzPXRoaXMueixuPXQueCxyPXQueSxhPXQueixvPXQudyxoPTIqKHIqcy1hKmkpLGM9MiooYSplLW4qcyksZj0yKihuKmktciplKTtyZXR1cm4gdGhpcy54PWUrbypoK3IqZi1hKmMsdGhpcy55PWkrbypjK2EqaC1uKmYsdGhpcy56PXMrbypmK24qYy1yKmgsdGhpc31wcm9qZWN0KHQpe3JldHVybiB0aGlzLmFwcGx5TWF0cml4NCh0Lm1hdHJpeFdvcmxkSW52ZXJzZSkuYXBwbHlNYXRyaXg0KHQucHJvamVjdGlvbk1hdHJpeCl9dW5wcm9qZWN0KHQpe3JldHVybiB0aGlzLmFwcGx5TWF0cml4NCh0LnByb2plY3Rpb25NYXRyaXhJbnZlcnNlKS5hcHBseU1hdHJpeDQodC5tYXRyaXhXb3JsZCl9dHJhbnNmb3JtRGlyZWN0aW9uKHQpe2NvbnN0IGU9dGhpcy54LGk9dGhpcy55LHM9dGhpcy56LG49dC5lbGVtZW50cztyZXR1cm4gdGhpcy54PW5bMF0qZStuWzRdKmkrbls4XSpzLHRoaXMueT1uWzFdKmUrbls1XSppK25bOV0qcyx0aGlzLno9blsyXSplK25bNl0qaStuWzEwXSpzLHRoaXMubm9ybWFsaXplKCl9ZGl2aWRlKHQpe3JldHVybiB0aGlzLngvPXQueCx0aGlzLnkvPXQueSx0aGlzLnovPXQueix0aGlzfWRpdmlkZVNjYWxhcih0KXtyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigxL3QpfW1pbih0KXtyZXR1cm4gdGhpcy54PU1hdGgubWluKHRoaXMueCx0LngpLHRoaXMueT1NYXRoLm1pbih0aGlzLnksdC55KSx0aGlzLno9TWF0aC5taW4odGhpcy56LHQueiksdGhpc31tYXgodCl7cmV0dXJuIHRoaXMueD1NYXRoLm1heCh0aGlzLngsdC54KSx0aGlzLnk9TWF0aC5tYXgodGhpcy55LHQueSksdGhpcy56PU1hdGgubWF4KHRoaXMueix0LnopLHRoaXN9Y2xhbXAodCxlKXtyZXR1cm4gdGhpcy54PU1hdGgubWF4KHQueCxNYXRoLm1pbihlLngsdGhpcy54KSksdGhpcy55PU1hdGgubWF4KHQueSxNYXRoLm1pbihlLnksdGhpcy55KSksdGhpcy56PU1hdGgubWF4KHQueixNYXRoLm1pbihlLnosdGhpcy56KSksdGhpc31jbGFtcFNjYWxhcih0LGUpe3JldHVybiB0aGlzLng9TWF0aC5tYXgodCxNYXRoLm1pbihlLHRoaXMueCkpLHRoaXMueT1NYXRoLm1heCh0LE1hdGgubWluKGUsdGhpcy55KSksdGhpcy56PU1hdGgubWF4KHQsTWF0aC5taW4oZSx0aGlzLnopKSx0aGlzfWNsYW1wTGVuZ3RoKHQsZSl7Y29uc3QgaT10aGlzLmxlbmd0aCgpO3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcihpfHwxKS5tdWx0aXBseVNjYWxhcihNYXRoLm1heCh0LE1hdGgubWluKGUsaSkpKX1mbG9vcigpe3JldHVybiB0aGlzLng9TWF0aC5mbG9vcih0aGlzLngpLHRoaXMueT1NYXRoLmZsb29yKHRoaXMueSksdGhpcy56PU1hdGguZmxvb3IodGhpcy56KSx0aGlzfWNlaWwoKXtyZXR1cm4gdGhpcy54PU1hdGguY2VpbCh0aGlzLngpLHRoaXMueT1NYXRoLmNlaWwodGhpcy55KSx0aGlzLno9TWF0aC5jZWlsKHRoaXMueiksdGhpc31yb3VuZCgpe3JldHVybiB0aGlzLng9TWF0aC5yb3VuZCh0aGlzLngpLHRoaXMueT1NYXRoLnJvdW5kKHRoaXMueSksdGhpcy56PU1hdGgucm91bmQodGhpcy56KSx0aGlzfXJvdW5kVG9aZXJvKCl7cmV0dXJuIHRoaXMueD1NYXRoLnRydW5jKHRoaXMueCksdGhpcy55PU1hdGgudHJ1bmModGhpcy55KSx0aGlzLno9TWF0aC50cnVuYyh0aGlzLnopLHRoaXN9bmVnYXRlKCl7cmV0dXJuIHRoaXMueD0tdGhpcy54LHRoaXMueT0tdGhpcy55LHRoaXMuej0tdGhpcy56LHRoaXN9ZG90KHQpe3JldHVybiB0aGlzLngqdC54K3RoaXMueSp0LnkrdGhpcy56KnQuen1sZW5ndGhTcSgpe3JldHVybiB0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnkrdGhpcy56KnRoaXMuen1sZW5ndGgoKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCp0aGlzLngrdGhpcy55KnRoaXMueSt0aGlzLnoqdGhpcy56KX1tYW5oYXR0YW5MZW5ndGgoKXtyZXR1cm4gTWF0aC5hYnModGhpcy54KStNYXRoLmFicyh0aGlzLnkpK01hdGguYWJzKHRoaXMueil9bm9ybWFsaXplKCl7cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKHRoaXMubGVuZ3RoKCl8fDEpfXNldExlbmd0aCh0KXtyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcih0KX1sZXJwKHQsZSl7cmV0dXJuIHRoaXMueCs9KHQueC10aGlzLngpKmUsdGhpcy55Kz0odC55LXRoaXMueSkqZSx0aGlzLnorPSh0LnotdGhpcy56KSplLHRoaXN9bGVycFZlY3RvcnModCxlLGkpe3JldHVybiB0aGlzLng9dC54KyhlLngtdC54KSppLHRoaXMueT10LnkrKGUueS10LnkpKmksdGhpcy56PXQueisoZS56LXQueikqaSx0aGlzfWNyb3NzKHQpe3JldHVybiB0aGlzLmNyb3NzVmVjdG9ycyh0aGlzLHQpfWNyb3NzVmVjdG9ycyh0LGUpe2NvbnN0IGk9dC54LHM9dC55LG49dC56LHI9ZS54LGE9ZS55LG89ZS56O3JldHVybiB0aGlzLng9cypvLW4qYSx0aGlzLnk9bipyLWkqbyx0aGlzLno9aSphLXMqcix0aGlzfXByb2plY3RPblZlY3Rvcih0KXtjb25zdCBlPXQubGVuZ3RoU3EoKTtpZihlPT09MClyZXR1cm4gdGhpcy5zZXQoMCwwLDApO2NvbnN0IGk9dC5kb3QodGhpcykvZTtyZXR1cm4gdGhpcy5jb3B5KHQpLm11bHRpcGx5U2NhbGFyKGkpfXByb2plY3RPblBsYW5lKHQpe3JldHVybiBIZS5jb3B5KHRoaXMpLnByb2plY3RPblZlY3Rvcih0KSx0aGlzLnN1YihIZSl9cmVmbGVjdCh0KXtyZXR1cm4gdGhpcy5zdWIoSGUuY29weSh0KS5tdWx0aXBseVNjYWxhcigyKnRoaXMuZG90KHQpKSl9YW5nbGVUbyh0KXtjb25zdCBlPU1hdGguc3FydCh0aGlzLmxlbmd0aFNxKCkqdC5sZW5ndGhTcSgpKTtpZihlPT09MClyZXR1cm4gTWF0aC5QSS8yO2NvbnN0IGk9dGhpcy5kb3QodCkvZTtyZXR1cm4gTWF0aC5hY29zKGF0KGksLTEsMSkpfWRpc3RhbmNlVG8odCl7cmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKHQpKX1kaXN0YW5jZVRvU3F1YXJlZCh0KXtjb25zdCBlPXRoaXMueC10LngsaT10aGlzLnktdC55LHM9dGhpcy56LXQuejtyZXR1cm4gZSplK2kqaStzKnN9bWFuaGF0dGFuRGlzdGFuY2VUbyh0KXtyZXR1cm4gTWF0aC5hYnModGhpcy54LXQueCkrTWF0aC5hYnModGhpcy55LXQueSkrTWF0aC5hYnModGhpcy56LXQueil9c2V0RnJvbVNwaGVyaWNhbCh0KXtyZXR1cm4gdGhpcy5zZXRGcm9tU3BoZXJpY2FsQ29vcmRzKHQucmFkaXVzLHQucGhpLHQudGhldGEpfXNldEZyb21TcGhlcmljYWxDb29yZHModCxlLGkpe2NvbnN0IHM9TWF0aC5zaW4oZSkqdDtyZXR1cm4gdGhpcy54PXMqTWF0aC5zaW4oaSksdGhpcy55PU1hdGguY29zKGUpKnQsdGhpcy56PXMqTWF0aC5jb3MoaSksdGhpc31zZXRGcm9tQ3lsaW5kcmljYWwodCl7cmV0dXJuIHRoaXMuc2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzKHQucmFkaXVzLHQudGhldGEsdC55KX1zZXRGcm9tQ3lsaW5kcmljYWxDb29yZHModCxlLGkpe3JldHVybiB0aGlzLng9dCpNYXRoLnNpbihlKSx0aGlzLnk9aSx0aGlzLno9dCpNYXRoLmNvcyhlKSx0aGlzfXNldEZyb21NYXRyaXhQb3NpdGlvbih0KXtjb25zdCBlPXQuZWxlbWVudHM7cmV0dXJuIHRoaXMueD1lWzEyXSx0aGlzLnk9ZVsxM10sdGhpcy56PWVbMTRdLHRoaXN9c2V0RnJvbU1hdHJpeFNjYWxlKHQpe2NvbnN0IGU9dGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKHQsMCkubGVuZ3RoKCksaT10aGlzLnNldEZyb21NYXRyaXhDb2x1bW4odCwxKS5sZW5ndGgoKSxzPXRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbih0LDIpLmxlbmd0aCgpO3JldHVybiB0aGlzLng9ZSx0aGlzLnk9aSx0aGlzLno9cyx0aGlzfXNldEZyb21NYXRyaXhDb2x1bW4odCxlKXtyZXR1cm4gdGhpcy5mcm9tQXJyYXkodC5lbGVtZW50cyxlKjQpfXNldEZyb21NYXRyaXgzQ29sdW1uKHQsZSl7cmV0dXJuIHRoaXMuZnJvbUFycmF5KHQuZWxlbWVudHMsZSozKX1zZXRGcm9tRXVsZXIodCl7cmV0dXJuIHRoaXMueD10Ll94LHRoaXMueT10Ll95LHRoaXMuej10Ll96LHRoaXN9c2V0RnJvbUNvbG9yKHQpe3JldHVybiB0aGlzLng9dC5yLHRoaXMueT10LmcsdGhpcy56PXQuYix0aGlzfWVxdWFscyh0KXtyZXR1cm4gdC54PT09dGhpcy54JiZ0Lnk9PT10aGlzLnkmJnQuej09PXRoaXMuen1mcm9tQXJyYXkodCxlPTApe3JldHVybiB0aGlzLng9dFtlXSx0aGlzLnk9dFtlKzFdLHRoaXMuej10W2UrMl0sdGhpc310b0FycmF5KHQ9W10sZT0wKXtyZXR1cm4gdFtlXT10aGlzLngsdFtlKzFdPXRoaXMueSx0W2UrMl09dGhpcy56LHR9ZnJvbUJ1ZmZlckF0dHJpYnV0ZSh0LGUpe3JldHVybiB0aGlzLng9dC5nZXRYKGUpLHRoaXMueT10LmdldFkoZSksdGhpcy56PXQuZ2V0WihlKSx0aGlzfXJhbmRvbSgpe3JldHVybiB0aGlzLng9TWF0aC5yYW5kb20oKSx0aGlzLnk9TWF0aC5yYW5kb20oKSx0aGlzLno9TWF0aC5yYW5kb20oKSx0aGlzfXJhbmRvbURpcmVjdGlvbigpe2NvbnN0IHQ9TWF0aC5yYW5kb20oKSpNYXRoLlBJKjIsZT1NYXRoLnJhbmRvbSgpKjItMSxpPU1hdGguc3FydCgxLWUqZSk7cmV0dXJuIHRoaXMueD1pKk1hdGguY29zKHQpLHRoaXMueT1lLHRoaXMuej1pKk1hdGguc2luKHQpLHRoaXN9KltTeW1ib2wuaXRlcmF0b3JdKCl7eWllbGQgdGhpcy54LHlpZWxkIHRoaXMueSx5aWVsZCB0aGlzLnp9fWNvbnN0IEhlPW5ldyBBLENpPW5ldyBRdDtjbGFzcyBXe2NvbnN0cnVjdG9yKHQ9bmV3IEEoMS8wLDEvMCwxLzApLGU9bmV3IEEoLTEvMCwtMS8wLC0xLzApKXt0aGlzLmlzQm94Mz0hMCx0aGlzLm1pbj10LHRoaXMubWF4PWV9c2V0KHQsZSl7cmV0dXJuIHRoaXMubWluLmNvcHkodCksdGhpcy5tYXguY29weShlKSx0aGlzfXNldEZyb21BcnJheSh0KXt0aGlzLm1ha2VFbXB0eSgpO2ZvcihsZXQgZT0wLGk9dC5sZW5ndGg7ZTxpO2UrPTMpdGhpcy5leHBhbmRCeVBvaW50KGV0LmZyb21BcnJheSh0LGUpKTtyZXR1cm4gdGhpc31zZXRGcm9tQnVmZmVyQXR0cmlidXRlKHQpe3RoaXMubWFrZUVtcHR5KCk7Zm9yKGxldCBlPTAsaT10LmNvdW50O2U8aTtlKyspdGhpcy5leHBhbmRCeVBvaW50KGV0LmZyb21CdWZmZXJBdHRyaWJ1dGUodCxlKSk7cmV0dXJuIHRoaXN9c2V0RnJvbVBvaW50cyh0KXt0aGlzLm1ha2VFbXB0eSgpO2ZvcihsZXQgZT0wLGk9dC5sZW5ndGg7ZTxpO2UrKyl0aGlzLmV4cGFuZEJ5UG9pbnQodFtlXSk7cmV0dXJuIHRoaXN9c2V0RnJvbUNlbnRlckFuZFNpemUodCxlKXtjb25zdCBpPWV0LmNvcHkoZSkubXVsdGlwbHlTY2FsYXIoLjUpO3JldHVybiB0aGlzLm1pbi5jb3B5KHQpLnN1YihpKSx0aGlzLm1heC5jb3B5KHQpLmFkZChpKSx0aGlzfXNldEZyb21PYmplY3QodCxlPSExKXtyZXR1cm4gdGhpcy5tYWtlRW1wdHkoKSx0aGlzLmV4cGFuZEJ5T2JqZWN0KHQsZSl9Y2xvbmUoKXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpfWNvcHkodCl7cmV0dXJuIHRoaXMubWluLmNvcHkodC5taW4pLHRoaXMubWF4LmNvcHkodC5tYXgpLHRoaXN9bWFrZUVtcHR5KCl7cmV0dXJuIHRoaXMubWluLng9dGhpcy5taW4ueT10aGlzLm1pbi56PTEvMCx0aGlzLm1heC54PXRoaXMubWF4Lnk9dGhpcy5tYXguej0tMS8wLHRoaXN9aXNFbXB0eSgpe3JldHVybiB0aGlzLm1heC54PHRoaXMubWluLnh8fHRoaXMubWF4Lnk8dGhpcy5taW4ueXx8dGhpcy5tYXguejx0aGlzLm1pbi56fWdldENlbnRlcih0KXtyZXR1cm4gdGhpcy5pc0VtcHR5KCk/dC5zZXQoMCwwLDApOnQuYWRkVmVjdG9ycyh0aGlzLm1pbix0aGlzLm1heCkubXVsdGlwbHlTY2FsYXIoLjUpfWdldFNpemUodCl7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP3Quc2V0KDAsMCwwKTp0LnN1YlZlY3RvcnModGhpcy5tYXgsdGhpcy5taW4pfWV4cGFuZEJ5UG9pbnQodCl7cmV0dXJuIHRoaXMubWluLm1pbih0KSx0aGlzLm1heC5tYXgodCksdGhpc31leHBhbmRCeVZlY3Rvcih0KXtyZXR1cm4gdGhpcy5taW4uc3ViKHQpLHRoaXMubWF4LmFkZCh0KSx0aGlzfWV4cGFuZEJ5U2NhbGFyKHQpe3JldHVybiB0aGlzLm1pbi5hZGRTY2FsYXIoLXQpLHRoaXMubWF4LmFkZFNjYWxhcih0KSx0aGlzfWV4cGFuZEJ5T2JqZWN0KHQsZT0hMSl7dC51cGRhdGVXb3JsZE1hdHJpeCghMSwhMSk7Y29uc3QgaT10Lmdlb21ldHJ5O2lmKGkhPT12b2lkIDApe2NvbnN0IG49aS5nZXRBdHRyaWJ1dGUoInBvc2l0aW9uIik7aWYoZT09PSEwJiZuIT09dm9pZCAwJiZ0LmlzSW5zdGFuY2VkTWVzaCE9PSEwKWZvcihsZXQgcj0wLGE9bi5jb3VudDtyPGE7cisrKXQuaXNNZXNoPT09ITA/dC5nZXRWZXJ0ZXhQb3NpdGlvbihyLGV0KTpldC5mcm9tQnVmZmVyQXR0cmlidXRlKG4sciksZXQuYXBwbHlNYXRyaXg0KHQubWF0cml4V29ybGQpLHRoaXMuZXhwYW5kQnlQb2ludChldCk7ZWxzZSB0LmJvdW5kaW5nQm94IT09dm9pZCAwPyh0LmJvdW5kaW5nQm94PT09bnVsbCYmdC5jb21wdXRlQm91bmRpbmdCb3goKSxkZS5jb3B5KHQuYm91bmRpbmdCb3gpKTooaS5ib3VuZGluZ0JveD09PW51bGwmJmkuY29tcHV0ZUJvdW5kaW5nQm94KCksZGUuY29weShpLmJvdW5kaW5nQm94KSksZGUuYXBwbHlNYXRyaXg0KHQubWF0cml4V29ybGQpLHRoaXMudW5pb24oZGUpfWNvbnN0IHM9dC5jaGlsZHJlbjtmb3IobGV0IG49MCxyPXMubGVuZ3RoO248cjtuKyspdGhpcy5leHBhbmRCeU9iamVjdChzW25dLGUpO3JldHVybiB0aGlzfWNvbnRhaW5zUG9pbnQodCl7cmV0dXJuISh0Lng8dGhpcy5taW4ueHx8dC54PnRoaXMubWF4Lnh8fHQueTx0aGlzLm1pbi55fHx0Lnk+dGhpcy5tYXgueXx8dC56PHRoaXMubWluLnp8fHQuej50aGlzLm1heC56KX1jb250YWluc0JveCh0KXtyZXR1cm4gdGhpcy5taW4ueDw9dC5taW4ueCYmdC5tYXgueDw9dGhpcy5tYXgueCYmdGhpcy5taW4ueTw9dC5taW4ueSYmdC5tYXgueTw9dGhpcy5tYXgueSYmdGhpcy5taW4uejw9dC5taW4ueiYmdC5tYXguejw9dGhpcy5tYXguen1nZXRQYXJhbWV0ZXIodCxlKXtyZXR1cm4gZS5zZXQoKHQueC10aGlzLm1pbi54KS8odGhpcy5tYXgueC10aGlzLm1pbi54KSwodC55LXRoaXMubWluLnkpLyh0aGlzLm1heC55LXRoaXMubWluLnkpLCh0LnotdGhpcy5taW4ueikvKHRoaXMubWF4LnotdGhpcy5taW4ueikpfWludGVyc2VjdHNCb3godCl7cmV0dXJuISh0Lm1heC54PHRoaXMubWluLnh8fHQubWluLng+dGhpcy5tYXgueHx8dC5tYXgueTx0aGlzLm1pbi55fHx0Lm1pbi55PnRoaXMubWF4Lnl8fHQubWF4Lno8dGhpcy5taW4uenx8dC5taW4uej50aGlzLm1heC56KX1pbnRlcnNlY3RzU3BoZXJlKHQpe3JldHVybiB0aGlzLmNsYW1wUG9pbnQodC5jZW50ZXIsZXQpLGV0LmRpc3RhbmNlVG9TcXVhcmVkKHQuY2VudGVyKTw9dC5yYWRpdXMqdC5yYWRpdXN9aW50ZXJzZWN0c1BsYW5lKHQpe2xldCBlLGk7cmV0dXJuIHQubm9ybWFsLng+MD8oZT10Lm5vcm1hbC54KnRoaXMubWluLngsaT10Lm5vcm1hbC54KnRoaXMubWF4LngpOihlPXQubm9ybWFsLngqdGhpcy5tYXgueCxpPXQubm9ybWFsLngqdGhpcy5taW4ueCksdC5ub3JtYWwueT4wPyhlKz10Lm5vcm1hbC55KnRoaXMubWluLnksaSs9dC5ub3JtYWwueSp0aGlzLm1heC55KTooZSs9dC5ub3JtYWwueSp0aGlzLm1heC55LGkrPXQubm9ybWFsLnkqdGhpcy5taW4ueSksdC5ub3JtYWwuej4wPyhlKz10Lm5vcm1hbC56KnRoaXMubWluLnosaSs9dC5ub3JtYWwueip0aGlzLm1heC56KTooZSs9dC5ub3JtYWwueip0aGlzLm1heC56LGkrPXQubm9ybWFsLnoqdGhpcy5taW4ueiksZTw9LXQuY29uc3RhbnQmJmk+PS10LmNvbnN0YW50fWludGVyc2VjdHNUcmlhbmdsZSh0KXtpZih0aGlzLmlzRW1wdHkoKSlyZXR1cm4hMTt0aGlzLmdldENlbnRlcihLdCkscGUuc3ViVmVjdG9ycyh0aGlzLm1heCxLdCksRnQuc3ViVmVjdG9ycyh0LmEsS3QpLFV0LnN1YlZlY3RvcnModC5iLEt0KSxSdC5zdWJWZWN0b3JzKHQuYyxLdCksYnQuc3ViVmVjdG9ycyhVdCxGdCksd3Quc3ViVmVjdG9ycyhSdCxVdCksUHQuc3ViVmVjdG9ycyhGdCxSdCk7bGV0IGU9WzAsLWJ0LnosYnQueSwwLC13dC56LHd0LnksMCwtUHQueixQdC55LGJ0LnosMCwtYnQueCx3dC56LDAsLXd0LngsUHQueiwwLC1QdC54LC1idC55LGJ0LngsMCwtd3QueSx3dC54LDAsLVB0LnksUHQueCwwXTtyZXR1cm4hJGUoZSxGdCxVdCxSdCxwZSl8fChlPVsxLDAsMCwwLDEsMCwwLDAsMV0sISRlKGUsRnQsVXQsUnQscGUpKT8hMToobWUuY3Jvc3NWZWN0b3JzKGJ0LHd0KSxlPVttZS54LG1lLnksbWUuel0sJGUoZSxGdCxVdCxSdCxwZSkpfWNsYW1wUG9pbnQodCxlKXtyZXR1cm4gZS5jb3B5KHQpLmNsYW1wKHRoaXMubWluLHRoaXMubWF4KX1kaXN0YW5jZVRvUG9pbnQodCl7cmV0dXJuIHRoaXMuY2xhbXBQb2ludCh0LGV0KS5kaXN0YW5jZVRvKHQpfWdldEJvdW5kaW5nU3BoZXJlKHQpe3JldHVybiB0aGlzLmlzRW1wdHkoKT90Lm1ha2VFbXB0eSgpOih0aGlzLmdldENlbnRlcih0LmNlbnRlciksdC5yYWRpdXM9dGhpcy5nZXRTaXplKGV0KS5sZW5ndGgoKSouNSksdH1pbnRlcnNlY3QodCl7cmV0dXJuIHRoaXMubWluLm1heCh0Lm1pbiksdGhpcy5tYXgubWluKHQubWF4KSx0aGlzLmlzRW1wdHkoKSYmdGhpcy5tYWtlRW1wdHkoKSx0aGlzfXVuaW9uKHQpe3JldHVybiB0aGlzLm1pbi5taW4odC5taW4pLHRoaXMubWF4Lm1heCh0Lm1heCksdGhpc31hcHBseU1hdHJpeDQodCl7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP3RoaXM6KHV0WzBdLnNldCh0aGlzLm1pbi54LHRoaXMubWluLnksdGhpcy5taW4ueikuYXBwbHlNYXRyaXg0KHQpLHV0WzFdLnNldCh0aGlzLm1pbi54LHRoaXMubWluLnksdGhpcy5tYXgueikuYXBwbHlNYXRyaXg0KHQpLHV0WzJdLnNldCh0aGlzLm1pbi54LHRoaXMubWF4LnksdGhpcy5taW4ueikuYXBwbHlNYXRyaXg0KHQpLHV0WzNdLnNldCh0aGlzLm1pbi54LHRoaXMubWF4LnksdGhpcy5tYXgueikuYXBwbHlNYXRyaXg0KHQpLHV0WzRdLnNldCh0aGlzLm1heC54LHRoaXMubWluLnksdGhpcy5taW4ueikuYXBwbHlNYXRyaXg0KHQpLHV0WzVdLnNldCh0aGlzLm1heC54LHRoaXMubWluLnksdGhpcy5tYXgueikuYXBwbHlNYXRyaXg0KHQpLHV0WzZdLnNldCh0aGlzLm1heC54LHRoaXMubWF4LnksdGhpcy5taW4ueikuYXBwbHlNYXRyaXg0KHQpLHV0WzddLnNldCh0aGlzLm1heC54LHRoaXMubWF4LnksdGhpcy5tYXgueikuYXBwbHlNYXRyaXg0KHQpLHRoaXMuc2V0RnJvbVBvaW50cyh1dCksdGhpcyl9dHJhbnNsYXRlKHQpe3JldHVybiB0aGlzLm1pbi5hZGQodCksdGhpcy5tYXguYWRkKHQpLHRoaXN9ZXF1YWxzKHQpe3JldHVybiB0Lm1pbi5lcXVhbHModGhpcy5taW4pJiZ0Lm1heC5lcXVhbHModGhpcy5tYXgpfX1jb25zdCB1dD1bbmV3IEEsbmV3IEEsbmV3IEEsbmV3IEEsbmV3IEEsbmV3IEEsbmV3IEEsbmV3IEFdLGV0PW5ldyBBLGRlPW5ldyBXLEZ0PW5ldyBBLFV0PW5ldyBBLFJ0PW5ldyBBLGJ0PW5ldyBBLHd0PW5ldyBBLFB0PW5ldyBBLEt0PW5ldyBBLHBlPW5ldyBBLG1lPW5ldyBBLEN0PW5ldyBBO2Z1bmN0aW9uICRlKHUsdCxlLGkscyl7Zm9yKGxldCBuPTAscj11Lmxlbmd0aC0zO248PXI7bis9Myl7Q3QuZnJvbUFycmF5KHUsbik7Y29uc3QgYT1zLngqTWF0aC5hYnMoQ3QueCkrcy55Kk1hdGguYWJzKEN0LnkpK3MueipNYXRoLmFicyhDdC56KSxvPXQuZG90KEN0KSxoPWUuZG90KEN0KSxjPWkuZG90KEN0KTtpZihNYXRoLm1heCgtTWF0aC5tYXgobyxoLGMpLE1hdGgubWluKG8saCxjKSk+YSlyZXR1cm4hMX1yZXR1cm4hMH1jb25zdCBscz1uZXcgVyx0ZT1uZXcgQSxqZT1uZXcgQTtjbGFzcyBFaXtjb25zdHJ1Y3Rvcih0PW5ldyBBLGU9LTEpe3RoaXMuaXNTcGhlcmU9ITAsdGhpcy5jZW50ZXI9dCx0aGlzLnJhZGl1cz1lfXNldCh0LGUpe3JldHVybiB0aGlzLmNlbnRlci5jb3B5KHQpLHRoaXMucmFkaXVzPWUsdGhpc31zZXRGcm9tUG9pbnRzKHQsZSl7Y29uc3QgaT10aGlzLmNlbnRlcjtlIT09dm9pZCAwP2kuY29weShlKTpscy5zZXRGcm9tUG9pbnRzKHQpLmdldENlbnRlcihpKTtsZXQgcz0wO2ZvcihsZXQgbj0wLHI9dC5sZW5ndGg7bjxyO24rKylzPU1hdGgubWF4KHMsaS5kaXN0YW5jZVRvU3F1YXJlZCh0W25dKSk7cmV0dXJuIHRoaXMucmFkaXVzPU1hdGguc3FydChzKSx0aGlzfWNvcHkodCl7cmV0dXJuIHRoaXMuY2VudGVyLmNvcHkodC5jZW50ZXIpLHRoaXMucmFkaXVzPXQucmFkaXVzLHRoaXN9aXNFbXB0eSgpe3JldHVybiB0aGlzLnJhZGl1czwwfW1ha2VFbXB0eSgpe3JldHVybiB0aGlzLmNlbnRlci5zZXQoMCwwLDApLHRoaXMucmFkaXVzPS0xLHRoaXN9Y29udGFpbnNQb2ludCh0KXtyZXR1cm4gdC5kaXN0YW5jZVRvU3F1YXJlZCh0aGlzLmNlbnRlcik8PXRoaXMucmFkaXVzKnRoaXMucmFkaXVzfWRpc3RhbmNlVG9Qb2ludCh0KXtyZXR1cm4gdC5kaXN0YW5jZVRvKHRoaXMuY2VudGVyKS10aGlzLnJhZGl1c31pbnRlcnNlY3RzU3BoZXJlKHQpe2NvbnN0IGU9dGhpcy5yYWRpdXMrdC5yYWRpdXM7cmV0dXJuIHQuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKHRoaXMuY2VudGVyKTw9ZSplfWludGVyc2VjdHNCb3godCl7cmV0dXJuIHQuaW50ZXJzZWN0c1NwaGVyZSh0aGlzKX1pbnRlcnNlY3RzUGxhbmUodCl7cmV0dXJuIE1hdGguYWJzKHQuZGlzdGFuY2VUb1BvaW50KHRoaXMuY2VudGVyKSk8PXRoaXMucmFkaXVzfWNsYW1wUG9pbnQodCxlKXtjb25zdCBpPXRoaXMuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKHQpO3JldHVybiBlLmNvcHkodCksaT50aGlzLnJhZGl1cyp0aGlzLnJhZGl1cyYmKGUuc3ViKHRoaXMuY2VudGVyKS5ub3JtYWxpemUoKSxlLm11bHRpcGx5U2NhbGFyKHRoaXMucmFkaXVzKS5hZGQodGhpcy5jZW50ZXIpKSxlfWdldEJvdW5kaW5nQm94KHQpe3JldHVybiB0aGlzLmlzRW1wdHkoKT8odC5tYWtlRW1wdHkoKSx0KToodC5zZXQodGhpcy5jZW50ZXIsdGhpcy5jZW50ZXIpLHQuZXhwYW5kQnlTY2FsYXIodGhpcy5yYWRpdXMpLHQpfWFwcGx5TWF0cml4NCh0KXtyZXR1cm4gdGhpcy5jZW50ZXIuYXBwbHlNYXRyaXg0KHQpLHRoaXMucmFkaXVzPXRoaXMucmFkaXVzKnQuZ2V0TWF4U2NhbGVPbkF4aXMoKSx0aGlzfXRyYW5zbGF0ZSh0KXtyZXR1cm4gdGhpcy5jZW50ZXIuYWRkKHQpLHRoaXN9ZXhwYW5kQnlQb2ludCh0KXtpZih0aGlzLmlzRW1wdHkoKSlyZXR1cm4gdGhpcy5jZW50ZXIuY29weSh0KSx0aGlzLnJhZGl1cz0wLHRoaXM7dGUuc3ViVmVjdG9ycyh0LHRoaXMuY2VudGVyKTtjb25zdCBlPXRlLmxlbmd0aFNxKCk7aWYoZT50aGlzLnJhZGl1cyp0aGlzLnJhZGl1cyl7Y29uc3QgaT1NYXRoLnNxcnQoZSkscz0oaS10aGlzLnJhZGl1cykqLjU7dGhpcy5jZW50ZXIuYWRkU2NhbGVkVmVjdG9yKHRlLHMvaSksdGhpcy5yYWRpdXMrPXN9cmV0dXJuIHRoaXN9dW5pb24odCl7cmV0dXJuIHQuaXNFbXB0eSgpP3RoaXM6dGhpcy5pc0VtcHR5KCk/KHRoaXMuY29weSh0KSx0aGlzKToodGhpcy5jZW50ZXIuZXF1YWxzKHQuY2VudGVyKT09PSEwP3RoaXMucmFkaXVzPU1hdGgubWF4KHRoaXMucmFkaXVzLHQucmFkaXVzKTooamUuc3ViVmVjdG9ycyh0LmNlbnRlcix0aGlzLmNlbnRlcikuc2V0TGVuZ3RoKHQucmFkaXVzKSx0aGlzLmV4cGFuZEJ5UG9pbnQodGUuY29weSh0LmNlbnRlcikuYWRkKGplKSksdGhpcy5leHBhbmRCeVBvaW50KHRlLmNvcHkodC5jZW50ZXIpLnN1YihqZSkpKSx0aGlzKX1lcXVhbHModCl7cmV0dXJuIHQuY2VudGVyLmVxdWFscyh0aGlzLmNlbnRlcikmJnQucmFkaXVzPT09dGhpcy5yYWRpdXN9Y2xvbmUoKXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpfX1jbGFzcyBOe2NvbnN0cnVjdG9yKHQsZSxpLHMsbixyLGEsbyxoLGMsZixsLGQscCx5LHgpe04ucHJvdG90eXBlLmlzTWF0cml4ND0hMCx0aGlzLmVsZW1lbnRzPVsxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxXSx0IT09dm9pZCAwJiZ0aGlzLnNldCh0LGUsaSxzLG4scixhLG8saCxjLGYsbCxkLHAseSx4KX1zZXQodCxlLGkscyxuLHIsYSxvLGgsYyxmLGwsZCxwLHkseCl7Y29uc3QgbT10aGlzLmVsZW1lbnRzO3JldHVybiBtWzBdPXQsbVs0XT1lLG1bOF09aSxtWzEyXT1zLG1bMV09bixtWzVdPXIsbVs5XT1hLG1bMTNdPW8sbVsyXT1oLG1bNl09YyxtWzEwXT1mLG1bMTRdPWwsbVszXT1kLG1bN109cCxtWzExXT15LG1bMTVdPXgsdGhpc31pZGVudGl0eSgpe3JldHVybiB0aGlzLnNldCgxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxKSx0aGlzfWNsb25lKCl7cmV0dXJuIG5ldyBOKCkuZnJvbUFycmF5KHRoaXMuZWxlbWVudHMpfWNvcHkodCl7Y29uc3QgZT10aGlzLmVsZW1lbnRzLGk9dC5lbGVtZW50cztyZXR1cm4gZVswXT1pWzBdLGVbMV09aVsxXSxlWzJdPWlbMl0sZVszXT1pWzNdLGVbNF09aVs0XSxlWzVdPWlbNV0sZVs2XT1pWzZdLGVbN109aVs3XSxlWzhdPWlbOF0sZVs5XT1pWzldLGVbMTBdPWlbMTBdLGVbMTFdPWlbMTFdLGVbMTJdPWlbMTJdLGVbMTNdPWlbMTNdLGVbMTRdPWlbMTRdLGVbMTVdPWlbMTVdLHRoaXN9Y29weVBvc2l0aW9uKHQpe2NvbnN0IGU9dGhpcy5lbGVtZW50cyxpPXQuZWxlbWVudHM7cmV0dXJuIGVbMTJdPWlbMTJdLGVbMTNdPWlbMTNdLGVbMTRdPWlbMTRdLHRoaXN9c2V0RnJvbU1hdHJpeDModCl7Y29uc3QgZT10LmVsZW1lbnRzO3JldHVybiB0aGlzLnNldChlWzBdLGVbM10sZVs2XSwwLGVbMV0sZVs0XSxlWzddLDAsZVsyXSxlWzVdLGVbOF0sMCwwLDAsMCwxKSx0aGlzfWV4dHJhY3RCYXNpcyh0LGUsaSl7cmV0dXJuIHQuc2V0RnJvbU1hdHJpeENvbHVtbih0aGlzLDApLGUuc2V0RnJvbU1hdHJpeENvbHVtbih0aGlzLDEpLGkuc2V0RnJvbU1hdHJpeENvbHVtbih0aGlzLDIpLHRoaXN9bWFrZUJhc2lzKHQsZSxpKXtyZXR1cm4gdGhpcy5zZXQodC54LGUueCxpLngsMCx0LnksZS55LGkueSwwLHQueixlLnosaS56LDAsMCwwLDAsMSksdGhpc31leHRyYWN0Um90YXRpb24odCl7Y29uc3QgZT10aGlzLmVsZW1lbnRzLGk9dC5lbGVtZW50cyxzPTEva3Quc2V0RnJvbU1hdHJpeENvbHVtbih0LDApLmxlbmd0aCgpLG49MS9rdC5zZXRGcm9tTWF0cml4Q29sdW1uKHQsMSkubGVuZ3RoKCkscj0xL2t0LnNldEZyb21NYXRyaXhDb2x1bW4odCwyKS5sZW5ndGgoKTtyZXR1cm4gZVswXT1pWzBdKnMsZVsxXT1pWzFdKnMsZVsyXT1pWzJdKnMsZVszXT0wLGVbNF09aVs0XSpuLGVbNV09aVs1XSpuLGVbNl09aVs2XSpuLGVbN109MCxlWzhdPWlbOF0qcixlWzldPWlbOV0qcixlWzEwXT1pWzEwXSpyLGVbMTFdPTAsZVsxMl09MCxlWzEzXT0wLGVbMTRdPTAsZVsxNV09MSx0aGlzfW1ha2VSb3RhdGlvbkZyb21FdWxlcih0KXtjb25zdCBlPXRoaXMuZWxlbWVudHMsaT10Lngscz10Lnksbj10Lnoscj1NYXRoLmNvcyhpKSxhPU1hdGguc2luKGkpLG89TWF0aC5jb3MocyksaD1NYXRoLnNpbihzKSxjPU1hdGguY29zKG4pLGY9TWF0aC5zaW4obik7aWYodC5vcmRlcj09PSJYWVoiKXtjb25zdCBsPXIqYyxkPXIqZixwPWEqYyx5PWEqZjtlWzBdPW8qYyxlWzRdPS1vKmYsZVs4XT1oLGVbMV09ZCtwKmgsZVs1XT1sLXkqaCxlWzldPS1hKm8sZVsyXT15LWwqaCxlWzZdPXArZCpoLGVbMTBdPXIqb31lbHNlIGlmKHQub3JkZXI9PT0iWVhaIil7Y29uc3QgbD1vKmMsZD1vKmYscD1oKmMseT1oKmY7ZVswXT1sK3kqYSxlWzRdPXAqYS1kLGVbOF09cipoLGVbMV09cipmLGVbNV09cipjLGVbOV09LWEsZVsyXT1kKmEtcCxlWzZdPXkrbCphLGVbMTBdPXIqb31lbHNlIGlmKHQub3JkZXI9PT0iWlhZIil7Y29uc3QgbD1vKmMsZD1vKmYscD1oKmMseT1oKmY7ZVswXT1sLXkqYSxlWzRdPS1yKmYsZVs4XT1wK2QqYSxlWzFdPWQrcCphLGVbNV09cipjLGVbOV09eS1sKmEsZVsyXT0tcipoLGVbNl09YSxlWzEwXT1yKm99ZWxzZSBpZih0Lm9yZGVyPT09IlpZWCIpe2NvbnN0IGw9cipjLGQ9cipmLHA9YSpjLHk9YSpmO2VbMF09bypjLGVbNF09cCpoLWQsZVs4XT1sKmgreSxlWzFdPW8qZixlWzVdPXkqaCtsLGVbOV09ZCpoLXAsZVsyXT0taCxlWzZdPWEqbyxlWzEwXT1yKm99ZWxzZSBpZih0Lm9yZGVyPT09IllaWCIpe2NvbnN0IGw9cipvLGQ9cipoLHA9YSpvLHk9YSpoO2VbMF09bypjLGVbNF09eS1sKmYsZVs4XT1wKmYrZCxlWzFdPWYsZVs1XT1yKmMsZVs5XT0tYSpjLGVbMl09LWgqYyxlWzZdPWQqZitwLGVbMTBdPWwteSpmfWVsc2UgaWYodC5vcmRlcj09PSJYWlkiKXtjb25zdCBsPXIqbyxkPXIqaCxwPWEqbyx5PWEqaDtlWzBdPW8qYyxlWzRdPS1mLGVbOF09aCpjLGVbMV09bCpmK3ksZVs1XT1yKmMsZVs5XT1kKmYtcCxlWzJdPXAqZi1kLGVbNl09YSpjLGVbMTBdPXkqZitsfXJldHVybiBlWzNdPTAsZVs3XT0wLGVbMTFdPTAsZVsxMl09MCxlWzEzXT0wLGVbMTRdPTAsZVsxNV09MSx0aGlzfW1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKHQpe3JldHVybiB0aGlzLmNvbXBvc2UodXMsdCxmcyl9bG9va0F0KHQsZSxpKXtjb25zdCBzPXRoaXMuZWxlbWVudHM7cmV0dXJuIFouc3ViVmVjdG9ycyh0LGUpLFoubGVuZ3RoU3EoKT09PTAmJihaLno9MSksWi5ub3JtYWxpemUoKSxfdC5jcm9zc1ZlY3RvcnMoaSxaKSxfdC5sZW5ndGhTcSgpPT09MCYmKE1hdGguYWJzKGkueik9PT0xP1oueCs9MWUtNDpaLnorPTFlLTQsWi5ub3JtYWxpemUoKSxfdC5jcm9zc1ZlY3RvcnMoaSxaKSksX3Qubm9ybWFsaXplKCkseWUuY3Jvc3NWZWN0b3JzKFosX3QpLHNbMF09X3QueCxzWzRdPXllLngsc1s4XT1aLngsc1sxXT1fdC55LHNbNV09eWUueSxzWzldPVoueSxzWzJdPV90Lnosc1s2XT15ZS56LHNbMTBdPVoueix0aGlzfW11bHRpcGx5KHQpe3JldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXModGhpcyx0KX1wcmVtdWx0aXBseSh0KXtyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKHQsdGhpcyl9bXVsdGlwbHlNYXRyaWNlcyh0LGUpe2NvbnN0IGk9dC5lbGVtZW50cyxzPWUuZWxlbWVudHMsbj10aGlzLmVsZW1lbnRzLHI9aVswXSxhPWlbNF0sbz1pWzhdLGg9aVsxMl0sYz1pWzFdLGY9aVs1XSxsPWlbOV0sZD1pWzEzXSxwPWlbMl0seT1pWzZdLHg9aVsxMF0sbT1pWzE0XSxnPWlbM10sdz1pWzddLE09aVsxMV0sYj1pWzE1XSx6PXNbMF0sXz1zWzRdLFM9c1s4XSxCPXNbMTJdLFQ9c1sxXSxDPXNbNV0sUD1zWzldLEU9c1sxM10sRj1zWzJdLFU9c1s2XSxSPXNbMTBdLGo9c1sxNF0saHQ9c1szXSxsdD1zWzddLHFlPXNbMTFdLHZlPXNbMTVdO3JldHVybiBuWzBdPXIqeithKlQrbypGK2gqaHQsbls0XT1yKl8rYSpDK28qVStoKmx0LG5bOF09cipTK2EqUCtvKlIraCpxZSxuWzEyXT1yKkIrYSpFK28qaitoKnZlLG5bMV09Yyp6K2YqVCtsKkYrZCpodCxuWzVdPWMqXytmKkMrbCpVK2QqbHQsbls5XT1jKlMrZipQK2wqUitkKnFlLG5bMTNdPWMqQitmKkUrbCpqK2QqdmUsblsyXT1wKnoreSpUK3gqRittKmh0LG5bNl09cCpfK3kqQyt4KlUrbSpsdCxuWzEwXT1wKlMreSpQK3gqUittKnFlLG5bMTRdPXAqQit5KkUreCpqK20qdmUsblszXT1nKnordypUK00qRitiKmh0LG5bN109ZypfK3cqQytNKlUrYipsdCxuWzExXT1nKlMrdypQK00qUitiKnFlLG5bMTVdPWcqQit3KkUrTSpqK2IqdmUsdGhpc31tdWx0aXBseVNjYWxhcih0KXtjb25zdCBlPXRoaXMuZWxlbWVudHM7cmV0dXJuIGVbMF0qPXQsZVs0XSo9dCxlWzhdKj10LGVbMTJdKj10LGVbMV0qPXQsZVs1XSo9dCxlWzldKj10LGVbMTNdKj10LGVbMl0qPXQsZVs2XSo9dCxlWzEwXSo9dCxlWzE0XSo9dCxlWzNdKj10LGVbN10qPXQsZVsxMV0qPXQsZVsxNV0qPXQsdGhpc31kZXRlcm1pbmFudCgpe2NvbnN0IHQ9dGhpcy5lbGVtZW50cyxlPXRbMF0saT10WzRdLHM9dFs4XSxuPXRbMTJdLHI9dFsxXSxhPXRbNV0sbz10WzldLGg9dFsxM10sYz10WzJdLGY9dFs2XSxsPXRbMTBdLGQ9dFsxNF0scD10WzNdLHk9dFs3XSx4PXRbMTFdLG09dFsxNV07cmV0dXJuIHAqKCtuKm8qZi1zKmgqZi1uKmEqbCtpKmgqbCtzKmEqZC1pKm8qZCkreSooK2UqbypkLWUqaCpsK24qcipsLXMqcipkK3MqaCpjLW4qbypjKSt4KigrZSpoKmYtZSphKmQtbipyKmYraSpyKmQrbiphKmMtaSpoKmMpK20qKC1zKmEqYy1lKm8qZitlKmEqbCtzKnIqZi1pKnIqbCtpKm8qYyl9dHJhbnNwb3NlKCl7Y29uc3QgdD10aGlzLmVsZW1lbnRzO2xldCBlO3JldHVybiBlPXRbMV0sdFsxXT10WzRdLHRbNF09ZSxlPXRbMl0sdFsyXT10WzhdLHRbOF09ZSxlPXRbNl0sdFs2XT10WzldLHRbOV09ZSxlPXRbM10sdFszXT10WzEyXSx0WzEyXT1lLGU9dFs3XSx0WzddPXRbMTNdLHRbMTNdPWUsZT10WzExXSx0WzExXT10WzE0XSx0WzE0XT1lLHRoaXN9c2V0UG9zaXRpb24odCxlLGkpe2NvbnN0IHM9dGhpcy5lbGVtZW50cztyZXR1cm4gdC5pc1ZlY3RvcjM/KHNbMTJdPXQueCxzWzEzXT10Lnksc1sxNF09dC56KTooc1sxMl09dCxzWzEzXT1lLHNbMTRdPWkpLHRoaXN9aW52ZXJ0KCl7Y29uc3QgdD10aGlzLmVsZW1lbnRzLGU9dFswXSxpPXRbMV0scz10WzJdLG49dFszXSxyPXRbNF0sYT10WzVdLG89dFs2XSxoPXRbN10sYz10WzhdLGY9dFs5XSxsPXRbMTBdLGQ9dFsxMV0scD10WzEyXSx5PXRbMTNdLHg9dFsxNF0sbT10WzE1XSxnPWYqeCpoLXkqbCpoK3kqbypkLWEqeCpkLWYqbyptK2EqbCptLHc9cCpsKmgtYyp4KmgtcCpvKmQrcip4KmQrYypvKm0tcipsKm0sTT1jKnkqaC1wKmYqaCtwKmEqZC1yKnkqZC1jKmEqbStyKmYqbSxiPXAqZipvLWMqeSpvLXAqYSpsK3IqeSpsK2MqYSp4LXIqZip4LHo9ZSpnK2kqdytzKk0rbipiO2lmKHo9PT0wKXJldHVybiB0aGlzLnNldCgwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwKTtjb25zdCBfPTEvejtyZXR1cm4gdFswXT1nKl8sdFsxXT0oeSpsKm4tZip4Km4teSpzKmQraSp4KmQrZipzKm0taSpsKm0pKl8sdFsyXT0oYSp4Km4teSpvKm4reSpzKmgtaSp4KmgtYSpzKm0raSpvKm0pKl8sdFszXT0oZipvKm4tYSpsKm4tZipzKmgraSpsKmgrYSpzKmQtaSpvKmQpKl8sdFs0XT13Kl8sdFs1XT0oYyp4Km4tcCpsKm4rcCpzKmQtZSp4KmQtYypzKm0rZSpsKm0pKl8sdFs2XT0ocCpvKm4tcip4Km4tcCpzKmgrZSp4KmgrcipzKm0tZSpvKm0pKl8sdFs3XT0ocipsKm4tYypvKm4rYypzKmgtZSpsKmgtcipzKmQrZSpvKmQpKl8sdFs4XT1NKl8sdFs5XT0ocCpmKm4tYyp5Km4tcCppKmQrZSp5KmQrYyppKm0tZSpmKm0pKl8sdFsxMF09KHIqeSpuLXAqYSpuK3AqaSpoLWUqeSpoLXIqaSptK2UqYSptKSpfLHRbMTFdPShjKmEqbi1yKmYqbi1jKmkqaCtlKmYqaCtyKmkqZC1lKmEqZCkqXyx0WzEyXT1iKl8sdFsxM109KGMqeSpzLXAqZipzK3AqaSpsLWUqeSpsLWMqaSp4K2UqZip4KSpfLHRbMTRdPShwKmEqcy1yKnkqcy1wKmkqbytlKnkqbytyKmkqeC1lKmEqeCkqXyx0WzE1XT0ocipmKnMtYyphKnMrYyppKm8tZSpmKm8tcippKmwrZSphKmwpKl8sdGhpc31zY2FsZSh0KXtjb25zdCBlPXRoaXMuZWxlbWVudHMsaT10Lngscz10Lnksbj10Lno7cmV0dXJuIGVbMF0qPWksZVs0XSo9cyxlWzhdKj1uLGVbMV0qPWksZVs1XSo9cyxlWzldKj1uLGVbMl0qPWksZVs2XSo9cyxlWzEwXSo9bixlWzNdKj1pLGVbN10qPXMsZVsxMV0qPW4sdGhpc31nZXRNYXhTY2FsZU9uQXhpcygpe2NvbnN0IHQ9dGhpcy5lbGVtZW50cyxlPXRbMF0qdFswXSt0WzFdKnRbMV0rdFsyXSp0WzJdLGk9dFs0XSp0WzRdK3RbNV0qdFs1XSt0WzZdKnRbNl0scz10WzhdKnRbOF0rdFs5XSp0WzldK3RbMTBdKnRbMTBdO3JldHVybiBNYXRoLnNxcnQoTWF0aC5tYXgoZSxpLHMpKX1tYWtlVHJhbnNsYXRpb24odCxlLGkpe3JldHVybiB0LmlzVmVjdG9yMz90aGlzLnNldCgxLDAsMCx0LngsMCwxLDAsdC55LDAsMCwxLHQueiwwLDAsMCwxKTp0aGlzLnNldCgxLDAsMCx0LDAsMSwwLGUsMCwwLDEsaSwwLDAsMCwxKSx0aGlzfW1ha2VSb3RhdGlvblgodCl7Y29uc3QgZT1NYXRoLmNvcyh0KSxpPU1hdGguc2luKHQpO3JldHVybiB0aGlzLnNldCgxLDAsMCwwLDAsZSwtaSwwLDAsaSxlLDAsMCwwLDAsMSksdGhpc31tYWtlUm90YXRpb25ZKHQpe2NvbnN0IGU9TWF0aC5jb3ModCksaT1NYXRoLnNpbih0KTtyZXR1cm4gdGhpcy5zZXQoZSwwLGksMCwwLDEsMCwwLC1pLDAsZSwwLDAsMCwwLDEpLHRoaXN9bWFrZVJvdGF0aW9uWih0KXtjb25zdCBlPU1hdGguY29zKHQpLGk9TWF0aC5zaW4odCk7cmV0dXJuIHRoaXMuc2V0KGUsLWksMCwwLGksZSwwLDAsMCwwLDEsMCwwLDAsMCwxKSx0aGlzfW1ha2VSb3RhdGlvbkF4aXModCxlKXtjb25zdCBpPU1hdGguY29zKGUpLHM9TWF0aC5zaW4oZSksbj0xLWkscj10LngsYT10Lnksbz10LnosaD1uKnIsYz1uKmE7cmV0dXJuIHRoaXMuc2V0KGgqcitpLGgqYS1zKm8saCpvK3MqYSwwLGgqYStzKm8sYyphK2ksYypvLXMqciwwLGgqby1zKmEsYypvK3MqcixuKm8qbytpLDAsMCwwLDAsMSksdGhpc31tYWtlU2NhbGUodCxlLGkpe3JldHVybiB0aGlzLnNldCh0LDAsMCwwLDAsZSwwLDAsMCwwLGksMCwwLDAsMCwxKSx0aGlzfW1ha2VTaGVhcih0LGUsaSxzLG4scil7cmV0dXJuIHRoaXMuc2V0KDEsaSxuLDAsdCwxLHIsMCxlLHMsMSwwLDAsMCwwLDEpLHRoaXN9Y29tcG9zZSh0LGUsaSl7Y29uc3Qgcz10aGlzLmVsZW1lbnRzLG49ZS5feCxyPWUuX3ksYT1lLl96LG89ZS5fdyxoPW4rbixjPXIrcixmPWErYSxsPW4qaCxkPW4qYyxwPW4qZix5PXIqYyx4PXIqZixtPWEqZixnPW8qaCx3PW8qYyxNPW8qZixiPWkueCx6PWkueSxfPWkuejtyZXR1cm4gc1swXT0oMS0oeSttKSkqYixzWzFdPShkK00pKmIsc1syXT0ocC13KSpiLHNbM109MCxzWzRdPShkLU0pKnosc1s1XT0oMS0obCttKSkqeixzWzZdPSh4K2cpKnosc1s3XT0wLHNbOF09KHArdykqXyxzWzldPSh4LWcpKl8sc1sxMF09KDEtKGwreSkpKl8sc1sxMV09MCxzWzEyXT10Lngsc1sxM109dC55LHNbMTRdPXQueixzWzE1XT0xLHRoaXN9ZGVjb21wb3NlKHQsZSxpKXtjb25zdCBzPXRoaXMuZWxlbWVudHM7bGV0IG49a3Quc2V0KHNbMF0sc1sxXSxzWzJdKS5sZW5ndGgoKTtjb25zdCByPWt0LnNldChzWzRdLHNbNV0sc1s2XSkubGVuZ3RoKCksYT1rdC5zZXQoc1s4XSxzWzldLHNbMTBdKS5sZW5ndGgoKTt0aGlzLmRldGVybWluYW50KCk8MCYmKG49LW4pLHQueD1zWzEyXSx0Lnk9c1sxM10sdC56PXNbMTRdLGl0LmNvcHkodGhpcyk7Y29uc3QgaD0xL24sYz0xL3IsZj0xL2E7cmV0dXJuIGl0LmVsZW1lbnRzWzBdKj1oLGl0LmVsZW1lbnRzWzFdKj1oLGl0LmVsZW1lbnRzWzJdKj1oLGl0LmVsZW1lbnRzWzRdKj1jLGl0LmVsZW1lbnRzWzVdKj1jLGl0LmVsZW1lbnRzWzZdKj1jLGl0LmVsZW1lbnRzWzhdKj1mLGl0LmVsZW1lbnRzWzldKj1mLGl0LmVsZW1lbnRzWzEwXSo9ZixlLnNldEZyb21Sb3RhdGlvbk1hdHJpeChpdCksaS54PW4saS55PXIsaS56PWEsdGhpc31tYWtlUGVyc3BlY3RpdmUodCxlLGkscyxuLHIsYT0yZTMpe2NvbnN0IG89dGhpcy5lbGVtZW50cyxoPTIqbi8oZS10KSxjPTIqbi8oaS1zKSxmPShlK3QpLyhlLXQpLGw9KGkrcykvKGktcyk7bGV0IGQscDtpZihhPT09MmUzKWQ9LShyK24pLyhyLW4pLHA9LTIqcipuLyhyLW4pO2Vsc2UgaWYoYT09PTIwMDEpZD0tci8oci1uKSxwPS1yKm4vKHItbik7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoIlRIUkVFLk1hdHJpeDQubWFrZVBlcnNwZWN0aXZlKCk6IEludmFsaWQgY29vcmRpbmF0ZSBzeXN0ZW06ICIrYSk7cmV0dXJuIG9bMF09aCxvWzRdPTAsb1s4XT1mLG9bMTJdPTAsb1sxXT0wLG9bNV09YyxvWzldPWwsb1sxM109MCxvWzJdPTAsb1s2XT0wLG9bMTBdPWQsb1sxNF09cCxvWzNdPTAsb1s3XT0wLG9bMTFdPS0xLG9bMTVdPTAsdGhpc31tYWtlT3J0aG9ncmFwaGljKHQsZSxpLHMsbixyLGE9MmUzKXtjb25zdCBvPXRoaXMuZWxlbWVudHMsaD0xLyhlLXQpLGM9MS8oaS1zKSxmPTEvKHItbiksbD0oZSt0KSpoLGQ9KGkrcykqYztsZXQgcCx5O2lmKGE9PT0yZTMpcD0ocituKSpmLHk9LTIqZjtlbHNlIGlmKGE9PT0yMDAxKXA9bipmLHk9LTEqZjtlbHNlIHRocm93IG5ldyBFcnJvcigiVEhSRUUuTWF0cml4NC5tYWtlT3J0aG9ncmFwaGljKCk6IEludmFsaWQgY29vcmRpbmF0ZSBzeXN0ZW06ICIrYSk7cmV0dXJuIG9bMF09MipoLG9bNF09MCxvWzhdPTAsb1sxMl09LWwsb1sxXT0wLG9bNV09MipjLG9bOV09MCxvWzEzXT0tZCxvWzJdPTAsb1s2XT0wLG9bMTBdPXksb1sxNF09LXAsb1szXT0wLG9bN109MCxvWzExXT0wLG9bMTVdPTEsdGhpc31lcXVhbHModCl7Y29uc3QgZT10aGlzLmVsZW1lbnRzLGk9dC5lbGVtZW50cztmb3IobGV0IHM9MDtzPDE2O3MrKylpZihlW3NdIT09aVtzXSlyZXR1cm4hMTtyZXR1cm4hMH1mcm9tQXJyYXkodCxlPTApe2ZvcihsZXQgaT0wO2k8MTY7aSsrKXRoaXMuZWxlbWVudHNbaV09dFtpK2VdO3JldHVybiB0aGlzfXRvQXJyYXkodD1bXSxlPTApe2NvbnN0IGk9dGhpcy5lbGVtZW50cztyZXR1cm4gdFtlXT1pWzBdLHRbZSsxXT1pWzFdLHRbZSsyXT1pWzJdLHRbZSszXT1pWzNdLHRbZSs0XT1pWzRdLHRbZSs1XT1pWzVdLHRbZSs2XT1pWzZdLHRbZSs3XT1pWzddLHRbZSs4XT1pWzhdLHRbZSs5XT1pWzldLHRbZSsxMF09aVsxMF0sdFtlKzExXT1pWzExXSx0W2UrMTJdPWlbMTJdLHRbZSsxM109aVsxM10sdFtlKzE0XT1pWzE0XSx0W2UrMTVdPWlbMTVdLHR9fWNvbnN0IGt0PW5ldyBBLGl0PW5ldyBOLHVzPW5ldyBBKDAsMCwwKSxmcz1uZXcgQSgxLDEsMSksX3Q9bmV3IEEseWU9bmV3IEEsWj1uZXcgQSxGaT1uZXcgTixVaT1uZXcgUXQ7Y2xhc3MgeGV7Y29uc3RydWN0b3IodD0wLGU9MCxpPTAscz14ZS5ERUZBVUxUX09SREVSKXt0aGlzLmlzRXVsZXI9ITAsdGhpcy5feD10LHRoaXMuX3k9ZSx0aGlzLl96PWksdGhpcy5fb3JkZXI9c31nZXQgeCgpe3JldHVybiB0aGlzLl94fXNldCB4KHQpe3RoaXMuX3g9dCx0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCl9Z2V0IHkoKXtyZXR1cm4gdGhpcy5feX1zZXQgeSh0KXt0aGlzLl95PXQsdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpfWdldCB6KCl7cmV0dXJuIHRoaXMuX3p9c2V0IHoodCl7dGhpcy5fej10LHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKX1nZXQgb3JkZXIoKXtyZXR1cm4gdGhpcy5fb3JkZXJ9c2V0IG9yZGVyKHQpe3RoaXMuX29yZGVyPXQsdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpfXNldCh0LGUsaSxzPXRoaXMuX29yZGVyKXtyZXR1cm4gdGhpcy5feD10LHRoaXMuX3k9ZSx0aGlzLl96PWksdGhpcy5fb3JkZXI9cyx0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCksdGhpc31jbG9uZSgpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLl94LHRoaXMuX3ksdGhpcy5feix0aGlzLl9vcmRlcil9Y29weSh0KXtyZXR1cm4gdGhpcy5feD10Ll94LHRoaXMuX3k9dC5feSx0aGlzLl96PXQuX3osdGhpcy5fb3JkZXI9dC5fb3JkZXIsdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpLHRoaXN9c2V0RnJvbVJvdGF0aW9uTWF0cml4KHQsZT10aGlzLl9vcmRlcixpPSEwKXtjb25zdCBzPXQuZWxlbWVudHMsbj1zWzBdLHI9c1s0XSxhPXNbOF0sbz1zWzFdLGg9c1s1XSxjPXNbOV0sZj1zWzJdLGw9c1s2XSxkPXNbMTBdO3N3aXRjaChlKXtjYXNlIlhZWiI6dGhpcy5feT1NYXRoLmFzaW4oYXQoYSwtMSwxKSksTWF0aC5hYnMoYSk8Ljk5OTk5OTk/KHRoaXMuX3g9TWF0aC5hdGFuMigtYyxkKSx0aGlzLl96PU1hdGguYXRhbjIoLXIsbikpOih0aGlzLl94PU1hdGguYXRhbjIobCxoKSx0aGlzLl96PTApO2JyZWFrO2Nhc2UiWVhaIjp0aGlzLl94PU1hdGguYXNpbigtYXQoYywtMSwxKSksTWF0aC5hYnMoYyk8Ljk5OTk5OTk/KHRoaXMuX3k9TWF0aC5hdGFuMihhLGQpLHRoaXMuX3o9TWF0aC5hdGFuMihvLGgpKToodGhpcy5feT1NYXRoLmF0YW4yKC1mLG4pLHRoaXMuX3o9MCk7YnJlYWs7Y2FzZSJaWFkiOnRoaXMuX3g9TWF0aC5hc2luKGF0KGwsLTEsMSkpLE1hdGguYWJzKGwpPC45OTk5OTk5Pyh0aGlzLl95PU1hdGguYXRhbjIoLWYsZCksdGhpcy5fej1NYXRoLmF0YW4yKC1yLGgpKToodGhpcy5feT0wLHRoaXMuX3o9TWF0aC5hdGFuMihvLG4pKTticmVhaztjYXNlIlpZWCI6dGhpcy5feT1NYXRoLmFzaW4oLWF0KGYsLTEsMSkpLE1hdGguYWJzKGYpPC45OTk5OTk5Pyh0aGlzLl94PU1hdGguYXRhbjIobCxkKSx0aGlzLl96PU1hdGguYXRhbjIobyxuKSk6KHRoaXMuX3g9MCx0aGlzLl96PU1hdGguYXRhbjIoLXIsaCkpO2JyZWFrO2Nhc2UiWVpYIjp0aGlzLl96PU1hdGguYXNpbihhdChvLC0xLDEpKSxNYXRoLmFicyhvKTwuOTk5OTk5OT8odGhpcy5feD1NYXRoLmF0YW4yKC1jLGgpLHRoaXMuX3k9TWF0aC5hdGFuMigtZixuKSk6KHRoaXMuX3g9MCx0aGlzLl95PU1hdGguYXRhbjIoYSxkKSk7YnJlYWs7Y2FzZSJYWlkiOnRoaXMuX3o9TWF0aC5hc2luKC1hdChyLC0xLDEpKSxNYXRoLmFicyhyKTwuOTk5OTk5OT8odGhpcy5feD1NYXRoLmF0YW4yKGwsaCksdGhpcy5feT1NYXRoLmF0YW4yKGEsbikpOih0aGlzLl94PU1hdGguYXRhbjIoLWMsZCksdGhpcy5feT0wKTticmVhaztkZWZhdWx0OmNvbnNvbGUud2FybigiVEhSRUUuRXVsZXI6IC5zZXRGcm9tUm90YXRpb25NYXRyaXgoKSBlbmNvdW50ZXJlZCBhbiB1bmtub3duIG9yZGVyOiAiK2UpfXJldHVybiB0aGlzLl9vcmRlcj1lLGk9PT0hMCYmdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpLHRoaXN9c2V0RnJvbVF1YXRlcm5pb24odCxlLGkpe3JldHVybiBGaS5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbih0KSx0aGlzLnNldEZyb21Sb3RhdGlvbk1hdHJpeChGaSxlLGkpfXNldEZyb21WZWN0b3IzKHQsZT10aGlzLl9vcmRlcil7cmV0dXJuIHRoaXMuc2V0KHQueCx0LnksdC56LGUpfXJlb3JkZXIodCl7cmV0dXJuIFVpLnNldEZyb21FdWxlcih0aGlzKSx0aGlzLnNldEZyb21RdWF0ZXJuaW9uKFVpLHQpfWVxdWFscyh0KXtyZXR1cm4gdC5feD09PXRoaXMuX3gmJnQuX3k9PT10aGlzLl95JiZ0Ll96PT09dGhpcy5feiYmdC5fb3JkZXI9PT10aGlzLl9vcmRlcn1mcm9tQXJyYXkodCl7cmV0dXJuIHRoaXMuX3g9dFswXSx0aGlzLl95PXRbMV0sdGhpcy5fej10WzJdLHRbM10hPT12b2lkIDAmJih0aGlzLl9vcmRlcj10WzNdKSx0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCksdGhpc310b0FycmF5KHQ9W10sZT0wKXtyZXR1cm4gdFtlXT10aGlzLl94LHRbZSsxXT10aGlzLl95LHRbZSsyXT10aGlzLl96LHRbZSszXT10aGlzLl9vcmRlcix0fV9vbkNoYW5nZSh0KXtyZXR1cm4gdGhpcy5fb25DaGFuZ2VDYWxsYmFjaz10LHRoaXN9X29uQ2hhbmdlQ2FsbGJhY2soKXt9KltTeW1ib2wuaXRlcmF0b3JdKCl7eWllbGQgdGhpcy5feCx5aWVsZCB0aGlzLl95LHlpZWxkIHRoaXMuX3oseWllbGQgdGhpcy5fb3JkZXJ9fXhlLkRFRkFVTFRfT1JERVI9IlhZWiI7Y2xhc3MgZHN7Y29uc3RydWN0b3IoKXt0aGlzLm1hc2s9MX1zZXQodCl7dGhpcy5tYXNrPSgxPDx0fDApPj4+MH1lbmFibGUodCl7dGhpcy5tYXNrfD0xPDx0fDB9ZW5hYmxlQWxsKCl7dGhpcy5tYXNrPS0xfXRvZ2dsZSh0KXt0aGlzLm1hc2tePTE8PHR8MH1kaXNhYmxlKHQpe3RoaXMubWFzayY9figxPDx0fDApfWRpc2FibGVBbGwoKXt0aGlzLm1hc2s9MH10ZXN0KHQpe3JldHVybih0aGlzLm1hc2smdC5tYXNrKSE9PTB9aXNFbmFibGVkKHQpe3JldHVybih0aGlzLm1hc2smKDE8PHR8MCkpIT09MH19bGV0IHBzPTA7Y29uc3QgUmk9bmV3IEEsTHQ9bmV3IFF0LGZ0PW5ldyBOLGdlPW5ldyBBLGVlPW5ldyBBLG1zPW5ldyBBLHlzPW5ldyBRdCxraT1uZXcgQSgxLDAsMCksTGk9bmV3IEEoMCwxLDApLElpPW5ldyBBKDAsMCwxKSx4cz17dHlwZToiYWRkZWQifSxncz17dHlwZToicmVtb3ZlZCJ9LEdlPXt0eXBlOiJjaGlsZGFkZGVkIixjaGlsZDpudWxsfSxKZT17dHlwZToiY2hpbGRyZW1vdmVkIixjaGlsZDpudWxsfTtjbGFzcyBNdCBleHRlbmRzIFhle2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLmlzT2JqZWN0M0Q9ITAsT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsImlkIix7dmFsdWU6cHMrK30pLHRoaXMudXVpZD1mZSgpLHRoaXMubmFtZT0iIix0aGlzLnR5cGU9Ik9iamVjdDNEIix0aGlzLnBhcmVudD1udWxsLHRoaXMuY2hpbGRyZW49W10sdGhpcy51cD1NdC5ERUZBVUxUX1VQLmNsb25lKCk7Y29uc3QgdD1uZXcgQSxlPW5ldyB4ZSxpPW5ldyBRdCxzPW5ldyBBKDEsMSwxKTtmdW5jdGlvbiBuKCl7aS5zZXRGcm9tRXVsZXIoZSwhMSl9ZnVuY3Rpb24gcigpe2Uuc2V0RnJvbVF1YXRlcm5pb24oaSx2b2lkIDAsITEpfWUuX29uQ2hhbmdlKG4pLGkuX29uQ2hhbmdlKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMse3Bvc2l0aW9uOntjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCx2YWx1ZTp0fSxyb3RhdGlvbjp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6ZX0scXVhdGVybmlvbjp7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6aX0sc2NhbGU6e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOnN9LG1vZGVsVmlld01hdHJpeDp7dmFsdWU6bmV3IE59LG5vcm1hbE1hdHJpeDp7dmFsdWU6bmV3IFR0fX0pLHRoaXMubWF0cml4PW5ldyBOLHRoaXMubWF0cml4V29ybGQ9bmV3IE4sdGhpcy5tYXRyaXhBdXRvVXBkYXRlPU10LkRFRkFVTFRfTUFUUklYX0FVVE9fVVBEQVRFLHRoaXMubWF0cml4V29ybGRBdXRvVXBkYXRlPU10LkRFRkFVTFRfTUFUUklYX1dPUkxEX0FVVE9fVVBEQVRFLHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMSx0aGlzLmxheWVycz1uZXcgZHMsdGhpcy52aXNpYmxlPSEwLHRoaXMuY2FzdFNoYWRvdz0hMSx0aGlzLnJlY2VpdmVTaGFkb3c9ITEsdGhpcy5mcnVzdHVtQ3VsbGVkPSEwLHRoaXMucmVuZGVyT3JkZXI9MCx0aGlzLmFuaW1hdGlvbnM9W10sdGhpcy51c2VyRGF0YT17fX1vbkJlZm9yZVNoYWRvdygpe31vbkFmdGVyU2hhZG93KCl7fW9uQmVmb3JlUmVuZGVyKCl7fW9uQWZ0ZXJSZW5kZXIoKXt9YXBwbHlNYXRyaXg0KHQpe3RoaXMubWF0cml4QXV0b1VwZGF0ZSYmdGhpcy51cGRhdGVNYXRyaXgoKSx0aGlzLm1hdHJpeC5wcmVtdWx0aXBseSh0KSx0aGlzLm1hdHJpeC5kZWNvbXBvc2UodGhpcy5wb3NpdGlvbix0aGlzLnF1YXRlcm5pb24sdGhpcy5zY2FsZSl9YXBwbHlRdWF0ZXJuaW9uKHQpe3JldHVybiB0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkodCksdGhpc31zZXRSb3RhdGlvbkZyb21BeGlzQW5nbGUodCxlKXt0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0LGUpfXNldFJvdGF0aW9uRnJvbUV1bGVyKHQpe3RoaXMucXVhdGVybmlvbi5zZXRGcm9tRXVsZXIodCwhMCl9c2V0Um90YXRpb25Gcm9tTWF0cml4KHQpe3RoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgodCl9c2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbih0KXt0aGlzLnF1YXRlcm5pb24uY29weSh0KX1yb3RhdGVPbkF4aXModCxlKXtyZXR1cm4gTHQuc2V0RnJvbUF4aXNBbmdsZSh0LGUpLHRoaXMucXVhdGVybmlvbi5tdWx0aXBseShMdCksdGhpc31yb3RhdGVPbldvcmxkQXhpcyh0LGUpe3JldHVybiBMdC5zZXRGcm9tQXhpc0FuZ2xlKHQsZSksdGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KEx0KSx0aGlzfXJvdGF0ZVgodCl7cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKGtpLHQpfXJvdGF0ZVkodCl7cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKExpLHQpfXJvdGF0ZVoodCl7cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKElpLHQpfXRyYW5zbGF0ZU9uQXhpcyh0LGUpe3JldHVybiBSaS5jb3B5KHQpLmFwcGx5UXVhdGVybmlvbih0aGlzLnF1YXRlcm5pb24pLHRoaXMucG9zaXRpb24uYWRkKFJpLm11bHRpcGx5U2NhbGFyKGUpKSx0aGlzfXRyYW5zbGF0ZVgodCl7cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKGtpLHQpfXRyYW5zbGF0ZVkodCl7cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKExpLHQpfXRyYW5zbGF0ZVoodCl7cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKElpLHQpfWxvY2FsVG9Xb3JsZCh0KXtyZXR1cm4gdGhpcy51cGRhdGVXb3JsZE1hdHJpeCghMCwhMSksdC5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCl9d29ybGRUb0xvY2FsKHQpe3JldHVybiB0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCEwLCExKSx0LmFwcGx5TWF0cml4NChmdC5jb3B5KHRoaXMubWF0cml4V29ybGQpLmludmVydCgpKX1sb29rQXQodCxlLGkpe3QuaXNWZWN0b3IzP2dlLmNvcHkodCk6Z2Uuc2V0KHQsZSxpKTtjb25zdCBzPXRoaXMucGFyZW50O3RoaXMudXBkYXRlV29ybGRNYXRyaXgoITAsITEpLGVlLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLm1hdHJpeFdvcmxkKSx0aGlzLmlzQ2FtZXJhfHx0aGlzLmlzTGlnaHQ/ZnQubG9va0F0KGVlLGdlLHRoaXMudXApOmZ0Lmxvb2tBdChnZSxlZSx0aGlzLnVwKSx0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KGZ0KSxzJiYoZnQuZXh0cmFjdFJvdGF0aW9uKHMubWF0cml4V29ybGQpLEx0LnNldEZyb21Sb3RhdGlvbk1hdHJpeChmdCksdGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KEx0LmludmVydCgpKSl9YWRkKHQpe2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKGxldCBlPTA7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl0aGlzLmFkZChhcmd1bWVudHNbZV0pO3JldHVybiB0aGlzfXJldHVybiB0PT09dGhpcz8oY29uc29sZS5lcnJvcigiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3QgY2FuJ3QgYmUgYWRkZWQgYXMgYSBjaGlsZCBvZiBpdHNlbGYuIix0KSx0aGlzKToodCYmdC5pc09iamVjdDNEPyh0LnBhcmVudCE9PW51bGwmJnQucGFyZW50LnJlbW92ZSh0KSx0LnBhcmVudD10aGlzLHRoaXMuY2hpbGRyZW4ucHVzaCh0KSx0LmRpc3BhdGNoRXZlbnQoeHMpLEdlLmNoaWxkPXQsdGhpcy5kaXNwYXRjaEV2ZW50KEdlKSxHZS5jaGlsZD1udWxsKTpjb25zb2xlLmVycm9yKCJUSFJFRS5PYmplY3QzRC5hZGQ6IG9iamVjdCBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuT2JqZWN0M0QuIix0KSx0aGlzKX1yZW1vdmUodCl7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXtmb3IobGV0IGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXRoaXMucmVtb3ZlKGFyZ3VtZW50c1tpXSk7cmV0dXJuIHRoaXN9Y29uc3QgZT10aGlzLmNoaWxkcmVuLmluZGV4T2YodCk7cmV0dXJuIGUhPT0tMSYmKHQucGFyZW50PW51bGwsdGhpcy5jaGlsZHJlbi5zcGxpY2UoZSwxKSx0LmRpc3BhdGNoRXZlbnQoZ3MpLEplLmNoaWxkPXQsdGhpcy5kaXNwYXRjaEV2ZW50KEplKSxKZS5jaGlsZD1udWxsKSx0aGlzfXJlbW92ZUZyb21QYXJlbnQoKXtjb25zdCB0PXRoaXMucGFyZW50O3JldHVybiB0IT09bnVsbCYmdC5yZW1vdmUodGhpcyksdGhpc31jbGVhcigpe3JldHVybiB0aGlzLnJlbW92ZSguLi50aGlzLmNoaWxkcmVuKX1hdHRhY2godCl7cmV0dXJuIHRoaXMudXBkYXRlV29ybGRNYXRyaXgoITAsITEpLGZ0LmNvcHkodGhpcy5tYXRyaXhXb3JsZCkuaW52ZXJ0KCksdC5wYXJlbnQhPT1udWxsJiYodC5wYXJlbnQudXBkYXRlV29ybGRNYXRyaXgoITAsITEpLGZ0Lm11bHRpcGx5KHQucGFyZW50Lm1hdHJpeFdvcmxkKSksdC5hcHBseU1hdHJpeDQoZnQpLHRoaXMuYWRkKHQpLHQudXBkYXRlV29ybGRNYXRyaXgoITEsITApLHRoaXN9Z2V0T2JqZWN0QnlJZCh0KXtyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCJpZCIsdCl9Z2V0T2JqZWN0QnlOYW1lKHQpe3JldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoIm5hbWUiLHQpfWdldE9iamVjdEJ5UHJvcGVydHkodCxlKXtpZih0aGlzW3RdPT09ZSlyZXR1cm4gdGhpcztmb3IobGV0IGk9MCxzPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2k8cztpKyspe2NvbnN0IHI9dGhpcy5jaGlsZHJlbltpXS5nZXRPYmplY3RCeVByb3BlcnR5KHQsZSk7aWYociE9PXZvaWQgMClyZXR1cm4gcn19Z2V0T2JqZWN0c0J5UHJvcGVydHkodCxlLGk9W10pe3RoaXNbdF09PT1lJiZpLnB1c2godGhpcyk7Y29uc3Qgcz10aGlzLmNoaWxkcmVuO2ZvcihsZXQgbj0wLHI9cy5sZW5ndGg7bjxyO24rKylzW25dLmdldE9iamVjdHNCeVByb3BlcnR5KHQsZSxpKTtyZXR1cm4gaX1nZXRXb3JsZFBvc2l0aW9uKHQpe3JldHVybiB0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCEwLCExKSx0LnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLm1hdHJpeFdvcmxkKX1nZXRXb3JsZFF1YXRlcm5pb24odCl7cmV0dXJuIHRoaXMudXBkYXRlV29ybGRNYXRyaXgoITAsITEpLHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKGVlLHQsbXMpLHR9Z2V0V29ybGRTY2FsZSh0KXtyZXR1cm4gdGhpcy51cGRhdGVXb3JsZE1hdHJpeCghMCwhMSksdGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoZWUseXMsdCksdH1nZXRXb3JsZERpcmVjdGlvbih0KXt0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCEwLCExKTtjb25zdCBlPXRoaXMubWF0cml4V29ybGQuZWxlbWVudHM7cmV0dXJuIHQuc2V0KGVbOF0sZVs5XSxlWzEwXSkubm9ybWFsaXplKCl9cmF5Y2FzdCgpe310cmF2ZXJzZSh0KXt0KHRoaXMpO2NvbnN0IGU9dGhpcy5jaGlsZHJlbjtmb3IobGV0IGk9MCxzPWUubGVuZ3RoO2k8cztpKyspZVtpXS50cmF2ZXJzZSh0KX10cmF2ZXJzZVZpc2libGUodCl7aWYodGhpcy52aXNpYmxlPT09ITEpcmV0dXJuO3QodGhpcyk7Y29uc3QgZT10aGlzLmNoaWxkcmVuO2ZvcihsZXQgaT0wLHM9ZS5sZW5ndGg7aTxzO2krKyllW2ldLnRyYXZlcnNlVmlzaWJsZSh0KX10cmF2ZXJzZUFuY2VzdG9ycyh0KXtjb25zdCBlPXRoaXMucGFyZW50O2UhPT1udWxsJiYodChlKSxlLnRyYXZlcnNlQW5jZXN0b3JzKHQpKX11cGRhdGVNYXRyaXgoKXt0aGlzLm1hdHJpeC5jb21wb3NlKHRoaXMucG9zaXRpb24sdGhpcy5xdWF0ZXJuaW9uLHRoaXMuc2NhbGUpLHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMH11cGRhdGVNYXRyaXhXb3JsZCh0KXt0aGlzLm1hdHJpeEF1dG9VcGRhdGUmJnRoaXMudXBkYXRlTWF0cml4KCksKHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZXx8dCkmJih0aGlzLnBhcmVudD09PW51bGw/dGhpcy5tYXRyaXhXb3JsZC5jb3B5KHRoaXMubWF0cml4KTp0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXModGhpcy5wYXJlbnQubWF0cml4V29ybGQsdGhpcy5tYXRyaXgpLHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMSx0PSEwKTtjb25zdCBlPXRoaXMuY2hpbGRyZW47Zm9yKGxldCBpPTAscz1lLmxlbmd0aDtpPHM7aSsrKXtjb25zdCBuPWVbaV07KG4ubWF0cml4V29ybGRBdXRvVXBkYXRlPT09ITB8fHQ9PT0hMCkmJm4udXBkYXRlTWF0cml4V29ybGQodCl9fXVwZGF0ZVdvcmxkTWF0cml4KHQsZSl7Y29uc3QgaT10aGlzLnBhcmVudDtpZih0PT09ITAmJmkhPT1udWxsJiZpLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZT09PSEwJiZpLnVwZGF0ZVdvcmxkTWF0cml4KCEwLCExKSx0aGlzLm1hdHJpeEF1dG9VcGRhdGUmJnRoaXMudXBkYXRlTWF0cml4KCksdGhpcy5wYXJlbnQ9PT1udWxsP3RoaXMubWF0cml4V29ybGQuY29weSh0aGlzLm1hdHJpeCk6dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLHRoaXMubWF0cml4KSxlPT09ITApe2NvbnN0IHM9dGhpcy5jaGlsZHJlbjtmb3IobGV0IG49MCxyPXMubGVuZ3RoO248cjtuKyspe2NvbnN0IGE9c1tuXTthLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZT09PSEwJiZhLnVwZGF0ZVdvcmxkTWF0cml4KCExLCEwKX19fXRvSlNPTih0KXtjb25zdCBlPXQ9PT12b2lkIDB8fHR5cGVvZiB0PT0ic3RyaW5nIixpPXt9O2UmJih0PXtnZW9tZXRyaWVzOnt9LG1hdGVyaWFsczp7fSx0ZXh0dXJlczp7fSxpbWFnZXM6e30sc2hhcGVzOnt9LHNrZWxldG9uczp7fSxhbmltYXRpb25zOnt9LG5vZGVzOnt9fSxpLm1ldGFkYXRhPXt2ZXJzaW9uOjQuNix0eXBlOiJPYmplY3QiLGdlbmVyYXRvcjoiT2JqZWN0M0QudG9KU09OIn0pO2NvbnN0IHM9e307cy51dWlkPXRoaXMudXVpZCxzLnR5cGU9dGhpcy50eXBlLHRoaXMubmFtZSE9PSIiJiYocy5uYW1lPXRoaXMubmFtZSksdGhpcy5jYXN0U2hhZG93PT09ITAmJihzLmNhc3RTaGFkb3c9ITApLHRoaXMucmVjZWl2ZVNoYWRvdz09PSEwJiYocy5yZWNlaXZlU2hhZG93PSEwKSx0aGlzLnZpc2libGU9PT0hMSYmKHMudmlzaWJsZT0hMSksdGhpcy5mcnVzdHVtQ3VsbGVkPT09ITEmJihzLmZydXN0dW1DdWxsZWQ9ITEpLHRoaXMucmVuZGVyT3JkZXIhPT0wJiYocy5yZW5kZXJPcmRlcj10aGlzLnJlbmRlck9yZGVyKSxPYmplY3Qua2V5cyh0aGlzLnVzZXJEYXRhKS5sZW5ndGg+MCYmKHMudXNlckRhdGE9dGhpcy51c2VyRGF0YSkscy5sYXllcnM9dGhpcy5sYXllcnMubWFzayxzLm1hdHJpeD10aGlzLm1hdHJpeC50b0FycmF5KCkscy51cD10aGlzLnVwLnRvQXJyYXkoKSx0aGlzLm1hdHJpeEF1dG9VcGRhdGU9PT0hMSYmKHMubWF0cml4QXV0b1VwZGF0ZT0hMSksdGhpcy5pc0luc3RhbmNlZE1lc2gmJihzLnR5cGU9Ikluc3RhbmNlZE1lc2giLHMuY291bnQ9dGhpcy5jb3VudCxzLmluc3RhbmNlTWF0cml4PXRoaXMuaW5zdGFuY2VNYXRyaXgudG9KU09OKCksdGhpcy5pbnN0YW5jZUNvbG9yIT09bnVsbCYmKHMuaW5zdGFuY2VDb2xvcj10aGlzLmluc3RhbmNlQ29sb3IudG9KU09OKCkpKSx0aGlzLmlzQmF0Y2hlZE1lc2gmJihzLnR5cGU9IkJhdGNoZWRNZXNoIixzLnBlck9iamVjdEZydXN0dW1DdWxsZWQ9dGhpcy5wZXJPYmplY3RGcnVzdHVtQ3VsbGVkLHMuc29ydE9iamVjdHM9dGhpcy5zb3J0T2JqZWN0cyxzLmRyYXdSYW5nZXM9dGhpcy5fZHJhd1JhbmdlcyxzLnJlc2VydmVkUmFuZ2VzPXRoaXMuX3Jlc2VydmVkUmFuZ2VzLHMudmlzaWJpbGl0eT10aGlzLl92aXNpYmlsaXR5LHMuYWN0aXZlPXRoaXMuX2FjdGl2ZSxzLmJvdW5kcz10aGlzLl9ib3VuZHMubWFwKGE9Pih7Ym94SW5pdGlhbGl6ZWQ6YS5ib3hJbml0aWFsaXplZCxib3hNaW46YS5ib3gubWluLnRvQXJyYXkoKSxib3hNYXg6YS5ib3gubWF4LnRvQXJyYXkoKSxzcGhlcmVJbml0aWFsaXplZDphLnNwaGVyZUluaXRpYWxpemVkLHNwaGVyZVJhZGl1czphLnNwaGVyZS5yYWRpdXMsc3BoZXJlQ2VudGVyOmEuc3BoZXJlLmNlbnRlci50b0FycmF5KCl9KSkscy5tYXhHZW9tZXRyeUNvdW50PXRoaXMuX21heEdlb21ldHJ5Q291bnQscy5tYXhWZXJ0ZXhDb3VudD10aGlzLl9tYXhWZXJ0ZXhDb3VudCxzLm1heEluZGV4Q291bnQ9dGhpcy5fbWF4SW5kZXhDb3VudCxzLmdlb21ldHJ5SW5pdGlhbGl6ZWQ9dGhpcy5fZ2VvbWV0cnlJbml0aWFsaXplZCxzLmdlb21ldHJ5Q291bnQ9dGhpcy5fZ2VvbWV0cnlDb3VudCxzLm1hdHJpY2VzVGV4dHVyZT10aGlzLl9tYXRyaWNlc1RleHR1cmUudG9KU09OKHQpLHRoaXMuYm91bmRpbmdTcGhlcmUhPT1udWxsJiYocy5ib3VuZGluZ1NwaGVyZT17Y2VudGVyOnMuYm91bmRpbmdTcGhlcmUuY2VudGVyLnRvQXJyYXkoKSxyYWRpdXM6cy5ib3VuZGluZ1NwaGVyZS5yYWRpdXN9KSx0aGlzLmJvdW5kaW5nQm94IT09bnVsbCYmKHMuYm91bmRpbmdCb3g9e21pbjpzLmJvdW5kaW5nQm94Lm1pbi50b0FycmF5KCksbWF4OnMuYm91bmRpbmdCb3gubWF4LnRvQXJyYXkoKX0pKTtmdW5jdGlvbiBuKGEsbyl7cmV0dXJuIGFbby51dWlkXT09PXZvaWQgMCYmKGFbby51dWlkXT1vLnRvSlNPTih0KSksby51dWlkfWlmKHRoaXMuaXNTY2VuZSl0aGlzLmJhY2tncm91bmQmJih0aGlzLmJhY2tncm91bmQuaXNDb2xvcj9zLmJhY2tncm91bmQ9dGhpcy5iYWNrZ3JvdW5kLnRvSlNPTigpOnRoaXMuYmFja2dyb3VuZC5pc1RleHR1cmUmJihzLmJhY2tncm91bmQ9dGhpcy5iYWNrZ3JvdW5kLnRvSlNPTih0KS51dWlkKSksdGhpcy5lbnZpcm9ubWVudCYmdGhpcy5lbnZpcm9ubWVudC5pc1RleHR1cmUmJnRoaXMuZW52aXJvbm1lbnQuaXNSZW5kZXJUYXJnZXRUZXh0dXJlIT09ITAmJihzLmVudmlyb25tZW50PXRoaXMuZW52aXJvbm1lbnQudG9KU09OKHQpLnV1aWQpO2Vsc2UgaWYodGhpcy5pc01lc2h8fHRoaXMuaXNMaW5lfHx0aGlzLmlzUG9pbnRzKXtzLmdlb21ldHJ5PW4odC5nZW9tZXRyaWVzLHRoaXMuZ2VvbWV0cnkpO2NvbnN0IGE9dGhpcy5nZW9tZXRyeS5wYXJhbWV0ZXJzO2lmKGEhPT12b2lkIDAmJmEuc2hhcGVzIT09dm9pZCAwKXtjb25zdCBvPWEuc2hhcGVzO2lmKEFycmF5LmlzQXJyYXkobykpZm9yKGxldCBoPTAsYz1vLmxlbmd0aDtoPGM7aCsrKXtjb25zdCBmPW9baF07bih0LnNoYXBlcyxmKX1lbHNlIG4odC5zaGFwZXMsbyl9fWlmKHRoaXMuaXNTa2lubmVkTWVzaCYmKHMuYmluZE1vZGU9dGhpcy5iaW5kTW9kZSxzLmJpbmRNYXRyaXg9dGhpcy5iaW5kTWF0cml4LnRvQXJyYXkoKSx0aGlzLnNrZWxldG9uIT09dm9pZCAwJiYobih0LnNrZWxldG9ucyx0aGlzLnNrZWxldG9uKSxzLnNrZWxldG9uPXRoaXMuc2tlbGV0b24udXVpZCkpLHRoaXMubWF0ZXJpYWwhPT12b2lkIDApaWYoQXJyYXkuaXNBcnJheSh0aGlzLm1hdGVyaWFsKSl7Y29uc3QgYT1bXTtmb3IobGV0IG89MCxoPXRoaXMubWF0ZXJpYWwubGVuZ3RoO288aDtvKyspYS5wdXNoKG4odC5tYXRlcmlhbHMsdGhpcy5tYXRlcmlhbFtvXSkpO3MubWF0ZXJpYWw9YX1lbHNlIHMubWF0ZXJpYWw9bih0Lm1hdGVyaWFscyx0aGlzLm1hdGVyaWFsKTtpZih0aGlzLmNoaWxkcmVuLmxlbmd0aD4wKXtzLmNoaWxkcmVuPVtdO2ZvcihsZXQgYT0wO2E8dGhpcy5jaGlsZHJlbi5sZW5ndGg7YSsrKXMuY2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2FdLnRvSlNPTih0KS5vYmplY3QpfWlmKHRoaXMuYW5pbWF0aW9ucy5sZW5ndGg+MCl7cy5hbmltYXRpb25zPVtdO2ZvcihsZXQgYT0wO2E8dGhpcy5hbmltYXRpb25zLmxlbmd0aDthKyspe2NvbnN0IG89dGhpcy5hbmltYXRpb25zW2FdO3MuYW5pbWF0aW9ucy5wdXNoKG4odC5hbmltYXRpb25zLG8pKX19aWYoZSl7Y29uc3QgYT1yKHQuZ2VvbWV0cmllcyksbz1yKHQubWF0ZXJpYWxzKSxoPXIodC50ZXh0dXJlcyksYz1yKHQuaW1hZ2VzKSxmPXIodC5zaGFwZXMpLGw9cih0LnNrZWxldG9ucyksZD1yKHQuYW5pbWF0aW9ucykscD1yKHQubm9kZXMpO2EubGVuZ3RoPjAmJihpLmdlb21ldHJpZXM9YSksby5sZW5ndGg+MCYmKGkubWF0ZXJpYWxzPW8pLGgubGVuZ3RoPjAmJihpLnRleHR1cmVzPWgpLGMubGVuZ3RoPjAmJihpLmltYWdlcz1jKSxmLmxlbmd0aD4wJiYoaS5zaGFwZXM9ZiksbC5sZW5ndGg+MCYmKGkuc2tlbGV0b25zPWwpLGQubGVuZ3RoPjAmJihpLmFuaW1hdGlvbnM9ZCkscC5sZW5ndGg+MCYmKGkubm9kZXM9cCl9cmV0dXJuIGkub2JqZWN0PXMsaTtmdW5jdGlvbiByKGEpe2NvbnN0IG89W107Zm9yKGNvbnN0IGggaW4gYSl7Y29uc3QgYz1hW2hdO2RlbGV0ZSBjLm1ldGFkYXRhLG8ucHVzaChjKX1yZXR1cm4gb319Y2xvbmUodCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSh0aGlzLHQpfWNvcHkodCxlPSEwKXtpZih0aGlzLm5hbWU9dC5uYW1lLHRoaXMudXAuY29weSh0LnVwKSx0aGlzLnBvc2l0aW9uLmNvcHkodC5wb3NpdGlvbiksdGhpcy5yb3RhdGlvbi5vcmRlcj10LnJvdGF0aW9uLm9yZGVyLHRoaXMucXVhdGVybmlvbi5jb3B5KHQucXVhdGVybmlvbiksdGhpcy5zY2FsZS5jb3B5KHQuc2NhbGUpLHRoaXMubWF0cml4LmNvcHkodC5tYXRyaXgpLHRoaXMubWF0cml4V29ybGQuY29weSh0Lm1hdHJpeFdvcmxkKSx0aGlzLm1hdHJpeEF1dG9VcGRhdGU9dC5tYXRyaXhBdXRvVXBkYXRlLHRoaXMubWF0cml4V29ybGRBdXRvVXBkYXRlPXQubWF0cml4V29ybGRBdXRvVXBkYXRlLHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZT10Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsdGhpcy5sYXllcnMubWFzaz10LmxheWVycy5tYXNrLHRoaXMudmlzaWJsZT10LnZpc2libGUsdGhpcy5jYXN0U2hhZG93PXQuY2FzdFNoYWRvdyx0aGlzLnJlY2VpdmVTaGFkb3c9dC5yZWNlaXZlU2hhZG93LHRoaXMuZnJ1c3R1bUN1bGxlZD10LmZydXN0dW1DdWxsZWQsdGhpcy5yZW5kZXJPcmRlcj10LnJlbmRlck9yZGVyLHRoaXMuYW5pbWF0aW9ucz10LmFuaW1hdGlvbnMuc2xpY2UoKSx0aGlzLnVzZXJEYXRhPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodC51c2VyRGF0YSkpLGU9PT0hMClmb3IobGV0IGk9MDtpPHQuY2hpbGRyZW4ubGVuZ3RoO2krKyl7Y29uc3Qgcz10LmNoaWxkcmVuW2ldO3RoaXMuYWRkKHMuY2xvbmUoKSl9cmV0dXJuIHRoaXN9fU10LkRFRkFVTFRfVVA9bmV3IEEoMCwxLDApLE10LkRFRkFVTFRfTUFUUklYX0FVVE9fVVBEQVRFPSEwLE10LkRFRkFVTFRfTUFUUklYX1dPUkxEX0FVVE9fVVBEQVRFPSEwO2NvbnN0IHN0PW5ldyBBLGR0PW5ldyBBLFFlPW5ldyBBLHB0PW5ldyBBLEl0PW5ldyBBLER0PW5ldyBBLERpPW5ldyBBLEtlPW5ldyBBLHRpPW5ldyBBLGVpPW5ldyBBO2NsYXNzIG50e2NvbnN0cnVjdG9yKHQ9bmV3IEEsZT1uZXcgQSxpPW5ldyBBKXt0aGlzLmE9dCx0aGlzLmI9ZSx0aGlzLmM9aX1zdGF0aWMgZ2V0Tm9ybWFsKHQsZSxpLHMpe3Muc3ViVmVjdG9ycyhpLGUpLHN0LnN1YlZlY3RvcnModCxlKSxzLmNyb3NzKHN0KTtjb25zdCBuPXMubGVuZ3RoU3EoKTtyZXR1cm4gbj4wP3MubXVsdGlwbHlTY2FsYXIoMS9NYXRoLnNxcnQobikpOnMuc2V0KDAsMCwwKX1zdGF0aWMgZ2V0QmFyeWNvb3JkKHQsZSxpLHMsbil7c3Quc3ViVmVjdG9ycyhzLGUpLGR0LnN1YlZlY3RvcnMoaSxlKSxRZS5zdWJWZWN0b3JzKHQsZSk7Y29uc3Qgcj1zdC5kb3Qoc3QpLGE9c3QuZG90KGR0KSxvPXN0LmRvdChRZSksaD1kdC5kb3QoZHQpLGM9ZHQuZG90KFFlKSxmPXIqaC1hKmE7aWYoZj09PTApcmV0dXJuIG4uc2V0KDAsMCwwKSxudWxsO2NvbnN0IGw9MS9mLGQ9KGgqby1hKmMpKmwscD0ocipjLWEqbykqbDtyZXR1cm4gbi5zZXQoMS1kLXAscCxkKX1zdGF0aWMgY29udGFpbnNQb2ludCh0LGUsaSxzKXtyZXR1cm4gdGhpcy5nZXRCYXJ5Y29vcmQodCxlLGkscyxwdCk9PT1udWxsPyExOnB0Lng+PTAmJnB0Lnk+PTAmJnB0LngrcHQueTw9MX1zdGF0aWMgZ2V0SW50ZXJwb2xhdGlvbih0LGUsaSxzLG4scixhLG8pe3JldHVybiB0aGlzLmdldEJhcnljb29yZCh0LGUsaSxzLHB0KT09PW51bGw/KG8ueD0wLG8ueT0wLCJ6ImluIG8mJihvLno9MCksInciaW4gbyYmKG8udz0wKSxudWxsKTooby5zZXRTY2FsYXIoMCksby5hZGRTY2FsZWRWZWN0b3IobixwdC54KSxvLmFkZFNjYWxlZFZlY3RvcihyLHB0LnkpLG8uYWRkU2NhbGVkVmVjdG9yKGEscHQueiksbyl9c3RhdGljIGlzRnJvbnRGYWNpbmcodCxlLGkscyl7cmV0dXJuIHN0LnN1YlZlY3RvcnMoaSxlKSxkdC5zdWJWZWN0b3JzKHQsZSksc3QuY3Jvc3MoZHQpLmRvdChzKTwwfXNldCh0LGUsaSl7cmV0dXJuIHRoaXMuYS5jb3B5KHQpLHRoaXMuYi5jb3B5KGUpLHRoaXMuYy5jb3B5KGkpLHRoaXN9c2V0RnJvbVBvaW50c0FuZEluZGljZXModCxlLGkscyl7cmV0dXJuIHRoaXMuYS5jb3B5KHRbZV0pLHRoaXMuYi5jb3B5KHRbaV0pLHRoaXMuYy5jb3B5KHRbc10pLHRoaXN9c2V0RnJvbUF0dHJpYnV0ZUFuZEluZGljZXModCxlLGkscyl7cmV0dXJuIHRoaXMuYS5mcm9tQnVmZmVyQXR0cmlidXRlKHQsZSksdGhpcy5iLmZyb21CdWZmZXJBdHRyaWJ1dGUodCxpKSx0aGlzLmMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSh0LHMpLHRoaXN9Y2xvbmUoKXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpfWNvcHkodCl7cmV0dXJuIHRoaXMuYS5jb3B5KHQuYSksdGhpcy5iLmNvcHkodC5iKSx0aGlzLmMuY29weSh0LmMpLHRoaXN9Z2V0QXJlYSgpe3JldHVybiBzdC5zdWJWZWN0b3JzKHRoaXMuYyx0aGlzLmIpLGR0LnN1YlZlY3RvcnModGhpcy5hLHRoaXMuYiksc3QuY3Jvc3MoZHQpLmxlbmd0aCgpKi41fWdldE1pZHBvaW50KHQpe3JldHVybiB0LmFkZFZlY3RvcnModGhpcy5hLHRoaXMuYikuYWRkKHRoaXMuYykubXVsdGlwbHlTY2FsYXIoMS8zKX1nZXROb3JtYWwodCl7cmV0dXJuIG50LmdldE5vcm1hbCh0aGlzLmEsdGhpcy5iLHRoaXMuYyx0KX1nZXRQbGFuZSh0KXtyZXR1cm4gdC5zZXRGcm9tQ29wbGFuYXJQb2ludHModGhpcy5hLHRoaXMuYix0aGlzLmMpfWdldEJhcnljb29yZCh0LGUpe3JldHVybiBudC5nZXRCYXJ5Y29vcmQodCx0aGlzLmEsdGhpcy5iLHRoaXMuYyxlKX1nZXRJbnRlcnBvbGF0aW9uKHQsZSxpLHMsbil7cmV0dXJuIG50LmdldEludGVycG9sYXRpb24odCx0aGlzLmEsdGhpcy5iLHRoaXMuYyxlLGkscyxuKX1jb250YWluc1BvaW50KHQpe3JldHVybiBudC5jb250YWluc1BvaW50KHQsdGhpcy5hLHRoaXMuYix0aGlzLmMpfWlzRnJvbnRGYWNpbmcodCl7cmV0dXJuIG50LmlzRnJvbnRGYWNpbmcodGhpcy5hLHRoaXMuYix0aGlzLmMsdCl9aW50ZXJzZWN0c0JveCh0KXtyZXR1cm4gdC5pbnRlcnNlY3RzVHJpYW5nbGUodGhpcyl9Y2xvc2VzdFBvaW50VG9Qb2ludCh0LGUpe2NvbnN0IGk9dGhpcy5hLHM9dGhpcy5iLG49dGhpcy5jO2xldCByLGE7SXQuc3ViVmVjdG9ycyhzLGkpLER0LnN1YlZlY3RvcnMobixpKSxLZS5zdWJWZWN0b3JzKHQsaSk7Y29uc3Qgbz1JdC5kb3QoS2UpLGg9RHQuZG90KEtlKTtpZihvPD0wJiZoPD0wKXJldHVybiBlLmNvcHkoaSk7dGkuc3ViVmVjdG9ycyh0LHMpO2NvbnN0IGM9SXQuZG90KHRpKSxmPUR0LmRvdCh0aSk7aWYoYz49MCYmZjw9YylyZXR1cm4gZS5jb3B5KHMpO2NvbnN0IGw9bypmLWMqaDtpZihsPD0wJiZvPj0wJiZjPD0wKXJldHVybiByPW8vKG8tYyksZS5jb3B5KGkpLmFkZFNjYWxlZFZlY3RvcihJdCxyKTtlaS5zdWJWZWN0b3JzKHQsbik7Y29uc3QgZD1JdC5kb3QoZWkpLHA9RHQuZG90KGVpKTtpZihwPj0wJiZkPD1wKXJldHVybiBlLmNvcHkobik7Y29uc3QgeT1kKmgtbypwO2lmKHk8PTAmJmg+PTAmJnA8PTApcmV0dXJuIGE9aC8oaC1wKSxlLmNvcHkoaSkuYWRkU2NhbGVkVmVjdG9yKER0LGEpO2NvbnN0IHg9YypwLWQqZjtpZih4PD0wJiZmLWM+PTAmJmQtcD49MClyZXR1cm4gRGkuc3ViVmVjdG9ycyhuLHMpLGE9KGYtYykvKGYtYysoZC1wKSksZS5jb3B5KHMpLmFkZFNjYWxlZFZlY3RvcihEaSxhKTtjb25zdCBtPTEvKHgreStsKTtyZXR1cm4gcj15Km0sYT1sKm0sZS5jb3B5KGkpLmFkZFNjYWxlZFZlY3RvcihJdCxyKS5hZGRTY2FsZWRWZWN0b3IoRHQsYSl9ZXF1YWxzKHQpe3JldHVybiB0LmEuZXF1YWxzKHRoaXMuYSkmJnQuYi5lcXVhbHModGhpcy5iKSYmdC5jLmVxdWFscyh0aGlzLmMpfX1jb25zdCBJPW5ldyBBLGJlPW5ldyB2O2NsYXNzIGN0e2NvbnN0cnVjdG9yKHQsZSxpPSExKXtpZihBcnJheS5pc0FycmF5KHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIlRIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogYXJyYXkgc2hvdWxkIGJlIGEgVHlwZWQgQXJyYXkuIik7dGhpcy5pc0J1ZmZlckF0dHJpYnV0ZT0hMCx0aGlzLm5hbWU9IiIsdGhpcy5hcnJheT10LHRoaXMuaXRlbVNpemU9ZSx0aGlzLmNvdW50PXQhPT12b2lkIDA/dC5sZW5ndGgvZTowLHRoaXMubm9ybWFsaXplZD1pLHRoaXMudXNhZ2U9MzUwNDQsdGhpcy5fdXBkYXRlUmFuZ2U9e29mZnNldDowLGNvdW50Oi0xfSx0aGlzLnVwZGF0ZVJhbmdlcz1bXSx0aGlzLmdwdVR5cGU9MTAxNSx0aGlzLnZlcnNpb249MH1vblVwbG9hZENhbGxiYWNrKCl7fXNldCBuZWVkc1VwZGF0ZSh0KXt0PT09ITAmJnRoaXMudmVyc2lvbisrfWdldCB1cGRhdGVSYW5nZSgpe3JldHVybiBycygiVEhSRUUuQnVmZmVyQXR0cmlidXRlOiB1cGRhdGVSYW5nZSgpIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiByMTY5LiBVc2UgYWRkVXBkYXRlUmFuZ2UoKSBpbnN0ZWFkLiIpLHRoaXMuX3VwZGF0ZVJhbmdlfXNldFVzYWdlKHQpe3JldHVybiB0aGlzLnVzYWdlPXQsdGhpc31hZGRVcGRhdGVSYW5nZSh0LGUpe3RoaXMudXBkYXRlUmFuZ2VzLnB1c2goe3N0YXJ0OnQsY291bnQ6ZX0pfWNsZWFyVXBkYXRlUmFuZ2VzKCl7dGhpcy51cGRhdGVSYW5nZXMubGVuZ3RoPTB9Y29weSh0KXtyZXR1cm4gdGhpcy5uYW1lPXQubmFtZSx0aGlzLmFycmF5PW5ldyB0LmFycmF5LmNvbnN0cnVjdG9yKHQuYXJyYXkpLHRoaXMuaXRlbVNpemU9dC5pdGVtU2l6ZSx0aGlzLmNvdW50PXQuY291bnQsdGhpcy5ub3JtYWxpemVkPXQubm9ybWFsaXplZCx0aGlzLnVzYWdlPXQudXNhZ2UsdGhpcy5ncHVUeXBlPXQuZ3B1VHlwZSx0aGlzfWNvcHlBdCh0LGUsaSl7dCo9dGhpcy5pdGVtU2l6ZSxpKj1lLml0ZW1TaXplO2ZvcihsZXQgcz0wLG49dGhpcy5pdGVtU2l6ZTtzPG47cysrKXRoaXMuYXJyYXlbdCtzXT1lLmFycmF5W2krc107cmV0dXJuIHRoaXN9Y29weUFycmF5KHQpe3JldHVybiB0aGlzLmFycmF5LnNldCh0KSx0aGlzfWFwcGx5TWF0cml4Myh0KXtpZih0aGlzLml0ZW1TaXplPT09Milmb3IobGV0IGU9MCxpPXRoaXMuY291bnQ7ZTxpO2UrKyliZS5mcm9tQnVmZmVyQXR0cmlidXRlKHRoaXMsZSksYmUuYXBwbHlNYXRyaXgzKHQpLHRoaXMuc2V0WFkoZSxiZS54LGJlLnkpO2Vsc2UgaWYodGhpcy5pdGVtU2l6ZT09PTMpZm9yKGxldCBlPTAsaT10aGlzLmNvdW50O2U8aTtlKyspSS5mcm9tQnVmZmVyQXR0cmlidXRlKHRoaXMsZSksSS5hcHBseU1hdHJpeDModCksdGhpcy5zZXRYWVooZSxJLngsSS55LEkueik7cmV0dXJuIHRoaXN9YXBwbHlNYXRyaXg0KHQpe2ZvcihsZXQgZT0wLGk9dGhpcy5jb3VudDtlPGk7ZSsrKUkuZnJvbUJ1ZmZlckF0dHJpYnV0ZSh0aGlzLGUpLEkuYXBwbHlNYXRyaXg0KHQpLHRoaXMuc2V0WFlaKGUsSS54LEkueSxJLnopO3JldHVybiB0aGlzfWFwcGx5Tm9ybWFsTWF0cml4KHQpe2ZvcihsZXQgZT0wLGk9dGhpcy5jb3VudDtlPGk7ZSsrKUkuZnJvbUJ1ZmZlckF0dHJpYnV0ZSh0aGlzLGUpLEkuYXBwbHlOb3JtYWxNYXRyaXgodCksdGhpcy5zZXRYWVooZSxJLngsSS55LEkueik7cmV0dXJuIHRoaXN9dHJhbnNmb3JtRGlyZWN0aW9uKHQpe2ZvcihsZXQgZT0wLGk9dGhpcy5jb3VudDtlPGk7ZSsrKUkuZnJvbUJ1ZmZlckF0dHJpYnV0ZSh0aGlzLGUpLEkudHJhbnNmb3JtRGlyZWN0aW9uKHQpLHRoaXMuc2V0WFlaKGUsSS54LEkueSxJLnopO3JldHVybiB0aGlzfXNldCh0LGU9MCl7cmV0dXJuIHRoaXMuYXJyYXkuc2V0KHQsZSksdGhpc31nZXRDb21wb25lbnQodCxlKXtsZXQgaT10aGlzLmFycmF5W3QqdGhpcy5pdGVtU2l6ZStlXTtyZXR1cm4gdGhpcy5ub3JtYWxpemVkJiYoaT1KdChpLHRoaXMuYXJyYXkpKSxpfXNldENvbXBvbmVudCh0LGUsaSl7cmV0dXJuIHRoaXMubm9ybWFsaXplZCYmKGk9TyhpLHRoaXMuYXJyYXkpKSx0aGlzLmFycmF5W3QqdGhpcy5pdGVtU2l6ZStlXT1pLHRoaXN9Z2V0WCh0KXtsZXQgZT10aGlzLmFycmF5W3QqdGhpcy5pdGVtU2l6ZV07cmV0dXJuIHRoaXMubm9ybWFsaXplZCYmKGU9SnQoZSx0aGlzLmFycmF5KSksZX1zZXRYKHQsZSl7cmV0dXJuIHRoaXMubm9ybWFsaXplZCYmKGU9TyhlLHRoaXMuYXJyYXkpKSx0aGlzLmFycmF5W3QqdGhpcy5pdGVtU2l6ZV09ZSx0aGlzfWdldFkodCl7bGV0IGU9dGhpcy5hcnJheVt0KnRoaXMuaXRlbVNpemUrMV07cmV0dXJuIHRoaXMubm9ybWFsaXplZCYmKGU9SnQoZSx0aGlzLmFycmF5KSksZX1zZXRZKHQsZSl7cmV0dXJuIHRoaXMubm9ybWFsaXplZCYmKGU9TyhlLHRoaXMuYXJyYXkpKSx0aGlzLmFycmF5W3QqdGhpcy5pdGVtU2l6ZSsxXT1lLHRoaXN9Z2V0Wih0KXtsZXQgZT10aGlzLmFycmF5W3QqdGhpcy5pdGVtU2l6ZSsyXTtyZXR1cm4gdGhpcy5ub3JtYWxpemVkJiYoZT1KdChlLHRoaXMuYXJyYXkpKSxlfXNldFoodCxlKXtyZXR1cm4gdGhpcy5ub3JtYWxpemVkJiYoZT1PKGUsdGhpcy5hcnJheSkpLHRoaXMuYXJyYXlbdCp0aGlzLml0ZW1TaXplKzJdPWUsdGhpc31nZXRXKHQpe2xldCBlPXRoaXMuYXJyYXlbdCp0aGlzLml0ZW1TaXplKzNdO3JldHVybiB0aGlzLm5vcm1hbGl6ZWQmJihlPUp0KGUsdGhpcy5hcnJheSkpLGV9c2V0Vyh0LGUpe3JldHVybiB0aGlzLm5vcm1hbGl6ZWQmJihlPU8oZSx0aGlzLmFycmF5KSksdGhpcy5hcnJheVt0KnRoaXMuaXRlbVNpemUrM109ZSx0aGlzfXNldFhZKHQsZSxpKXtyZXR1cm4gdCo9dGhpcy5pdGVtU2l6ZSx0aGlzLm5vcm1hbGl6ZWQmJihlPU8oZSx0aGlzLmFycmF5KSxpPU8oaSx0aGlzLmFycmF5KSksdGhpcy5hcnJheVt0KzBdPWUsdGhpcy5hcnJheVt0KzFdPWksdGhpc31zZXRYWVoodCxlLGkscyl7cmV0dXJuIHQqPXRoaXMuaXRlbVNpemUsdGhpcy5ub3JtYWxpemVkJiYoZT1PKGUsdGhpcy5hcnJheSksaT1PKGksdGhpcy5hcnJheSkscz1PKHMsdGhpcy5hcnJheSkpLHRoaXMuYXJyYXlbdCswXT1lLHRoaXMuYXJyYXlbdCsxXT1pLHRoaXMuYXJyYXlbdCsyXT1zLHRoaXN9c2V0WFlaVyh0LGUsaSxzLG4pe3JldHVybiB0Kj10aGlzLml0ZW1TaXplLHRoaXMubm9ybWFsaXplZCYmKGU9TyhlLHRoaXMuYXJyYXkpLGk9TyhpLHRoaXMuYXJyYXkpLHM9TyhzLHRoaXMuYXJyYXkpLG49TyhuLHRoaXMuYXJyYXkpKSx0aGlzLmFycmF5W3QrMF09ZSx0aGlzLmFycmF5W3QrMV09aSx0aGlzLmFycmF5W3QrMl09cyx0aGlzLmFycmF5W3QrM109bix0aGlzfW9uVXBsb2FkKHQpe3JldHVybiB0aGlzLm9uVXBsb2FkQ2FsbGJhY2s9dCx0aGlzfWNsb25lKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuYXJyYXksdGhpcy5pdGVtU2l6ZSkuY29weSh0aGlzKX10b0pTT04oKXtjb25zdCB0PXtpdGVtU2l6ZTp0aGlzLml0ZW1TaXplLHR5cGU6dGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLGFycmF5OkFycmF5LmZyb20odGhpcy5hcnJheSksbm9ybWFsaXplZDp0aGlzLm5vcm1hbGl6ZWR9O3JldHVybiB0aGlzLm5hbWUhPT0iIiYmKHQubmFtZT10aGlzLm5hbWUpLHRoaXMudXNhZ2UhPT0zNTA0NCYmKHQudXNhZ2U9dGhpcy51c2FnZSksdH19Y2xhc3MgYnMgZXh0ZW5kcyBjdHtjb25zdHJ1Y3Rvcih0LGUsaSl7c3VwZXIobmV3IFVpbnQxNkFycmF5KHQpLGUsaSl9fWNsYXNzIHdzIGV4dGVuZHMgY3R7Y29uc3RydWN0b3IodCxlLGkpe3N1cGVyKG5ldyBVaW50MzJBcnJheSh0KSxlLGkpfX1jbGFzcyBfcyBleHRlbmRzIGN0e2NvbnN0cnVjdG9yKHQsZSxpKXtzdXBlcihuZXcgRmxvYXQzMkFycmF5KHQpLGUsaSl9fWxldCBNcz0wO2NvbnN0IEc9bmV3IE4saWk9bmV3IE10LFZ0PW5ldyBBLEg9bmV3IFcsaWU9bmV3IFcsVj1uZXcgQTtjbGFzcyBzaSBleHRlbmRzIFhle2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLmlzQnVmZmVyR2VvbWV0cnk9ITAsT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsImlkIix7dmFsdWU6TXMrK30pLHRoaXMudXVpZD1mZSgpLHRoaXMubmFtZT0iIix0aGlzLnR5cGU9IkJ1ZmZlckdlb21ldHJ5Iix0aGlzLmluZGV4PW51bGwsdGhpcy5hdHRyaWJ1dGVzPXt9LHRoaXMubW9ycGhBdHRyaWJ1dGVzPXt9LHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU9ITEsdGhpcy5ncm91cHM9W10sdGhpcy5ib3VuZGluZ0JveD1udWxsLHRoaXMuYm91bmRpbmdTcGhlcmU9bnVsbCx0aGlzLmRyYXdSYW5nZT17c3RhcnQ6MCxjb3VudDoxLzB9LHRoaXMudXNlckRhdGE9e319Z2V0SW5kZXgoKXtyZXR1cm4gdGhpcy5pbmRleH1zZXRJbmRleCh0KXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT90aGlzLmluZGV4PW5ldyhucyh0KT93czpicykodCwxKTp0aGlzLmluZGV4PXQsdGhpc31nZXRBdHRyaWJ1dGUodCl7cmV0dXJuIHRoaXMuYXR0cmlidXRlc1t0XX1zZXRBdHRyaWJ1dGUodCxlKXtyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW3RdPWUsdGhpc31kZWxldGVBdHRyaWJ1dGUodCl7cmV0dXJuIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbdF0sdGhpc31oYXNBdHRyaWJ1dGUodCl7cmV0dXJuIHRoaXMuYXR0cmlidXRlc1t0XSE9PXZvaWQgMH1hZGRHcm91cCh0LGUsaT0wKXt0aGlzLmdyb3Vwcy5wdXNoKHtzdGFydDp0LGNvdW50OmUsbWF0ZXJpYWxJbmRleDppfSl9Y2xlYXJHcm91cHMoKXt0aGlzLmdyb3Vwcz1bXX1zZXREcmF3UmFuZ2UodCxlKXt0aGlzLmRyYXdSYW5nZS5zdGFydD10LHRoaXMuZHJhd1JhbmdlLmNvdW50PWV9YXBwbHlNYXRyaXg0KHQpe2NvbnN0IGU9dGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO2UhPT12b2lkIDAmJihlLmFwcGx5TWF0cml4NCh0KSxlLm5lZWRzVXBkYXRlPSEwKTtjb25zdCBpPXRoaXMuYXR0cmlidXRlcy5ub3JtYWw7aWYoaSE9PXZvaWQgMCl7Y29uc3Qgbj1uZXcgVHQoKS5nZXROb3JtYWxNYXRyaXgodCk7aS5hcHBseU5vcm1hbE1hdHJpeChuKSxpLm5lZWRzVXBkYXRlPSEwfWNvbnN0IHM9dGhpcy5hdHRyaWJ1dGVzLnRhbmdlbnQ7cmV0dXJuIHMhPT12b2lkIDAmJihzLnRyYW5zZm9ybURpcmVjdGlvbih0KSxzLm5lZWRzVXBkYXRlPSEwKSx0aGlzLmJvdW5kaW5nQm94IT09bnVsbCYmdGhpcy5jb21wdXRlQm91bmRpbmdCb3goKSx0aGlzLmJvdW5kaW5nU3BoZXJlIT09bnVsbCYmdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKSx0aGlzfWFwcGx5UXVhdGVybmlvbih0KXtyZXR1cm4gRy5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbih0KSx0aGlzLmFwcGx5TWF0cml4NChHKSx0aGlzfXJvdGF0ZVgodCl7cmV0dXJuIEcubWFrZVJvdGF0aW9uWCh0KSx0aGlzLmFwcGx5TWF0cml4NChHKSx0aGlzfXJvdGF0ZVkodCl7cmV0dXJuIEcubWFrZVJvdGF0aW9uWSh0KSx0aGlzLmFwcGx5TWF0cml4NChHKSx0aGlzfXJvdGF0ZVoodCl7cmV0dXJuIEcubWFrZVJvdGF0aW9uWih0KSx0aGlzLmFwcGx5TWF0cml4NChHKSx0aGlzfXRyYW5zbGF0ZSh0LGUsaSl7cmV0dXJuIEcubWFrZVRyYW5zbGF0aW9uKHQsZSxpKSx0aGlzLmFwcGx5TWF0cml4NChHKSx0aGlzfXNjYWxlKHQsZSxpKXtyZXR1cm4gRy5tYWtlU2NhbGUodCxlLGkpLHRoaXMuYXBwbHlNYXRyaXg0KEcpLHRoaXN9bG9va0F0KHQpe3JldHVybiBpaS5sb29rQXQodCksaWkudXBkYXRlTWF0cml4KCksdGhpcy5hcHBseU1hdHJpeDQoaWkubWF0cml4KSx0aGlzfWNlbnRlcigpe3JldHVybiB0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpLHRoaXMuYm91bmRpbmdCb3guZ2V0Q2VudGVyKFZ0KS5uZWdhdGUoKSx0aGlzLnRyYW5zbGF0ZShWdC54LFZ0LnksVnQueiksdGhpc31zZXRGcm9tUG9pbnRzKHQpe2NvbnN0IGU9W107Zm9yKGxldCBpPTAscz10Lmxlbmd0aDtpPHM7aSsrKXtjb25zdCBuPXRbaV07ZS5wdXNoKG4ueCxuLnksbi56fHwwKX1yZXR1cm4gdGhpcy5zZXRBdHRyaWJ1dGUoInBvc2l0aW9uIixuZXcgX3MoZSwzKSksdGhpc31jb21wdXRlQm91bmRpbmdCb3goKXt0aGlzLmJvdW5kaW5nQm94PT09bnVsbCYmKHRoaXMuYm91bmRpbmdCb3g9bmV3IFcpO2NvbnN0IHQ9dGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uLGU9dGhpcy5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247aWYodCYmdC5pc0dMQnVmZmVyQXR0cmlidXRlKXtjb25zb2xlLmVycm9yKCJUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTogR0xCdWZmZXJBdHRyaWJ1dGUgcmVxdWlyZXMgYSBtYW51YWwgYm91bmRpbmcgYm94LiIsdGhpcyksdGhpcy5ib3VuZGluZ0JveC5zZXQobmV3IEEoLTEvMCwtMS8wLC0xLzApLG5ldyBBKDEvMCwxLzAsMS8wKSk7cmV0dXJufWlmKHQhPT12b2lkIDApe2lmKHRoaXMuYm91bmRpbmdCb3guc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSh0KSxlKWZvcihsZXQgaT0wLHM9ZS5sZW5ndGg7aTxzO2krKyl7Y29uc3Qgbj1lW2ldO0guc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZShuKSx0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlPyhWLmFkZFZlY3RvcnModGhpcy5ib3VuZGluZ0JveC5taW4sSC5taW4pLHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludChWKSxWLmFkZFZlY3RvcnModGhpcy5ib3VuZGluZ0JveC5tYXgsSC5tYXgpLHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludChWKSk6KHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludChILm1pbiksdGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KEgubWF4KSl9fWVsc2UgdGhpcy5ib3VuZGluZ0JveC5tYWtlRW1wdHkoKTsoaXNOYU4odGhpcy5ib3VuZGluZ0JveC5taW4ueCl8fGlzTmFOKHRoaXMuYm91bmRpbmdCb3gubWluLnkpfHxpc05hTih0aGlzLmJvdW5kaW5nQm94Lm1pbi56KSkmJmNvbnNvbGUuZXJyb3IoJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpOiBDb21wdXRlZCBtaW4vbWF4IGhhdmUgTmFOIHZhbHVlcy4gVGhlICJwb3NpdGlvbiIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJyx0aGlzKX1jb21wdXRlQm91bmRpbmdTcGhlcmUoKXt0aGlzLmJvdW5kaW5nU3BoZXJlPT09bnVsbCYmKHRoaXMuYm91bmRpbmdTcGhlcmU9bmV3IEVpKTtjb25zdCB0PXRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbixlPXRoaXMubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO2lmKHQmJnQuaXNHTEJ1ZmZlckF0dHJpYnV0ZSl7Y29uc29sZS5lcnJvcigiVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk6IEdMQnVmZmVyQXR0cmlidXRlIHJlcXVpcmVzIGEgbWFudWFsIGJvdW5kaW5nIHNwaGVyZS4iLHRoaXMpLHRoaXMuYm91bmRpbmdTcGhlcmUuc2V0KG5ldyBBLDEvMCk7cmV0dXJufWlmKHQpe2NvbnN0IGk9dGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7aWYoSC5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKHQpLGUpZm9yKGxldCBuPTAscj1lLmxlbmd0aDtuPHI7bisrKXtjb25zdCBhPWVbbl07aWUuc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZShhKSx0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlPyhWLmFkZFZlY3RvcnMoSC5taW4saWUubWluKSxILmV4cGFuZEJ5UG9pbnQoViksVi5hZGRWZWN0b3JzKEgubWF4LGllLm1heCksSC5leHBhbmRCeVBvaW50KFYpKTooSC5leHBhbmRCeVBvaW50KGllLm1pbiksSC5leHBhbmRCeVBvaW50KGllLm1heCkpfUguZ2V0Q2VudGVyKGkpO2xldCBzPTA7Zm9yKGxldCBuPTAscj10LmNvdW50O248cjtuKyspVi5mcm9tQnVmZmVyQXR0cmlidXRlKHQsbikscz1NYXRoLm1heChzLGkuZGlzdGFuY2VUb1NxdWFyZWQoVikpO2lmKGUpZm9yKGxldCBuPTAscj1lLmxlbmd0aDtuPHI7bisrKXtjb25zdCBhPWVbbl0sbz10aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO2ZvcihsZXQgaD0wLGM9YS5jb3VudDtoPGM7aCsrKVYuZnJvbUJ1ZmZlckF0dHJpYnV0ZShhLGgpLG8mJihWdC5mcm9tQnVmZmVyQXR0cmlidXRlKHQsaCksVi5hZGQoVnQpKSxzPU1hdGgubWF4KHMsaS5kaXN0YW5jZVRvU3F1YXJlZChWKSl9dGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXM9TWF0aC5zcXJ0KHMpLGlzTmFOKHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzKSYmY29uc29sZS5lcnJvcignVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk6IENvbXB1dGVkIHJhZGl1cyBpcyBOYU4uIFRoZSAicG9zaXRpb24iIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsdGhpcyl9fWNvbXB1dGVUYW5nZW50cygpe2NvbnN0IHQ9dGhpcy5pbmRleCxlPXRoaXMuYXR0cmlidXRlcztpZih0PT09bnVsbHx8ZS5wb3NpdGlvbj09PXZvaWQgMHx8ZS5ub3JtYWw9PT12b2lkIDB8fGUudXY9PT12b2lkIDApe2NvbnNvbGUuZXJyb3IoIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgZmFpbGVkLiBNaXNzaW5nIHJlcXVpcmVkIGF0dHJpYnV0ZXMgKGluZGV4LCBwb3NpdGlvbiwgbm9ybWFsIG9yIHV2KSIpO3JldHVybn1jb25zdCBpPWUucG9zaXRpb24scz1lLm5vcm1hbCxuPWUudXY7dGhpcy5oYXNBdHRyaWJ1dGUoInRhbmdlbnQiKT09PSExJiZ0aGlzLnNldEF0dHJpYnV0ZSgidGFuZ2VudCIsbmV3IGN0KG5ldyBGbG9hdDMyQXJyYXkoNCppLmNvdW50KSw0KSk7Y29uc3Qgcj10aGlzLmdldEF0dHJpYnV0ZSgidGFuZ2VudCIpLGE9W10sbz1bXTtmb3IobGV0IFM9MDtTPGkuY291bnQ7UysrKWFbU109bmV3IEEsb1tTXT1uZXcgQTtjb25zdCBoPW5ldyBBLGM9bmV3IEEsZj1uZXcgQSxsPW5ldyB2LGQ9bmV3IHYscD1uZXcgdix5PW5ldyBBLHg9bmV3IEE7ZnVuY3Rpb24gbShTLEIsVCl7aC5mcm9tQnVmZmVyQXR0cmlidXRlKGksUyksYy5mcm9tQnVmZmVyQXR0cmlidXRlKGksQiksZi5mcm9tQnVmZmVyQXR0cmlidXRlKGksVCksbC5mcm9tQnVmZmVyQXR0cmlidXRlKG4sUyksZC5mcm9tQnVmZmVyQXR0cmlidXRlKG4sQikscC5mcm9tQnVmZmVyQXR0cmlidXRlKG4sVCksYy5zdWIoaCksZi5zdWIoaCksZC5zdWIobCkscC5zdWIobCk7Y29uc3QgQz0xLyhkLngqcC55LXAueCpkLnkpO2lzRmluaXRlKEMpJiYoeS5jb3B5KGMpLm11bHRpcGx5U2NhbGFyKHAueSkuYWRkU2NhbGVkVmVjdG9yKGYsLWQueSkubXVsdGlwbHlTY2FsYXIoQykseC5jb3B5KGYpLm11bHRpcGx5U2NhbGFyKGQueCkuYWRkU2NhbGVkVmVjdG9yKGMsLXAueCkubXVsdGlwbHlTY2FsYXIoQyksYVtTXS5hZGQoeSksYVtCXS5hZGQoeSksYVtUXS5hZGQoeSksb1tTXS5hZGQoeCksb1tCXS5hZGQoeCksb1tUXS5hZGQoeCkpfWxldCBnPXRoaXMuZ3JvdXBzO2cubGVuZ3RoPT09MCYmKGc9W3tzdGFydDowLGNvdW50OnQuY291bnR9XSk7Zm9yKGxldCBTPTAsQj1nLmxlbmd0aDtTPEI7KytTKXtjb25zdCBUPWdbU10sQz1ULnN0YXJ0LFA9VC5jb3VudDtmb3IobGV0IEU9QyxGPUMrUDtFPEY7RSs9MyltKHQuZ2V0WChFKzApLHQuZ2V0WChFKzEpLHQuZ2V0WChFKzIpKX1jb25zdCB3PW5ldyBBLE09bmV3IEEsYj1uZXcgQSx6PW5ldyBBO2Z1bmN0aW9uIF8oUyl7Yi5mcm9tQnVmZmVyQXR0cmlidXRlKHMsUyksei5jb3B5KGIpO2NvbnN0IEI9YVtTXTt3LmNvcHkoQiksdy5zdWIoYi5tdWx0aXBseVNjYWxhcihiLmRvdChCKSkpLm5vcm1hbGl6ZSgpLE0uY3Jvc3NWZWN0b3JzKHosQik7Y29uc3QgQz1NLmRvdChvW1NdKTwwPy0xOjE7ci5zZXRYWVpXKFMsdy54LHcueSx3LnosQyl9Zm9yKGxldCBTPTAsQj1nLmxlbmd0aDtTPEI7KytTKXtjb25zdCBUPWdbU10sQz1ULnN0YXJ0LFA9VC5jb3VudDtmb3IobGV0IEU9QyxGPUMrUDtFPEY7RSs9MylfKHQuZ2V0WChFKzApKSxfKHQuZ2V0WChFKzEpKSxfKHQuZ2V0WChFKzIpKX19Y29tcHV0ZVZlcnRleE5vcm1hbHMoKXtjb25zdCB0PXRoaXMuaW5kZXgsZT10aGlzLmdldEF0dHJpYnV0ZSgicG9zaXRpb24iKTtpZihlIT09dm9pZCAwKXtsZXQgaT10aGlzLmdldEF0dHJpYnV0ZSgibm9ybWFsIik7aWYoaT09PXZvaWQgMClpPW5ldyBjdChuZXcgRmxvYXQzMkFycmF5KGUuY291bnQqMyksMyksdGhpcy5zZXRBdHRyaWJ1dGUoIm5vcm1hbCIsaSk7ZWxzZSBmb3IobGV0IGw9MCxkPWkuY291bnQ7bDxkO2wrKylpLnNldFhZWihsLDAsMCwwKTtjb25zdCBzPW5ldyBBLG49bmV3IEEscj1uZXcgQSxhPW5ldyBBLG89bmV3IEEsaD1uZXcgQSxjPW5ldyBBLGY9bmV3IEE7aWYodClmb3IobGV0IGw9MCxkPXQuY291bnQ7bDxkO2wrPTMpe2NvbnN0IHA9dC5nZXRYKGwrMCkseT10LmdldFgobCsxKSx4PXQuZ2V0WChsKzIpO3MuZnJvbUJ1ZmZlckF0dHJpYnV0ZShlLHApLG4uZnJvbUJ1ZmZlckF0dHJpYnV0ZShlLHkpLHIuZnJvbUJ1ZmZlckF0dHJpYnV0ZShlLHgpLGMuc3ViVmVjdG9ycyhyLG4pLGYuc3ViVmVjdG9ycyhzLG4pLGMuY3Jvc3MoZiksYS5mcm9tQnVmZmVyQXR0cmlidXRlKGkscCksby5mcm9tQnVmZmVyQXR0cmlidXRlKGkseSksaC5mcm9tQnVmZmVyQXR0cmlidXRlKGkseCksYS5hZGQoYyksby5hZGQoYyksaC5hZGQoYyksaS5zZXRYWVoocCxhLngsYS55LGEueiksaS5zZXRYWVooeSxvLngsby55LG8ueiksaS5zZXRYWVooeCxoLngsaC55LGgueil9ZWxzZSBmb3IobGV0IGw9MCxkPWUuY291bnQ7bDxkO2wrPTMpcy5mcm9tQnVmZmVyQXR0cmlidXRlKGUsbCswKSxuLmZyb21CdWZmZXJBdHRyaWJ1dGUoZSxsKzEpLHIuZnJvbUJ1ZmZlckF0dHJpYnV0ZShlLGwrMiksYy5zdWJWZWN0b3JzKHIsbiksZi5zdWJWZWN0b3JzKHMsbiksYy5jcm9zcyhmKSxpLnNldFhZWihsKzAsYy54LGMueSxjLnopLGkuc2V0WFlaKGwrMSxjLngsYy55LGMueiksaS5zZXRYWVoobCsyLGMueCxjLnksYy56KTt0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKSxpLm5lZWRzVXBkYXRlPSEwfX1ub3JtYWxpemVOb3JtYWxzKCl7Y29uc3QgdD10aGlzLmF0dHJpYnV0ZXMubm9ybWFsO2ZvcihsZXQgZT0wLGk9dC5jb3VudDtlPGk7ZSsrKVYuZnJvbUJ1ZmZlckF0dHJpYnV0ZSh0LGUpLFYubm9ybWFsaXplKCksdC5zZXRYWVooZSxWLngsVi55LFYueil9dG9Ob25JbmRleGVkKCl7ZnVuY3Rpb24gdChhLG8pe2NvbnN0IGg9YS5hcnJheSxjPWEuaXRlbVNpemUsZj1hLm5vcm1hbGl6ZWQsbD1uZXcgaC5jb25zdHJ1Y3RvcihvLmxlbmd0aCpjKTtsZXQgZD0wLHA9MDtmb3IobGV0IHk9MCx4PW8ubGVuZ3RoO3k8eDt5Kyspe2EuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZT9kPW9beV0qYS5kYXRhLnN0cmlkZSthLm9mZnNldDpkPW9beV0qYztmb3IobGV0IG09MDttPGM7bSsrKWxbcCsrXT1oW2QrK119cmV0dXJuIG5ldyBjdChsLGMsZil9aWYodGhpcy5pbmRleD09PW51bGwpcmV0dXJuIGNvbnNvbGUud2FybigiVEhSRUUuQnVmZmVyR2VvbWV0cnkudG9Ob25JbmRleGVkKCk6IEJ1ZmZlckdlb21ldHJ5IGlzIGFscmVhZHkgbm9uLWluZGV4ZWQuIiksdGhpcztjb25zdCBlPW5ldyBzaSxpPXRoaXMuaW5kZXguYXJyYXkscz10aGlzLmF0dHJpYnV0ZXM7Zm9yKGNvbnN0IGEgaW4gcyl7Y29uc3Qgbz1zW2FdLGg9dChvLGkpO2Uuc2V0QXR0cmlidXRlKGEsaCl9Y29uc3Qgbj10aGlzLm1vcnBoQXR0cmlidXRlcztmb3IoY29uc3QgYSBpbiBuKXtjb25zdCBvPVtdLGg9blthXTtmb3IobGV0IGM9MCxmPWgubGVuZ3RoO2M8ZjtjKyspe2NvbnN0IGw9aFtjXSxkPXQobCxpKTtvLnB1c2goZCl9ZS5tb3JwaEF0dHJpYnV0ZXNbYV09b31lLm1vcnBoVGFyZ2V0c1JlbGF0aXZlPXRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU7Y29uc3Qgcj10aGlzLmdyb3Vwcztmb3IobGV0IGE9MCxvPXIubGVuZ3RoO2E8bzthKyspe2NvbnN0IGg9clthXTtlLmFkZEdyb3VwKGguc3RhcnQsaC5jb3VudCxoLm1hdGVyaWFsSW5kZXgpfXJldHVybiBlfXRvSlNPTigpe2NvbnN0IHQ9e21ldGFkYXRhOnt2ZXJzaW9uOjQuNix0eXBlOiJCdWZmZXJHZW9tZXRyeSIsZ2VuZXJhdG9yOiJCdWZmZXJHZW9tZXRyeS50b0pTT04ifX07aWYodC51dWlkPXRoaXMudXVpZCx0LnR5cGU9dGhpcy50eXBlLHRoaXMubmFtZSE9PSIiJiYodC5uYW1lPXRoaXMubmFtZSksT2JqZWN0LmtleXModGhpcy51c2VyRGF0YSkubGVuZ3RoPjAmJih0LnVzZXJEYXRhPXRoaXMudXNlckRhdGEpLHRoaXMucGFyYW1ldGVycyE9PXZvaWQgMCl7Y29uc3Qgbz10aGlzLnBhcmFtZXRlcnM7Zm9yKGNvbnN0IGggaW4gbylvW2hdIT09dm9pZCAwJiYodFtoXT1vW2hdKTtyZXR1cm4gdH10LmRhdGE9e2F0dHJpYnV0ZXM6e319O2NvbnN0IGU9dGhpcy5pbmRleDtlIT09bnVsbCYmKHQuZGF0YS5pbmRleD17dHlwZTplLmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsYXJyYXk6QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZS5hcnJheSl9KTtjb25zdCBpPXRoaXMuYXR0cmlidXRlcztmb3IoY29uc3QgbyBpbiBpKXtjb25zdCBoPWlbb107dC5kYXRhLmF0dHJpYnV0ZXNbb109aC50b0pTT04odC5kYXRhKX1jb25zdCBzPXt9O2xldCBuPSExO2Zvcihjb25zdCBvIGluIHRoaXMubW9ycGhBdHRyaWJ1dGVzKXtjb25zdCBoPXRoaXMubW9ycGhBdHRyaWJ1dGVzW29dLGM9W107Zm9yKGxldCBmPTAsbD1oLmxlbmd0aDtmPGw7ZisrKXtjb25zdCBkPWhbZl07Yy5wdXNoKGQudG9KU09OKHQuZGF0YSkpfWMubGVuZ3RoPjAmJihzW29dPWMsbj0hMCl9biYmKHQuZGF0YS5tb3JwaEF0dHJpYnV0ZXM9cyx0LmRhdGEubW9ycGhUYXJnZXRzUmVsYXRpdmU9dGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSk7Y29uc3Qgcj10aGlzLmdyb3VwcztyLmxlbmd0aD4wJiYodC5kYXRhLmdyb3Vwcz1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHIpKSk7Y29uc3QgYT10aGlzLmJvdW5kaW5nU3BoZXJlO3JldHVybiBhIT09bnVsbCYmKHQuZGF0YS5ib3VuZGluZ1NwaGVyZT17Y2VudGVyOmEuY2VudGVyLnRvQXJyYXkoKSxyYWRpdXM6YS5yYWRpdXN9KSx0fWNsb25lKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSh0aGlzKX1jb3B5KHQpe3RoaXMuaW5kZXg9bnVsbCx0aGlzLmF0dHJpYnV0ZXM9e30sdGhpcy5tb3JwaEF0dHJpYnV0ZXM9e30sdGhpcy5ncm91cHM9W10sdGhpcy5ib3VuZGluZ0JveD1udWxsLHRoaXMuYm91bmRpbmdTcGhlcmU9bnVsbDtjb25zdCBlPXt9O3RoaXMubmFtZT10Lm5hbWU7Y29uc3QgaT10LmluZGV4O2khPT1udWxsJiZ0aGlzLnNldEluZGV4KGkuY2xvbmUoZSkpO2NvbnN0IHM9dC5hdHRyaWJ1dGVzO2Zvcihjb25zdCBoIGluIHMpe2NvbnN0IGM9c1toXTt0aGlzLnNldEF0dHJpYnV0ZShoLGMuY2xvbmUoZSkpfWNvbnN0IG49dC5tb3JwaEF0dHJpYnV0ZXM7Zm9yKGNvbnN0IGggaW4gbil7Y29uc3QgYz1bXSxmPW5baF07Zm9yKGxldCBsPTAsZD1mLmxlbmd0aDtsPGQ7bCsrKWMucHVzaChmW2xdLmNsb25lKGUpKTt0aGlzLm1vcnBoQXR0cmlidXRlc1toXT1jfXRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU9dC5tb3JwaFRhcmdldHNSZWxhdGl2ZTtjb25zdCByPXQuZ3JvdXBzO2ZvcihsZXQgaD0wLGM9ci5sZW5ndGg7aDxjO2grKyl7Y29uc3QgZj1yW2hdO3RoaXMuYWRkR3JvdXAoZi5zdGFydCxmLmNvdW50LGYubWF0ZXJpYWxJbmRleCl9Y29uc3QgYT10LmJvdW5kaW5nQm94O2EhPT1udWxsJiYodGhpcy5ib3VuZGluZ0JveD1hLmNsb25lKCkpO2NvbnN0IG89dC5ib3VuZGluZ1NwaGVyZTtyZXR1cm4gbyE9PW51bGwmJih0aGlzLmJvdW5kaW5nU3BoZXJlPW8uY2xvbmUoKSksdGhpcy5kcmF3UmFuZ2Uuc3RhcnQ9dC5kcmF3UmFuZ2Uuc3RhcnQsdGhpcy5kcmF3UmFuZ2UuY291bnQ9dC5kcmF3UmFuZ2UuY291bnQsdGhpcy51c2VyRGF0YT10LnVzZXJEYXRhLHRoaXN9ZGlzcG9zZSgpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZToiZGlzcG9zZSJ9KX19Y29uc3Qgbmk9bmV3IEEsQXM9bmV3IEEsenM9bmV3IFR0O2NsYXNzIFZpe2NvbnN0cnVjdG9yKHQ9bmV3IEEoMSwwLDApLGU9MCl7dGhpcy5pc1BsYW5lPSEwLHRoaXMubm9ybWFsPXQsdGhpcy5jb25zdGFudD1lfXNldCh0LGUpe3JldHVybiB0aGlzLm5vcm1hbC5jb3B5KHQpLHRoaXMuY29uc3RhbnQ9ZSx0aGlzfXNldENvbXBvbmVudHModCxlLGkscyl7cmV0dXJuIHRoaXMubm9ybWFsLnNldCh0LGUsaSksdGhpcy5jb25zdGFudD1zLHRoaXN9c2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQodCxlKXtyZXR1cm4gdGhpcy5ub3JtYWwuY29weSh0KSx0aGlzLmNvbnN0YW50PS1lLmRvdCh0aGlzLm5vcm1hbCksdGhpc31zZXRGcm9tQ29wbGFuYXJQb2ludHModCxlLGkpe2NvbnN0IHM9bmkuc3ViVmVjdG9ycyhpLGUpLmNyb3NzKEFzLnN1YlZlY3RvcnModCxlKSkubm9ybWFsaXplKCk7cmV0dXJuIHRoaXMuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQocyx0KSx0aGlzfWNvcHkodCl7cmV0dXJuIHRoaXMubm9ybWFsLmNvcHkodC5ub3JtYWwpLHRoaXMuY29uc3RhbnQ9dC5jb25zdGFudCx0aGlzfW5vcm1hbGl6ZSgpe2NvbnN0IHQ9MS90aGlzLm5vcm1hbC5sZW5ndGgoKTtyZXR1cm4gdGhpcy5ub3JtYWwubXVsdGlwbHlTY2FsYXIodCksdGhpcy5jb25zdGFudCo9dCx0aGlzfW5lZ2F0ZSgpe3JldHVybiB0aGlzLmNvbnN0YW50Kj0tMSx0aGlzLm5vcm1hbC5uZWdhdGUoKSx0aGlzfWRpc3RhbmNlVG9Qb2ludCh0KXtyZXR1cm4gdGhpcy5ub3JtYWwuZG90KHQpK3RoaXMuY29uc3RhbnR9ZGlzdGFuY2VUb1NwaGVyZSh0KXtyZXR1cm4gdGhpcy5kaXN0YW5jZVRvUG9pbnQodC5jZW50ZXIpLXQucmFkaXVzfXByb2plY3RQb2ludCh0LGUpe3JldHVybiBlLmNvcHkodCkuYWRkU2NhbGVkVmVjdG9yKHRoaXMubm9ybWFsLC10aGlzLmRpc3RhbmNlVG9Qb2ludCh0KSl9aW50ZXJzZWN0TGluZSh0LGUpe2NvbnN0IGk9dC5kZWx0YShuaSkscz10aGlzLm5vcm1hbC5kb3QoaSk7aWYocz09PTApcmV0dXJuIHRoaXMuZGlzdGFuY2VUb1BvaW50KHQuc3RhcnQpPT09MD9lLmNvcHkodC5zdGFydCk6bnVsbDtjb25zdCBuPS0odC5zdGFydC5kb3QodGhpcy5ub3JtYWwpK3RoaXMuY29uc3RhbnQpL3M7cmV0dXJuIG48MHx8bj4xP251bGw6ZS5jb3B5KHQuc3RhcnQpLmFkZFNjYWxlZFZlY3RvcihpLG4pfWludGVyc2VjdHNMaW5lKHQpe2NvbnN0IGU9dGhpcy5kaXN0YW5jZVRvUG9pbnQodC5zdGFydCksaT10aGlzLmRpc3RhbmNlVG9Qb2ludCh0LmVuZCk7cmV0dXJuIGU8MCYmaT4wfHxpPDAmJmU+MH1pbnRlcnNlY3RzQm94KHQpe3JldHVybiB0LmludGVyc2VjdHNQbGFuZSh0aGlzKX1pbnRlcnNlY3RzU3BoZXJlKHQpe3JldHVybiB0LmludGVyc2VjdHNQbGFuZSh0aGlzKX1jb3BsYW5hclBvaW50KHQpe3JldHVybiB0LmNvcHkodGhpcy5ub3JtYWwpLm11bHRpcGx5U2NhbGFyKC10aGlzLmNvbnN0YW50KX1hcHBseU1hdHJpeDQodCxlKXtjb25zdCBpPWV8fHpzLmdldE5vcm1hbE1hdHJpeCh0KSxzPXRoaXMuY29wbGFuYXJQb2ludChuaSkuYXBwbHlNYXRyaXg0KHQpLG49dGhpcy5ub3JtYWwuYXBwbHlNYXRyaXgzKGkpLm5vcm1hbGl6ZSgpO3JldHVybiB0aGlzLmNvbnN0YW50PS1zLmRvdChuKSx0aGlzfXRyYW5zbGF0ZSh0KXtyZXR1cm4gdGhpcy5jb25zdGFudC09dC5kb3QodGhpcy5ub3JtYWwpLHRoaXN9ZXF1YWxzKHQpe3JldHVybiB0Lm5vcm1hbC5lcXVhbHModGhpcy5ub3JtYWwpJiZ0LmNvbnN0YW50PT09dGhpcy5jb25zdGFudH1jbG9uZSgpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyl9fWNsYXNzIFNzIGV4dGVuZHMgZ3R7Y29uc3RydWN0b3IodCxlLGkscyxuLHIsYSxvLGgsYyl7aWYoYz1jIT09dm9pZCAwP2M6MTAyNixjIT09MTAyNiYmYyE9PTEwMjcpdGhyb3cgbmV3IEVycm9yKCJEZXB0aFRleHR1cmUgZm9ybWF0IG11c3QgYmUgZWl0aGVyIFRIUkVFLkRlcHRoRm9ybWF0IG9yIFRIUkVFLkRlcHRoU3RlbmNpbEZvcm1hdCIpO2k9PT12b2lkIDAmJmM9PT0xMDI2JiYoaT0xMDE0KSxpPT09dm9pZCAwJiZjPT09MTAyNyYmKGk9MTAyMCksc3VwZXIobnVsbCxzLG4scixhLG8sYyxpLGgpLHRoaXMuaXNEZXB0aFRleHR1cmU9ITAsdGhpcy5pbWFnZT17d2lkdGg6dCxoZWlnaHQ6ZX0sdGhpcy5tYWdGaWx0ZXI9YSE9PXZvaWQgMD9hOjEwMDMsdGhpcy5taW5GaWx0ZXI9byE9PXZvaWQgMD9vOjEwMDMsdGhpcy5mbGlwWT0hMSx0aGlzLmdlbmVyYXRlTWlwbWFwcz0hMSx0aGlzLmNvbXBhcmVGdW5jdGlvbj1udWxsfWNvcHkodCl7cmV0dXJuIHN1cGVyLmNvcHkodCksdGhpcy5jb21wYXJlRnVuY3Rpb249dC5jb21wYXJlRnVuY3Rpb24sdGhpc310b0pTT04odCl7Y29uc3QgZT1zdXBlci50b0pTT04odCk7cmV0dXJuIHRoaXMuY29tcGFyZUZ1bmN0aW9uIT09bnVsbCYmKGUuY29tcGFyZUZ1bmN0aW9uPXRoaXMuY29tcGFyZUZ1bmN0aW9uKSxlfX1jb25zdCBCcz1uZXcgU3MoMSwxKTtCcy5jb21wYXJlRnVuY3Rpb249NTE1O2NvbnN0IE5pPW5ldyBBLHdlPW5ldyBBO2NsYXNzIG10e2NvbnN0cnVjdG9yKHQ9bmV3IEEsZT1uZXcgQSl7dGhpcy5zdGFydD10LHRoaXMuZW5kPWV9c2V0KHQsZSl7cmV0dXJuIHRoaXMuc3RhcnQuY29weSh0KSx0aGlzLmVuZC5jb3B5KGUpLHRoaXN9Y29weSh0KXtyZXR1cm4gdGhpcy5zdGFydC5jb3B5KHQuc3RhcnQpLHRoaXMuZW5kLmNvcHkodC5lbmQpLHRoaXN9Z2V0Q2VudGVyKHQpe3JldHVybiB0LmFkZFZlY3RvcnModGhpcy5zdGFydCx0aGlzLmVuZCkubXVsdGlwbHlTY2FsYXIoLjUpfWRlbHRhKHQpe3JldHVybiB0LnN1YlZlY3RvcnModGhpcy5lbmQsdGhpcy5zdGFydCl9ZGlzdGFuY2VTcSgpe3JldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG9TcXVhcmVkKHRoaXMuZW5kKX1kaXN0YW5jZSgpe3JldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG8odGhpcy5lbmQpfWF0KHQsZSl7cmV0dXJuIHRoaXMuZGVsdGEoZSkubXVsdGlwbHlTY2FsYXIodCkuYWRkKHRoaXMuc3RhcnQpfWNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIodCxlKXtOaS5zdWJWZWN0b3JzKHQsdGhpcy5zdGFydCksd2Uuc3ViVmVjdG9ycyh0aGlzLmVuZCx0aGlzLnN0YXJ0KTtjb25zdCBpPXdlLmRvdCh3ZSk7bGV0IG49d2UuZG90KE5pKS9pO3JldHVybiBlJiYobj1hdChuLDAsMSkpLG59Y2xvc2VzdFBvaW50VG9Qb2ludCh0LGUsaSl7Y29uc3Qgcz10aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIodCxlKTtyZXR1cm4gdGhpcy5kZWx0YShpKS5tdWx0aXBseVNjYWxhcihzKS5hZGQodGhpcy5zdGFydCl9YXBwbHlNYXRyaXg0KHQpe3JldHVybiB0aGlzLnN0YXJ0LmFwcGx5TWF0cml4NCh0KSx0aGlzLmVuZC5hcHBseU1hdHJpeDQodCksdGhpc31lcXVhbHModCl7cmV0dXJuIHQuc3RhcnQuZXF1YWxzKHRoaXMuc3RhcnQpJiZ0LmVuZC5lcXVhbHModGhpcy5lbmQpfWNsb25lKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSh0aGlzKX19dHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXzwidSImJl9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgicmVnaXN0ZXIiLHtkZXRhaWw6e3JldmlzaW9uOldlfX0pKSx0eXBlb2Ygd2luZG93PCJ1IiYmKHdpbmRvdy5fX1RIUkVFX18/Y29uc29sZS53YXJuKCJXQVJOSU5HOiBNdWx0aXBsZSBpbnN0YW5jZXMgb2YgVGhyZWUuanMgYmVpbmcgaW1wb3J0ZWQuIEV4aXN0aW5nOiAiK3dpbmRvdy5fX1RIUkVFX18rIiwgbmV3OiAiK1dlKTp3aW5kb3cuX19USFJFRV9fPVdlKTtjb25zdCBxaT0wLFRzPTEsUHM9Mix2aT0yLHJpPTEuMjUsV2k9MSxzZT02KjQrNCs0LF9lPTY1NTM1LENzPU1hdGgucG93KDIsLTI0KSxvaT1TeW1ib2woIlNLSVBfR0VORVJBVElPTiIpO2Z1bmN0aW9uIEVzKHUpe3JldHVybiB1LmluZGV4P3UuaW5kZXguY291bnQ6dS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50fWZ1bmN0aW9uIE50KHUpe3JldHVybiBFcyh1KS8zfWZ1bmN0aW9uIEZzKHUsdD1BcnJheUJ1ZmZlcil7cmV0dXJuIHU+NjU1MzU/bmV3IFVpbnQzMkFycmF5KG5ldyB0KDQqdSkpOm5ldyBVaW50MTZBcnJheShuZXcgdCgyKnUpKX1mdW5jdGlvbiBVcyh1LHQpe2lmKCF1LmluZGV4KXtjb25zdCBlPXUuYXR0cmlidXRlcy5wb3NpdGlvbi5jb3VudCxpPXQudXNlU2hhcmVkQXJyYXlCdWZmZXI/U2hhcmVkQXJyYXlCdWZmZXI6QXJyYXlCdWZmZXIscz1GcyhlLGkpO3Uuc2V0SW5kZXgobmV3IGN0KHMsMSkpO2ZvcihsZXQgbj0wO248ZTtuKyspc1tuXT1ufX1mdW5jdGlvbiBYaSh1LHQpe2NvbnN0IGU9TnQodSksaT10fHx1LmRyYXdSYW5nZSxzPWkuc3RhcnQvMyxuPShpLnN0YXJ0K2kuY291bnQpLzMscj1NYXRoLm1heCgwLHMpLGE9TWF0aC5taW4oZSxuKS1yO3JldHVyblt7b2Zmc2V0Ok1hdGguZmxvb3IociksY291bnQ6TWF0aC5mbG9vcihhKX1dfWZ1bmN0aW9uIE9pKHUsdCl7aWYoIXUuZ3JvdXBzfHwhdS5ncm91cHMubGVuZ3RoKXJldHVybiBYaSh1LHQpO2NvbnN0IGU9W10saT1uZXcgU2V0LHM9dHx8dS5kcmF3UmFuZ2Usbj1zLnN0YXJ0LzMscj0ocy5zdGFydCtzLmNvdW50KS8zO2Zvcihjb25zdCBvIG9mIHUuZ3JvdXBzKXtjb25zdCBoPW8uc3RhcnQvMyxjPShvLnN0YXJ0K28uY291bnQpLzM7aS5hZGQoTWF0aC5tYXgobixoKSksaS5hZGQoTWF0aC5taW4ocixjKSl9Y29uc3QgYT1BcnJheS5mcm9tKGkudmFsdWVzKCkpLnNvcnQoKG8saCk9Pm8taCk7Zm9yKGxldCBvPTA7bzxhLmxlbmd0aC0xO28rKyl7Y29uc3QgaD1hW29dLGM9YVtvKzFdO2UucHVzaCh7b2Zmc2V0Ok1hdGguZmxvb3IoaCksY291bnQ6TWF0aC5mbG9vcihjLWgpfSl9cmV0dXJuIGV9ZnVuY3Rpb24gUnModSx0KXtjb25zdCBlPU50KHUpLGk9T2kodSx0KS5zb3J0KChyLGEpPT5yLm9mZnNldC1hLm9mZnNldCkscz1pW2kubGVuZ3RoLTFdO3MuY291bnQ9TWF0aC5taW4oZS1zLm9mZnNldCxzLmNvdW50KTtsZXQgbj0wO3JldHVybiBpLmZvckVhY2goKHtjb3VudDpyfSk9Pm4rPXIpLGUhPT1ufWZ1bmN0aW9uIGFpKHUsdCxlLGkscyl7bGV0IG49MS8wLHI9MS8wLGE9MS8wLG89LTEvMCxoPS0xLzAsYz0tMS8wLGY9MS8wLGw9MS8wLGQ9MS8wLHA9LTEvMCx5PS0xLzAseD0tMS8wO2ZvcihsZXQgbT10KjYsZz0odCtlKSo2O208ZzttKz02KXtjb25zdCB3PXVbbSswXSxNPXVbbSsxXSxiPXctTSx6PXcrTTtiPG4mJihuPWIpLHo+byYmKG89eiksdzxmJiYoZj13KSx3PnAmJihwPXcpO2NvbnN0IF89dVttKzJdLFM9dVttKzNdLEI9Xy1TLFQ9XytTO0I8ciYmKHI9QiksVD5oJiYoaD1UKSxfPGwmJihsPV8pLF8+eSYmKHk9Xyk7Y29uc3QgQz11W20rNF0sUD11W20rNV0sRT1DLVAsRj1DK1A7RTxhJiYoYT1FKSxGPmMmJihjPUYpLEM8ZCYmKGQ9QyksQz54JiYoeD1DKX1pWzBdPW4saVsxXT1yLGlbMl09YSxpWzNdPW8saVs0XT1oLGlbNV09YyxzWzBdPWYsc1sxXT1sLHNbMl09ZCxzWzNdPXAsc1s0XT15LHNbNV09eH1mdW5jdGlvbiBrcyh1LHQ9bnVsbCxlPW51bGwsaT1udWxsKXtjb25zdCBzPXUuYXR0cmlidXRlcy5wb3NpdGlvbixuPXUuaW5kZXg/dS5pbmRleC5hcnJheTpudWxsLHI9TnQodSksYT1zLm5vcm1hbGl6ZWQ7bGV0IG87dD09PW51bGw/KG89bmV3IEZsb2F0MzJBcnJheShyKjYqNCksZT0wLGk9cik6KG89dCxlPWV8fDAsaT1pfHxyKTtjb25zdCBoPXMuYXJyYXksYz1zLm9mZnNldHx8MDtsZXQgZj0zO3MuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSYmKGY9cy5kYXRhLnN0cmlkZSk7Y29uc3QgbD1bImdldFgiLCJnZXRZIiwiZ2V0WiJdO2ZvcihsZXQgZD1lO2Q8ZStpO2QrKyl7Y29uc3QgcD1kKjMseT1kKjY7bGV0IHg9cCswLG09cCsxLGc9cCsyO24mJih4PW5beF0sbT1uW21dLGc9bltnXSksYXx8KHg9eCpmK2MsbT1tKmYrYyxnPWcqZitjKTtmb3IobGV0IHc9MDt3PDM7dysrKXtsZXQgTSxiLHo7YT8oTT1zW2xbd11dKHgpLGI9c1tsW3ddXShtKSx6PXNbbFt3XV0oZykpOihNPWhbeCt3XSxiPWhbbSt3XSx6PWhbZyt3XSk7bGV0IF89TTtiPF8mJihfPWIpLHo8XyYmKF89eik7bGV0IFM9TTtiPlMmJihTPWIpLHo+UyYmKFM9eik7Y29uc3QgQj0oUy1fKS8yLFQ9dyoyO29beStUKzBdPV8rQixvW3krVCsxXT1CKyhNYXRoLmFicyhfKStCKSpDc319cmV0dXJuIG99ZnVuY3Rpb24gTCh1LHQsZSl7cmV0dXJuIGUubWluLng9dFt1XSxlLm1pbi55PXRbdSsxXSxlLm1pbi56PXRbdSsyXSxlLm1heC54PXRbdSszXSxlLm1heC55PXRbdSs0XSxlLm1heC56PXRbdSs1XSxlfWZ1bmN0aW9uIFlpKHUpe2xldCB0PS0xLGU9LTEvMDtmb3IobGV0IGk9MDtpPDM7aSsrKXtjb25zdCBzPXVbaSszXS11W2ldO3M+ZSYmKGU9cyx0PWkpfXJldHVybiB0fWZ1bmN0aW9uIFppKHUsdCl7dC5zZXQodSl9ZnVuY3Rpb24gSGkodSx0LGUpe2xldCBpLHM7Zm9yKGxldCBuPTA7bjwzO24rKyl7Y29uc3Qgcj1uKzM7aT11W25dLHM9dFtuXSxlW25dPWk8cz9pOnMsaT11W3JdLHM9dFtyXSxlW3JdPWk+cz9pOnN9fWZ1bmN0aW9uIE1lKHUsdCxlKXtmb3IobGV0IGk9MDtpPDM7aSsrKXtjb25zdCBzPXRbdSsyKmldLG49dFt1KzIqaSsxXSxyPXMtbixhPXMrbjtyPGVbaV0mJihlW2ldPXIpLGE+ZVtpKzNdJiYoZVtpKzNdPWEpfX1mdW5jdGlvbiBuZSh1KXtjb25zdCB0PXVbM10tdVswXSxlPXVbNF0tdVsxXSxpPXVbNV0tdVsyXTtyZXR1cm4gMioodCplK2UqaStpKnQpfWNvbnN0IHl0PTMyLExzPSh1LHQpPT51LmNhbmRpZGF0ZS10LmNhbmRpZGF0ZSxBdD1uZXcgQXJyYXkoeXQpLmZpbGwoKS5tYXAoKCk9Pih7Y291bnQ6MCxib3VuZHM6bmV3IEZsb2F0MzJBcnJheSg2KSxyaWdodENhY2hlQm91bmRzOm5ldyBGbG9hdDMyQXJyYXkoNiksbGVmdENhY2hlQm91bmRzOm5ldyBGbG9hdDMyQXJyYXkoNiksY2FuZGlkYXRlOjB9KSksQWU9bmV3IEZsb2F0MzJBcnJheSg2KTtmdW5jdGlvbiBJcyh1LHQsZSxpLHMsbil7bGV0IHI9LTEsYT0wO2lmKG49PT1xaSlyPVlpKHQpLHIhPT0tMSYmKGE9KHRbcl0rdFtyKzNdKS8yKTtlbHNlIGlmKG49PT1UcylyPVlpKHUpLHIhPT0tMSYmKGE9RHMoZSxpLHMscikpO2Vsc2UgaWYobj09PVBzKXtjb25zdCBvPW5lKHUpO2xldCBoPXJpKnM7Y29uc3QgYz1pKjYsZj0oaStzKSo2O2ZvcihsZXQgbD0wO2w8MztsKyspe2NvbnN0IGQ9dFtsXSx4PSh0W2wrM10tZCkveXQ7aWYoczx5dC80KXtjb25zdCBtPVsuLi5BdF07bS5sZW5ndGg9cztsZXQgZz0wO2ZvcihsZXQgTT1jO008ZjtNKz02LGcrKyl7Y29uc3QgYj1tW2ddO2IuY2FuZGlkYXRlPWVbTSsyKmxdLGIuY291bnQ9MDtjb25zdHtib3VuZHM6eixsZWZ0Q2FjaGVCb3VuZHM6XyxyaWdodENhY2hlQm91bmRzOlN9PWI7Zm9yKGxldCBCPTA7QjwzO0IrKylTW0JdPTEvMCxTW0IrM109LTEvMCxfW0JdPTEvMCxfW0IrM109LTEvMCx6W0JdPTEvMCx6W0IrM109LTEvMDtNZShNLGUseil9bS5zb3J0KExzKTtsZXQgdz1zO2ZvcihsZXQgTT0wO008dztNKyspe2NvbnN0IGI9bVtNXTtmb3IoO00rMTx3JiZtW00rMV0uY2FuZGlkYXRlPT09Yi5jYW5kaWRhdGU7KW0uc3BsaWNlKE0rMSwxKSx3LS19Zm9yKGxldCBNPWM7TTxmO00rPTYpe2NvbnN0IGI9ZVtNKzIqbF07Zm9yKGxldCB6PTA7ejx3O3orKyl7Y29uc3QgXz1tW3pdO2I+PV8uY2FuZGlkYXRlP01lKE0sZSxfLnJpZ2h0Q2FjaGVCb3VuZHMpOihNZShNLGUsXy5sZWZ0Q2FjaGVCb3VuZHMpLF8uY291bnQrKyl9fWZvcihsZXQgTT0wO008dztNKyspe2NvbnN0IGI9bVtNXSx6PWIuY291bnQsXz1zLWIuY291bnQsUz1iLmxlZnRDYWNoZUJvdW5kcyxCPWIucmlnaHRDYWNoZUJvdW5kcztsZXQgVD0wO3ohPT0wJiYoVD1uZShTKS9vKTtsZXQgQz0wO18hPT0wJiYoQz1uZShCKS9vKTtjb25zdCBQPVdpK3JpKihUKnorQypfKTtQPGgmJihyPWwsaD1QLGE9Yi5jYW5kaWRhdGUpfX1lbHNle2ZvcihsZXQgdz0wO3c8eXQ7dysrKXtjb25zdCBNPUF0W3ddO00uY291bnQ9MCxNLmNhbmRpZGF0ZT1kK3grdyp4O2NvbnN0IGI9TS5ib3VuZHM7Zm9yKGxldCB6PTA7ejwzO3orKyliW3pdPTEvMCxiW3orM109LTEvMH1mb3IobGV0IHc9Yzt3PGY7dys9Nil7bGV0IHo9fn4oKGVbdysyKmxdLWQpL3gpO3o+PXl0JiYoej15dC0xKTtjb25zdCBfPUF0W3pdO18uY291bnQrKyxNZSh3LGUsXy5ib3VuZHMpfWNvbnN0IG09QXRbeXQtMV07WmkobS5ib3VuZHMsbS5yaWdodENhY2hlQm91bmRzKTtmb3IobGV0IHc9eXQtMjt3Pj0wO3ctLSl7Y29uc3QgTT1BdFt3XSxiPUF0W3crMV07SGkoTS5ib3VuZHMsYi5yaWdodENhY2hlQm91bmRzLE0ucmlnaHRDYWNoZUJvdW5kcyl9bGV0IGc9MDtmb3IobGV0IHc9MDt3PHl0LTE7dysrKXtjb25zdCBNPUF0W3ddLGI9TS5jb3VudCx6PU0uYm91bmRzLFM9QXRbdysxXS5yaWdodENhY2hlQm91bmRzO2IhPT0wJiYoZz09PTA/WmkoeixBZSk6SGkoeixBZSxBZSkpLGcrPWI7bGV0IEI9MCxUPTA7ZyE9PTAmJihCPW5lKEFlKS9vKTtjb25zdCBDPXMtZztDIT09MCYmKFQ9bmUoUykvbyk7Y29uc3QgUD1XaStyaSooQipnK1QqQyk7UDxoJiYocj1sLGg9UCxhPU0uY2FuZGlkYXRlKX19fX1lbHNlIGNvbnNvbGUud2FybihgTWVzaEJWSDogSW52YWxpZCBidWlsZCBzdHJhdGVneSB2YWx1ZSAke259IHVzZWQuYCk7cmV0dXJue2F4aXM6cixwb3M6YX19ZnVuY3Rpb24gRHModSx0LGUsaSl7bGV0IHM9MDtmb3IobGV0IG49dCxyPXQrZTtuPHI7bisrKXMrPXVbbio2K2kqMl07cmV0dXJuIHMvZX1jbGFzcyBjaXtjb25zdHJ1Y3Rvcigpe3RoaXMuYm91bmRpbmdEYXRhPW5ldyBGbG9hdDMyQXJyYXkoNil9fWZ1bmN0aW9uIFZzKHUsdCxlLGkscyxuKXtsZXQgcj1pLGE9aStzLTE7Y29uc3Qgbz1uLnBvcyxoPW4uYXhpcyoyO2Zvcig7Oyl7Zm9yKDtyPD1hJiZlW3IqNitoXTxvOylyKys7Zm9yKDtyPD1hJiZlW2EqNitoXT49bzspYS0tO2lmKHI8YSl7Zm9yKGxldCBjPTA7YzwzO2MrKyl7bGV0IGY9dFtyKjMrY107dFtyKjMrY109dFthKjMrY10sdFthKjMrY109Zn1mb3IobGV0IGM9MDtjPDY7YysrKXtsZXQgZj1lW3IqNitjXTtlW3IqNitjXT1lW2EqNitjXSxlW2EqNitjXT1mfXIrKyxhLS19ZWxzZSByZXR1cm4gcn19ZnVuY3Rpb24gTnModSx0LGUsaSxzLG4pe2xldCByPWksYT1pK3MtMTtjb25zdCBvPW4ucG9zLGg9bi5heGlzKjI7Zm9yKDs7KXtmb3IoO3I8PWEmJmVbcio2K2hdPG87KXIrKztmb3IoO3I8PWEmJmVbYSo2K2hdPj1vOylhLS07aWYocjxhKXtsZXQgYz11W3JdO3Vbcl09dVthXSx1W2FdPWM7Zm9yKGxldCBmPTA7Zjw2O2YrKyl7bGV0IGw9ZVtyKjYrZl07ZVtyKjYrZl09ZVthKjYrZl0sZVthKjYrZl09bH1yKyssYS0tfWVsc2UgcmV0dXJuIHJ9fWZ1bmN0aW9uIFkodSx0KXtyZXR1cm4gdFt1KzE1XT09PTY1NTM1fWZ1bmN0aW9uICQodSx0KXtyZXR1cm4gdFt1KzZdfWZ1bmN0aW9uIEoodSx0KXtyZXR1cm4gdFt1KzE0XX1mdW5jdGlvbiBRKHUpe3JldHVybiB1Kzh9ZnVuY3Rpb24gSyh1LHQpe3JldHVybiB0W3UrNl19ZnVuY3Rpb24gJGkodSx0KXtyZXR1cm4gdFt1KzddfWZ1bmN0aW9uIEpuKHUpe3JldHVybiB1fWxldCBqaSxyZSx6ZSxHaTtjb25zdCBxcz1NYXRoLnBvdygyLDMyKTtmdW5jdGlvbiBoaSh1KXtyZXR1cm4iY291bnQiaW4gdT8xOjEraGkodS5sZWZ0KStoaSh1LnJpZ2h0KX1mdW5jdGlvbiB2cyh1LHQsZSl7cmV0dXJuIGppPW5ldyBGbG9hdDMyQXJyYXkoZSkscmU9bmV3IFVpbnQzMkFycmF5KGUpLHplPW5ldyBVaW50MTZBcnJheShlKSxHaT1uZXcgVWludDhBcnJheShlKSxsaSh1LHQpfWZ1bmN0aW9uIGxpKHUsdCl7Y29uc3QgZT11LzQsaT11LzIscz0iY291bnQiaW4gdCxuPXQuYm91bmRpbmdEYXRhO2ZvcihsZXQgcj0wO3I8NjtyKyspamlbZStyXT1uW3JdO2lmKHMpaWYodC5idWZmZXIpe2NvbnN0IHI9dC5idWZmZXI7R2kuc2V0KG5ldyBVaW50OEFycmF5KHIpLHUpO2ZvcihsZXQgYT11LG89dStyLmJ5dGVMZW5ndGg7YTxvO2ErPXNlKXtjb25zdCBoPWEvMjtZKGgsemUpfHwocmVbYS80KzZdKz1lKX1yZXR1cm4gdStyLmJ5dGVMZW5ndGh9ZWxzZXtjb25zdCByPXQub2Zmc2V0LGE9dC5jb3VudDtyZXR1cm4gcmVbZSs2XT1yLHplW2krMTRdPWEsemVbaSsxNV09X2UsdStzZX1lbHNle2NvbnN0IHI9dC5sZWZ0LGE9dC5yaWdodCxvPXQuc3BsaXRBeGlzO2xldCBoO2lmKGg9bGkodStzZSxyKSxoLzQ+cXMpdGhyb3cgbmV3IEVycm9yKCJNZXNoQlZIOiBDYW5ub3Qgc3RvcmUgY2hpbGQgcG9pbnRlciBncmVhdGVyIHRoYW4gMzIgYml0cy4iKTtyZXR1cm4gcmVbZSs2XT1oLzQsaD1saShoLGEpLHJlW2UrN109byxofX1mdW5jdGlvbiBXcyh1LHQpe2NvbnN0IGU9KHUuaW5kZXg/dS5pbmRleC5jb3VudDp1LmF0dHJpYnV0ZXMucG9zaXRpb24uY291bnQpLzMsaT1lPjIqKjE2LHM9aT80OjIsbj10P25ldyBTaGFyZWRBcnJheUJ1ZmZlcihlKnMpOm5ldyBBcnJheUJ1ZmZlcihlKnMpLHI9aT9uZXcgVWludDMyQXJyYXkobik6bmV3IFVpbnQxNkFycmF5KG4pO2ZvcihsZXQgYT0wLG89ci5sZW5ndGg7YTxvO2ErKylyW2FdPWE7cmV0dXJuIHJ9ZnVuY3Rpb24gWHModSx0LGUsaSxzKXtjb25zdHttYXhEZXB0aDpuLHZlcmJvc2U6cixtYXhMZWFmVHJpczphLHN0cmF0ZWd5Om8sb25Qcm9ncmVzczpoLGluZGlyZWN0OmN9PXMsZj11Ll9pbmRpcmVjdEJ1ZmZlcixsPXUuZ2VvbWV0cnksZD1sLmluZGV4P2wuaW5kZXguYXJyYXk6bnVsbCxwPWM/TnM6VnMseT1OdChsKSx4PW5ldyBGbG9hdDMyQXJyYXkoNik7bGV0IG09ITE7Y29uc3QgZz1uZXcgY2k7cmV0dXJuIGFpKHQsZSxpLGcuYm91bmRpbmdEYXRhLHgpLE0oZyxlLGkseCksZztmdW5jdGlvbiB3KGIpe2gmJmgoYi95KX1mdW5jdGlvbiBNKGIseixfLFM9bnVsbCxCPTApe2lmKCFtJiZCPj1uJiYobT0hMCxyJiYoY29uc29sZS53YXJuKGBNZXNoQlZIOiBNYXggZGVwdGggb2YgJHtufSByZWFjaGVkIHdoZW4gZ2VuZXJhdGluZyBCVkguIENvbnNpZGVyIGluY3JlYXNpbmcgbWF4RGVwdGguYCksY29uc29sZS53YXJuKGwpKSksXzw9YXx8Qj49bilyZXR1cm4gdyh6K18pLGIub2Zmc2V0PXosYi5jb3VudD1fLGI7Y29uc3QgVD1JcyhiLmJvdW5kaW5nRGF0YSxTLHQseixfLG8pO2lmKFQuYXhpcz09PS0xKXJldHVybiB3KHorXyksYi5vZmZzZXQ9eixiLmNvdW50PV8sYjtjb25zdCBDPXAoZixkLHQseixfLFQpO2lmKEM9PT16fHxDPT09eitfKXcoeitfKSxiLm9mZnNldD16LGIuY291bnQ9XztlbHNle2Iuc3BsaXRBeGlzPVQuYXhpcztjb25zdCBQPW5ldyBjaSxFPXosRj1DLXo7Yi5sZWZ0PVAsYWkodCxFLEYsUC5ib3VuZGluZ0RhdGEseCksTShQLEUsRix4LEIrMSk7Y29uc3QgVT1uZXcgY2ksUj1DLGo9Xy1GO2IucmlnaHQ9VSxhaSh0LFIsaixVLmJvdW5kaW5nRGF0YSx4KSxNKFUsUixqLHgsQisxKX1yZXR1cm4gYn19ZnVuY3Rpb24gT3ModSx0KXtjb25zdCBlPXUuZ2VvbWV0cnk7dC5pbmRpcmVjdCYmKHUuX2luZGlyZWN0QnVmZmVyPVdzKGUsdC51c2VTaGFyZWRBcnJheUJ1ZmZlciksUnMoZSx0LnJhbmdlKSYmIXQudmVyYm9zZSYmY29uc29sZS53YXJuKCdNZXNoQlZIOiBQcm92aWRlZCBnZW9tZXRyeSBjb250YWlucyBncm91cHMgb3IgYSByYW5nZSB0aGF0IGRvIG5vdCBmdWxseSBzcGFuIHRoZSB2ZXJ0ZXggY29udGVudHMgd2hpbGUgdXNpbmcgdGhlICJpbmRpcmVjdCIgb3B0aW9uLiBCVkggbWF5IGluY29ycmVjdGx5IHJlcG9ydCBpbnRlcnNlY3Rpb25zIG9uIHVucmVuZGVyZWQgcG9ydGlvbnMgb2YgdGhlIGdlb21ldHJ5LicpKSx1Ll9pbmRpcmVjdEJ1ZmZlcnx8VXMoZSx0KTtjb25zdCBpPXQudXNlU2hhcmVkQXJyYXlCdWZmZXI/U2hhcmVkQXJyYXlCdWZmZXI6QXJyYXlCdWZmZXIscz1rcyhlKSxuPXQuaW5kaXJlY3Q/WGkoZSx0LnJhbmdlKTpPaShlLHQucmFuZ2UpO3UuX3Jvb3RzPW4ubWFwKHI9Pntjb25zdCBhPVhzKHUscyxyLm9mZnNldCxyLmNvdW50LHQpLG89aGkoYSksaD1uZXcgaShzZSpvKTtyZXR1cm4gdnMoMCxhLGgpLGh9KX1jbGFzcyB4dHtjb25zdHJ1Y3Rvcigpe3RoaXMubWluPTEvMCx0aGlzLm1heD0tMS8wfXNldEZyb21Qb2ludHNGaWVsZCh0LGUpe2xldCBpPTEvMCxzPS0xLzA7Zm9yKGxldCBuPTAscj10Lmxlbmd0aDtuPHI7bisrKXtjb25zdCBvPXRbbl1bZV07aT1vPGk/bzppLHM9bz5zP286c310aGlzLm1pbj1pLHRoaXMubWF4PXN9c2V0RnJvbVBvaW50cyh0LGUpe2xldCBpPTEvMCxzPS0xLzA7Zm9yKGxldCBuPTAscj1lLmxlbmd0aDtuPHI7bisrKXtjb25zdCBhPWVbbl0sbz10LmRvdChhKTtpPW88aT9vOmkscz1vPnM/bzpzfXRoaXMubWluPWksdGhpcy5tYXg9c31pc1NlcGFyYXRlZCh0KXtyZXR1cm4gdGhpcy5taW4+dC5tYXh8fHQubWluPnRoaXMubWF4fX14dC5wcm90b3R5cGUuc2V0RnJvbUJveD1mdW5jdGlvbigpe2NvbnN0IHU9bmV3IEE7cmV0dXJuIGZ1bmN0aW9uKGUsaSl7Y29uc3Qgcz1pLm1pbixuPWkubWF4O2xldCByPTEvMCxhPS0xLzA7Zm9yKGxldCBvPTA7bzw9MTtvKyspZm9yKGxldCBoPTA7aDw9MTtoKyspZm9yKGxldCBjPTA7Yzw9MTtjKyspe3UueD1zLngqbytuLngqKDEtbyksdS55PXMueSpoK24ueSooMS1oKSx1Lno9cy56KmMrbi56KigxLWMpO2NvbnN0IGY9ZS5kb3QodSk7cj1NYXRoLm1pbihmLHIpLGE9TWF0aC5tYXgoZixhKX10aGlzLm1pbj1yLHRoaXMubWF4PWF9fSgpO2NvbnN0IFlzPWZ1bmN0aW9uKCl7Y29uc3QgdT1uZXcgQSx0PW5ldyBBLGU9bmV3IEE7cmV0dXJuIGZ1bmN0aW9uKHMsbixyKXtjb25zdCBhPXMuc3RhcnQsbz11LGg9bi5zdGFydCxjPXQ7ZS5zdWJWZWN0b3JzKGEsaCksdS5zdWJWZWN0b3JzKHMuZW5kLHMuc3RhcnQpLHQuc3ViVmVjdG9ycyhuLmVuZCxuLnN0YXJ0KTtjb25zdCBmPWUuZG90KGMpLGw9Yy5kb3QobyksZD1jLmRvdChjKSxwPWUuZG90KG8pLHg9by5kb3QobykqZC1sKmw7bGV0IG0sZzt4IT09MD9tPShmKmwtcCpkKS94Om09MCxnPShmK20qbCkvZCxyLng9bSxyLnk9Z319KCksdWk9ZnVuY3Rpb24oKXtjb25zdCB1PW5ldyB2LHQ9bmV3IEEsZT1uZXcgQTtyZXR1cm4gZnVuY3Rpb24ocyxuLHIsYSl7WXMocyxuLHUpO2xldCBvPXUueCxoPXUueTtpZihvPj0wJiZvPD0xJiZoPj0wJiZoPD0xKXtzLmF0KG8sciksbi5hdChoLGEpO3JldHVybn1lbHNlIGlmKG8+PTAmJm88PTEpe2g8MD9uLmF0KDAsYSk6bi5hdCgxLGEpLHMuY2xvc2VzdFBvaW50VG9Qb2ludChhLCEwLHIpO3JldHVybn1lbHNlIGlmKGg+PTAmJmg8PTEpe288MD9zLmF0KDAscik6cy5hdCgxLHIpLG4uY2xvc2VzdFBvaW50VG9Qb2ludChyLCEwLGEpO3JldHVybn1lbHNle2xldCBjO288MD9jPXMuc3RhcnQ6Yz1zLmVuZDtsZXQgZjtoPDA/Zj1uLnN0YXJ0OmY9bi5lbmQ7Y29uc3QgbD10LGQ9ZTtpZihzLmNsb3Nlc3RQb2ludFRvUG9pbnQoZiwhMCx0KSxuLmNsb3Nlc3RQb2ludFRvUG9pbnQoYywhMCxlKSxsLmRpc3RhbmNlVG9TcXVhcmVkKGYpPD1kLmRpc3RhbmNlVG9TcXVhcmVkKGMpKXtyLmNvcHkobCksYS5jb3B5KGYpO3JldHVybn1lbHNle3IuY29weShjKSxhLmNvcHkoZCk7cmV0dXJufX19fSgpLFpzPWZ1bmN0aW9uKCl7Y29uc3QgdT1uZXcgQSx0PW5ldyBBLGU9bmV3IFZpLGk9bmV3IG10O3JldHVybiBmdW5jdGlvbihuLHIpe2NvbnN0e3JhZGl1czphLGNlbnRlcjpvfT1uLHthOmgsYjpjLGM6Zn09cjtpZihpLnN0YXJ0PWgsaS5lbmQ9YyxpLmNsb3Nlc3RQb2ludFRvUG9pbnQobywhMCx1KS5kaXN0YW5jZVRvKG8pPD1hfHwoaS5zdGFydD1oLGkuZW5kPWYsaS5jbG9zZXN0UG9pbnRUb1BvaW50KG8sITAsdSkuZGlzdGFuY2VUbyhvKTw9YSl8fChpLnN0YXJ0PWMsaS5lbmQ9ZixpLmNsb3Nlc3RQb2ludFRvUG9pbnQobywhMCx1KS5kaXN0YW5jZVRvKG8pPD1hKSlyZXR1cm4hMDtjb25zdCB5PXIuZ2V0UGxhbmUoZSk7aWYoTWF0aC5hYnMoeS5kaXN0YW5jZVRvUG9pbnQobykpPD1hKXtjb25zdCBtPXkucHJvamVjdFBvaW50KG8sdCk7aWYoci5jb250YWluc1BvaW50KG0pKXJldHVybiEwfXJldHVybiExfX0oKSxIcz0xZS0xNTtmdW5jdGlvbiBmaSh1KXtyZXR1cm4gTWF0aC5hYnModSk8SHN9Y2xhc3MgcnQgZXh0ZW5kcyBudHtjb25zdHJ1Y3RvciguLi50KXtzdXBlciguLi50KSx0aGlzLmlzRXh0ZW5kZWRUcmlhbmdsZT0hMCx0aGlzLnNhdEF4ZXM9bmV3IEFycmF5KDQpLmZpbGwoKS5tYXAoKCk9Pm5ldyBBKSx0aGlzLnNhdEJvdW5kcz1uZXcgQXJyYXkoNCkuZmlsbCgpLm1hcCgoKT0+bmV3IHh0KSx0aGlzLnBvaW50cz1bdGhpcy5hLHRoaXMuYix0aGlzLmNdLHRoaXMuc3BoZXJlPW5ldyBFaSx0aGlzLnBsYW5lPW5ldyBWaSx0aGlzLm5lZWRzVXBkYXRlPSEwfWludGVyc2VjdHNTcGhlcmUodCl7cmV0dXJuIFpzKHQsdGhpcyl9dXBkYXRlKCl7Y29uc3QgdD10aGlzLmEsZT10aGlzLmIsaT10aGlzLmMscz10aGlzLnBvaW50cyxuPXRoaXMuc2F0QXhlcyxyPXRoaXMuc2F0Qm91bmRzLGE9blswXSxvPXJbMF07dGhpcy5nZXROb3JtYWwoYSksby5zZXRGcm9tUG9pbnRzKGEscyk7Y29uc3QgaD1uWzFdLGM9clsxXTtoLnN1YlZlY3RvcnModCxlKSxjLnNldEZyb21Qb2ludHMoaCxzKTtjb25zdCBmPW5bMl0sbD1yWzJdO2Yuc3ViVmVjdG9ycyhlLGkpLGwuc2V0RnJvbVBvaW50cyhmLHMpO2NvbnN0IGQ9blszXSxwPXJbM107ZC5zdWJWZWN0b3JzKGksdCkscC5zZXRGcm9tUG9pbnRzKGQscyksdGhpcy5zcGhlcmUuc2V0RnJvbVBvaW50cyh0aGlzLnBvaW50cyksdGhpcy5wbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChhLHQpLHRoaXMubmVlZHNVcGRhdGU9ITF9fXJ0LnByb3RvdHlwZS5jbG9zZXN0UG9pbnRUb1NlZ21lbnQ9ZnVuY3Rpb24oKXtjb25zdCB1PW5ldyBBLHQ9bmV3IEEsZT1uZXcgbXQ7cmV0dXJuIGZ1bmN0aW9uKHMsbj1udWxsLHI9bnVsbCl7Y29uc3R7c3RhcnQ6YSxlbmQ6b309cyxoPXRoaXMucG9pbnRzO2xldCBjLGY9MS8wO2ZvcihsZXQgbD0wO2w8MztsKyspe2NvbnN0IGQ9KGwrMSklMztlLnN0YXJ0LmNvcHkoaFtsXSksZS5lbmQuY29weShoW2RdKSx1aShlLHMsdSx0KSxjPXUuZGlzdGFuY2VUb1NxdWFyZWQodCksYzxmJiYoZj1jLG4mJm4uY29weSh1KSxyJiZyLmNvcHkodCkpfXJldHVybiB0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnQoYSx1KSxjPWEuZGlzdGFuY2VUb1NxdWFyZWQodSksYzxmJiYoZj1jLG4mJm4uY29weSh1KSxyJiZyLmNvcHkoYSkpLHRoaXMuY2xvc2VzdFBvaW50VG9Qb2ludChvLHUpLGM9by5kaXN0YW5jZVRvU3F1YXJlZCh1KSxjPGYmJihmPWMsbiYmbi5jb3B5KHUpLHImJnIuY29weShvKSksTWF0aC5zcXJ0KGYpfX0oKSxydC5wcm90b3R5cGUuaW50ZXJzZWN0c1RyaWFuZ2xlPWZ1bmN0aW9uKCl7Y29uc3QgdT1uZXcgcnQsdD1uZXcgQXJyYXkoMyksZT1uZXcgQXJyYXkoMyksaT1uZXcgeHQscz1uZXcgeHQsbj1uZXcgQSxyPW5ldyBBLGE9bmV3IEEsbz1uZXcgQSxoPW5ldyBBLGM9bmV3IG10LGY9bmV3IG10LGw9bmV3IG10LGQ9bmV3IEE7ZnVuY3Rpb24gcCh5LHgsbSl7Y29uc3QgZz15LnBvaW50cztsZXQgdz0wLE09LTE7Zm9yKGxldCBiPTA7YjwzO2IrKyl7Y29uc3R7c3RhcnQ6eixlbmQ6X309Yzt6LmNvcHkoZ1tiXSksXy5jb3B5KGdbKGIrMSklM10pLGMuZGVsdGEocik7Y29uc3QgUz1maSh4LmRpc3RhbmNlVG9Qb2ludCh6KSk7aWYoZmkoeC5ub3JtYWwuZG90KHIpKSYmUyl7bS5jb3B5KGMpLHc9MjticmVha31jb25zdCBCPXguaW50ZXJzZWN0TGluZShjLGQpO2lmKCFCJiZTJiZkLmNvcHkoeiksKEJ8fFMpJiYhZmkoZC5kaXN0YW5jZVRvKF8pKSl7aWYodzw9MSkodz09PTE/bS5zdGFydDptLmVuZCkuY29weShkKSxTJiYoTT13KTtlbHNlIGlmKHc+PTIpeyhNPT09MT9tLnN0YXJ0Om0uZW5kKS5jb3B5KGQpLHc9MjticmVha31pZih3Kyssdz09PTImJk09PT0tMSlicmVha319cmV0dXJuIHd9cmV0dXJuIGZ1bmN0aW9uKHgsbT1udWxsLGc9ITEpe3RoaXMubmVlZHNVcGRhdGUmJnRoaXMudXBkYXRlKCkseC5pc0V4dGVuZGVkVHJpYW5nbGU/eC5uZWVkc1VwZGF0ZSYmeC51cGRhdGUoKToodS5jb3B5KHgpLHUudXBkYXRlKCkseD11KTtjb25zdCB3PXRoaXMucGxhbmUsTT14LnBsYW5lO2lmKE1hdGguYWJzKHcubm9ybWFsLmRvdChNLm5vcm1hbCkpPjEtMWUtMTApe2NvbnN0IGI9dGhpcy5zYXRCb3VuZHMsej10aGlzLnNhdEF4ZXM7ZVswXT14LmEsZVsxXT14LmIsZVsyXT14LmM7Zm9yKGxldCBCPTA7Qjw0O0IrKyl7Y29uc3QgVD1iW0JdLEM9eltCXTtpZihpLnNldEZyb21Qb2ludHMoQyxlKSxULmlzU2VwYXJhdGVkKGkpKXJldHVybiExfWNvbnN0IF89eC5zYXRCb3VuZHMsUz14LnNhdEF4ZXM7dFswXT10aGlzLmEsdFsxXT10aGlzLmIsdFsyXT10aGlzLmM7Zm9yKGxldCBCPTA7Qjw0O0IrKyl7Y29uc3QgVD1fW0JdLEM9U1tCXTtpZihpLnNldEZyb21Qb2ludHMoQyx0KSxULmlzU2VwYXJhdGVkKGkpKXJldHVybiExfWZvcihsZXQgQj0wO0I8NDtCKyspe2NvbnN0IFQ9eltCXTtmb3IobGV0IEM9MDtDPDQ7QysrKXtjb25zdCBQPVNbQ107aWYobi5jcm9zc1ZlY3RvcnMoVCxQKSxpLnNldEZyb21Qb2ludHMobix0KSxzLnNldEZyb21Qb2ludHMobixlKSxpLmlzU2VwYXJhdGVkKHMpKXJldHVybiExfX1yZXR1cm4gbSYmKGd8fGNvbnNvbGUud2FybigiRXh0ZW5kZWRUcmlhbmdsZS5pbnRlcnNlY3RzVHJpYW5nbGU6IFRyaWFuZ2xlcyBhcmUgY29wbGFuYXIgd2hpY2ggZG9lcyBub3Qgc3VwcG9ydCBhbiBvdXRwdXQgZWRnZS4gU2V0dGluZyBlZGdlIHRvIDAsIDAsIDAuIiksbS5zdGFydC5zZXQoMCwwLDApLG0uZW5kLnNldCgwLDAsMCkpLCEwfWVsc2V7Y29uc3QgYj1wKHRoaXMsTSxmKTtpZihiPT09MSYmeC5jb250YWluc1BvaW50KGYuZW5kKSlyZXR1cm4gbSYmKG0uc3RhcnQuY29weShmLmVuZCksbS5lbmQuY29weShmLmVuZCkpLCEwO2lmKGIhPT0yKXJldHVybiExO2NvbnN0IHo9cCh4LHcsbCk7aWYoej09PTEmJnRoaXMuY29udGFpbnNQb2ludChsLmVuZCkpcmV0dXJuIG0mJihtLnN0YXJ0LmNvcHkobC5lbmQpLG0uZW5kLmNvcHkobC5lbmQpKSwhMDtpZih6IT09MilyZXR1cm4hMTtpZihmLmRlbHRhKGEpLGwuZGVsdGEobyksYS5kb3Qobyk8MCl7bGV0IEU9bC5zdGFydDtsLnN0YXJ0PWwuZW5kLGwuZW5kPUV9Y29uc3QgXz1mLnN0YXJ0LmRvdChhKSxTPWYuZW5kLmRvdChhKSxCPWwuc3RhcnQuZG90KGEpLFQ9bC5lbmQuZG90KGEpLEM9UzxCLFA9XzxUO3JldHVybiBfIT09VCYmQiE9PVMmJkM9PT1QPyExOihtJiYoaC5zdWJWZWN0b3JzKGYuc3RhcnQsbC5zdGFydCksaC5kb3QoYSk+MD9tLnN0YXJ0LmNvcHkoZi5zdGFydCk6bS5zdGFydC5jb3B5KGwuc3RhcnQpLGguc3ViVmVjdG9ycyhmLmVuZCxsLmVuZCksaC5kb3QoYSk8MD9tLmVuZC5jb3B5KGYuZW5kKTptLmVuZC5jb3B5KGwuZW5kKSksITApfX19KCkscnQucHJvdG90eXBlLmRpc3RhbmNlVG9Qb2ludD1mdW5jdGlvbigpe2NvbnN0IHU9bmV3IEE7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnQoZSx1KSxlLmRpc3RhbmNlVG8odSl9fSgpLHJ0LnByb3RvdHlwZS5kaXN0YW5jZVRvVHJpYW5nbGU9ZnVuY3Rpb24oKXtjb25zdCB1PW5ldyBBLHQ9bmV3IEEsZT1bImEiLCJiIiwiYyJdLGk9bmV3IG10LHM9bmV3IG10O3JldHVybiBmdW5jdGlvbihyLGE9bnVsbCxvPW51bGwpe2NvbnN0IGg9YXx8bz9pOm51bGw7aWYodGhpcy5pbnRlcnNlY3RzVHJpYW5nbGUocixoKSlyZXR1cm4oYXx8bykmJihhJiZoLmdldENlbnRlcihhKSxvJiZoLmdldENlbnRlcihvKSksMDtsZXQgYz0xLzA7Zm9yKGxldCBmPTA7ZjwzO2YrKyl7bGV0IGw7Y29uc3QgZD1lW2ZdLHA9cltkXTt0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnQocCx1KSxsPXAuZGlzdGFuY2VUb1NxdWFyZWQodSksbDxjJiYoYz1sLGEmJmEuY29weSh1KSxvJiZvLmNvcHkocCkpO2NvbnN0IHk9dGhpc1tkXTtyLmNsb3Nlc3RQb2ludFRvUG9pbnQoeSx1KSxsPXkuZGlzdGFuY2VUb1NxdWFyZWQodSksbDxjJiYoYz1sLGEmJmEuY29weSh5KSxvJiZvLmNvcHkodSkpfWZvcihsZXQgZj0wO2Y8MztmKyspe2NvbnN0IGw9ZVtmXSxkPWVbKGYrMSklM107aS5zZXQodGhpc1tsXSx0aGlzW2RdKTtmb3IobGV0IHA9MDtwPDM7cCsrKXtjb25zdCB5PWVbcF0seD1lWyhwKzEpJTNdO3Muc2V0KHJbeV0sclt4XSksdWkoaSxzLHUsdCk7Y29uc3QgbT11LmRpc3RhbmNlVG9TcXVhcmVkKHQpO208YyYmKGM9bSxhJiZhLmNvcHkodSksbyYmby5jb3B5KHQpKX19cmV0dXJuIE1hdGguc3FydChjKX19KCk7Y2xhc3MgWHtjb25zdHJ1Y3Rvcih0LGUsaSl7dGhpcy5pc09yaWVudGVkQm94PSEwLHRoaXMubWluPW5ldyBBLHRoaXMubWF4PW5ldyBBLHRoaXMubWF0cml4PW5ldyBOLHRoaXMuaW52TWF0cml4PW5ldyBOLHRoaXMucG9pbnRzPW5ldyBBcnJheSg4KS5maWxsKCkubWFwKCgpPT5uZXcgQSksdGhpcy5zYXRBeGVzPW5ldyBBcnJheSgzKS5maWxsKCkubWFwKCgpPT5uZXcgQSksdGhpcy5zYXRCb3VuZHM9bmV3IEFycmF5KDMpLmZpbGwoKS5tYXAoKCk9Pm5ldyB4dCksdGhpcy5hbGlnbmVkU2F0Qm91bmRzPW5ldyBBcnJheSgzKS5maWxsKCkubWFwKCgpPT5uZXcgeHQpLHRoaXMubmVlZHNVcGRhdGU9ITEsdCYmdGhpcy5taW4uY29weSh0KSxlJiZ0aGlzLm1heC5jb3B5KGUpLGkmJnRoaXMubWF0cml4LmNvcHkoaSl9c2V0KHQsZSxpKXt0aGlzLm1pbi5jb3B5KHQpLHRoaXMubWF4LmNvcHkoZSksdGhpcy5tYXRyaXguY29weShpKSx0aGlzLm5lZWRzVXBkYXRlPSEwfWNvcHkodCl7dGhpcy5taW4uY29weSh0Lm1pbiksdGhpcy5tYXguY29weSh0Lm1heCksdGhpcy5tYXRyaXguY29weSh0Lm1hdHJpeCksdGhpcy5uZWVkc1VwZGF0ZT0hMH19WC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7Y29uc3QgdD10aGlzLm1hdHJpeCxlPXRoaXMubWluLGk9dGhpcy5tYXgscz10aGlzLnBvaW50cztmb3IobGV0IGg9MDtoPD0xO2grKylmb3IobGV0IGM9MDtjPD0xO2MrKylmb3IobGV0IGY9MDtmPD0xO2YrKyl7Y29uc3QgbD0xKmh8MipjfDQqZixkPXNbbF07ZC54PWg/aS54OmUueCxkLnk9Yz9pLnk6ZS55LGQuej1mP2kuejplLnosZC5hcHBseU1hdHJpeDQodCl9Y29uc3Qgbj10aGlzLnNhdEJvdW5kcyxyPXRoaXMuc2F0QXhlcyxhPXNbMF07Zm9yKGxldCBoPTA7aDwzO2grKyl7Y29uc3QgYz1yW2hdLGY9bltoXSxsPTE8PGgsZD1zW2xdO2Muc3ViVmVjdG9ycyhhLGQpLGYuc2V0RnJvbVBvaW50cyhjLHMpfWNvbnN0IG89dGhpcy5hbGlnbmVkU2F0Qm91bmRzO29bMF0uc2V0RnJvbVBvaW50c0ZpZWxkKHMsIngiKSxvWzFdLnNldEZyb21Qb2ludHNGaWVsZChzLCJ5Iiksb1syXS5zZXRGcm9tUG9pbnRzRmllbGQocywieiIpLHRoaXMuaW52TWF0cml4LmNvcHkodGhpcy5tYXRyaXgpLmludmVydCgpLHRoaXMubmVlZHNVcGRhdGU9ITF9fSgpLFgucHJvdG90eXBlLmludGVyc2VjdHNCb3g9ZnVuY3Rpb24oKXtjb25zdCB1PW5ldyB4dDtyZXR1cm4gZnVuY3Rpb24oZSl7dGhpcy5uZWVkc1VwZGF0ZSYmdGhpcy51cGRhdGUoKTtjb25zdCBpPWUubWluLHM9ZS5tYXgsbj10aGlzLnNhdEJvdW5kcyxyPXRoaXMuc2F0QXhlcyxhPXRoaXMuYWxpZ25lZFNhdEJvdW5kcztpZih1Lm1pbj1pLngsdS5tYXg9cy54LGFbMF0uaXNTZXBhcmF0ZWQodSl8fCh1Lm1pbj1pLnksdS5tYXg9cy55LGFbMV0uaXNTZXBhcmF0ZWQodSkpfHwodS5taW49aS56LHUubWF4PXMueixhWzJdLmlzU2VwYXJhdGVkKHUpKSlyZXR1cm4hMTtmb3IobGV0IG89MDtvPDM7bysrKXtjb25zdCBoPXJbb10sYz1uW29dO2lmKHUuc2V0RnJvbUJveChoLGUpLGMuaXNTZXBhcmF0ZWQodSkpcmV0dXJuITF9cmV0dXJuITB9fSgpLFgucHJvdG90eXBlLmludGVyc2VjdHNUcmlhbmdsZT1mdW5jdGlvbigpe2NvbnN0IHU9bmV3IHJ0LHQ9bmV3IEFycmF5KDMpLGU9bmV3IHh0LGk9bmV3IHh0LHM9bmV3IEE7cmV0dXJuIGZ1bmN0aW9uKHIpe3RoaXMubmVlZHNVcGRhdGUmJnRoaXMudXBkYXRlKCksci5pc0V4dGVuZGVkVHJpYW5nbGU/ci5uZWVkc1VwZGF0ZSYmci51cGRhdGUoKToodS5jb3B5KHIpLHUudXBkYXRlKCkscj11KTtjb25zdCBhPXRoaXMuc2F0Qm91bmRzLG89dGhpcy5zYXRBeGVzO3RbMF09ci5hLHRbMV09ci5iLHRbMl09ci5jO2ZvcihsZXQgbD0wO2w8MztsKyspe2NvbnN0IGQ9YVtsXSxwPW9bbF07aWYoZS5zZXRGcm9tUG9pbnRzKHAsdCksZC5pc1NlcGFyYXRlZChlKSlyZXR1cm4hMX1jb25zdCBoPXIuc2F0Qm91bmRzLGM9ci5zYXRBeGVzLGY9dGhpcy5wb2ludHM7Zm9yKGxldCBsPTA7bDwzO2wrKyl7Y29uc3QgZD1oW2xdLHA9Y1tsXTtpZihlLnNldEZyb21Qb2ludHMocCxmKSxkLmlzU2VwYXJhdGVkKGUpKXJldHVybiExfWZvcihsZXQgbD0wO2w8MztsKyspe2NvbnN0IGQ9b1tsXTtmb3IobGV0IHA9MDtwPDQ7cCsrKXtjb25zdCB5PWNbcF07aWYocy5jcm9zc1ZlY3RvcnMoZCx5KSxlLnNldEZyb21Qb2ludHMocyx0KSxpLnNldEZyb21Qb2ludHMocyxmKSxlLmlzU2VwYXJhdGVkKGkpKXJldHVybiExfX1yZXR1cm4hMH19KCksWC5wcm90b3R5cGUuY2xvc2VzdFBvaW50VG9Qb2ludD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLm5lZWRzVXBkYXRlJiZ0aGlzLnVwZGF0ZSgpLGUuY29weSh0KS5hcHBseU1hdHJpeDQodGhpcy5pbnZNYXRyaXgpLmNsYW1wKHRoaXMubWluLHRoaXMubWF4KS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXgpLGV9fSgpLFgucHJvdG90eXBlLmRpc3RhbmNlVG9Qb2ludD1mdW5jdGlvbigpe2NvbnN0IHU9bmV3IEE7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnQoZSx1KSxlLmRpc3RhbmNlVG8odSl9fSgpLFgucHJvdG90eXBlLmRpc3RhbmNlVG9Cb3g9ZnVuY3Rpb24oKXtjb25zdCB1PVsieCIsInkiLCJ6Il0sdD1uZXcgQXJyYXkoMTIpLmZpbGwoKS5tYXAoKCk9Pm5ldyBtdCksZT1uZXcgQXJyYXkoMTIpLmZpbGwoKS5tYXAoKCk9Pm5ldyBtdCksaT1uZXcgQSxzPW5ldyBBO3JldHVybiBmdW5jdGlvbihyLGE9MCxvPW51bGwsaD1udWxsKXtpZih0aGlzLm5lZWRzVXBkYXRlJiZ0aGlzLnVwZGF0ZSgpLHRoaXMuaW50ZXJzZWN0c0JveChyKSlyZXR1cm4ob3x8aCkmJihyLmdldENlbnRlcihzKSx0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnQocyxpKSxyLmNsb3Nlc3RQb2ludFRvUG9pbnQoaSxzKSxvJiZvLmNvcHkoaSksaCYmaC5jb3B5KHMpKSwwO2NvbnN0IGM9YSphLGY9ci5taW4sbD1yLm1heCxkPXRoaXMucG9pbnRzO2xldCBwPTEvMDtmb3IobGV0IHg9MDt4PDg7eCsrKXtjb25zdCBtPWRbeF07cy5jb3B5KG0pLmNsYW1wKGYsbCk7Y29uc3QgZz1tLmRpc3RhbmNlVG9TcXVhcmVkKHMpO2lmKGc8cCYmKHA9ZyxvJiZvLmNvcHkobSksaCYmaC5jb3B5KHMpLGc8YykpcmV0dXJuIE1hdGguc3FydChnKX1sZXQgeT0wO2ZvcihsZXQgeD0wO3g8Mzt4KyspZm9yKGxldCBtPTA7bTw9MTttKyspZm9yKGxldCBnPTA7Zzw9MTtnKyspe2NvbnN0IHc9KHgrMSklMyxNPSh4KzIpJTMsYj1tPDx3fGc8PE0sej0xPDx4fG08PHd8Zzw8TSxfPWRbYl0sUz1kW3pdO3RbeV0uc2V0KF8sUyk7Y29uc3QgVD11W3hdLEM9dVt3XSxQPXVbTV0sRT1lW3ldLEY9RS5zdGFydCxVPUUuZW5kO0ZbVF09ZltUXSxGW0NdPW0/ZltDXTpsW0NdLEZbUF09Zz9mW1BdOmxbQ10sVVtUXT1sW1RdLFVbQ109bT9mW0NdOmxbQ10sVVtQXT1nP2ZbUF06bFtDXSx5Kyt9Zm9yKGxldCB4PTA7eDw9MTt4KyspZm9yKGxldCBtPTA7bTw9MTttKyspZm9yKGxldCBnPTA7Zzw9MTtnKyspe3MueD14P2wueDpmLngscy55PW0/bC55OmYueSxzLno9Zz9sLno6Zi56LHRoaXMuY2xvc2VzdFBvaW50VG9Qb2ludChzLGkpO2NvbnN0IHc9cy5kaXN0YW5jZVRvU3F1YXJlZChpKTtpZih3PHAmJihwPXcsbyYmby5jb3B5KGkpLGgmJmguY29weShzKSx3PGMpKXJldHVybiBNYXRoLnNxcnQodyl9Zm9yKGxldCB4PTA7eDwxMjt4Kyspe2NvbnN0IG09dFt4XTtmb3IobGV0IGc9MDtnPDEyO2crKyl7Y29uc3Qgdz1lW2ddO3VpKG0sdyxpLHMpO2NvbnN0IE09aS5kaXN0YW5jZVRvU3F1YXJlZChzKTtpZihNPHAmJihwPU0sbyYmby5jb3B5KGkpLGgmJmguY29weShzKSxNPGMpKXJldHVybiBNYXRoLnNxcnQoTSl9fXJldHVybiBNYXRoLnNxcnQocCl9fSgpO2NsYXNzIGRpe2NvbnN0cnVjdG9yKHQpe3RoaXMuX2dldE5ld1ByaW1pdGl2ZT10LHRoaXMuX3ByaW1pdGl2ZXM9W119Z2V0UHJpbWl0aXZlKCl7Y29uc3QgdD10aGlzLl9wcmltaXRpdmVzO3JldHVybiB0Lmxlbmd0aD09PTA/dGhpcy5fZ2V0TmV3UHJpbWl0aXZlKCk6dC5wb3AoKX1yZWxlYXNlUHJpbWl0aXZlKHQpe3RoaXMuX3ByaW1pdGl2ZXMucHVzaCh0KX19Y2xhc3MgJHMgZXh0ZW5kcyBkaXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCgpPT5uZXcgcnQpfX1jb25zdCB0dD1uZXcgJHM7Y2xhc3MganN7Y29uc3RydWN0b3IoKXt0aGlzLmZsb2F0MzJBcnJheT1udWxsLHRoaXMudWludDE2QXJyYXk9bnVsbCx0aGlzLnVpbnQzMkFycmF5PW51bGw7Y29uc3QgdD1bXTtsZXQgZT1udWxsO3RoaXMuc2V0QnVmZmVyPWk9PntlJiZ0LnB1c2goZSksZT1pLHRoaXMuZmxvYXQzMkFycmF5PW5ldyBGbG9hdDMyQXJyYXkoaSksdGhpcy51aW50MTZBcnJheT1uZXcgVWludDE2QXJyYXkoaSksdGhpcy51aW50MzJBcnJheT1uZXcgVWludDMyQXJyYXkoaSl9LHRoaXMuY2xlYXJCdWZmZXI9KCk9PntlPW51bGwsdGhpcy5mbG9hdDMyQXJyYXk9bnVsbCx0aGlzLnVpbnQxNkFycmF5PW51bGwsdGhpcy51aW50MzJBcnJheT1udWxsLHQubGVuZ3RoIT09MCYmdGhpcy5zZXRCdWZmZXIodC5wb3AoKSl9fX1jb25zdCBrPW5ldyBqcztsZXQgenQscXQ7Y29uc3QgdnQ9W10sU2U9bmV3IGRpKCgpPT5uZXcgVyk7ZnVuY3Rpb24gR3ModSx0LGUsaSxzLG4pe3p0PVNlLmdldFByaW1pdGl2ZSgpLHF0PVNlLmdldFByaW1pdGl2ZSgpLHZ0LnB1c2goenQscXQpLGsuc2V0QnVmZmVyKHUuX3Jvb3RzW3RdKTtjb25zdCByPXBpKDAsdS5nZW9tZXRyeSxlLGkscyxuKTtrLmNsZWFyQnVmZmVyKCksU2UucmVsZWFzZVByaW1pdGl2ZSh6dCksU2UucmVsZWFzZVByaW1pdGl2ZShxdCksdnQucG9wKCksdnQucG9wKCk7Y29uc3QgYT12dC5sZW5ndGg7cmV0dXJuIGE+MCYmKHF0PXZ0W2EtMV0senQ9dnRbYS0yXSkscn1mdW5jdGlvbiBwaSh1LHQsZSxpLHM9bnVsbCxuPTAscj0wKXtjb25zdHtmbG9hdDMyQXJyYXk6YSx1aW50MTZBcnJheTpvLHVpbnQzMkFycmF5Omh9PWs7bGV0IGM9dSoyO2lmKFkoYyxvKSl7Y29uc3QgbD0kKHUsaCksZD1KKGMsbyk7cmV0dXJuIEwodSxhLHp0KSxpKGwsZCwhMSxyLG4rdSx6dCl9ZWxzZXtsZXQgVD1mdW5jdGlvbihQKXtjb25zdHt1aW50MTZBcnJheTpFLHVpbnQzMkFycmF5OkZ9PWs7bGV0IFU9UCoyO2Zvcig7IVkoVSxFKTspUD1RKFApLFU9UCoyO3JldHVybiAkKFAsRil9LEM9ZnVuY3Rpb24oUCl7Y29uc3R7dWludDE2QXJyYXk6RSx1aW50MzJBcnJheTpGfT1rO2xldCBVPVAqMjtmb3IoOyFZKFUsRSk7KVA9SyhQLEYpLFU9UCoyO3JldHVybiAkKFAsRikrSihVLEUpfTtjb25zdCBsPVEodSksZD1LKHUsaCk7bGV0IHA9bCx5PWQseCxtLGcsdztpZihzJiYoZz16dCx3PXF0LEwocCxhLGcpLEwoeSxhLHcpLHg9cyhnKSxtPXModyksbTx4KSl7cD1kLHk9bDtjb25zdCBQPXg7eD1tLG09UCxnPXd9Z3x8KGc9enQsTChwLGEsZykpO2NvbnN0IE09WShwKjIsbyksYj1lKGcsTSx4LHIrMSxuK3ApO2xldCB6O2lmKGI9PT12aSl7Y29uc3QgUD1UKHApLEY9QyhwKS1QO3o9aShQLEYsITAscisxLG4rcCxnKX1lbHNlIHo9YiYmcGkocCx0LGUsaSxzLG4scisxKTtpZih6KXJldHVybiEwO3c9cXQsTCh5LGEsdyk7Y29uc3QgXz1ZKHkqMixvKSxTPWUodyxfLG0scisxLG4reSk7bGV0IEI7aWYoUz09PXZpKXtjb25zdCBQPVQoeSksRj1DKHkpLVA7Qj1pKFAsRiwhMCxyKzEsbit5LHcpfWVsc2UgQj1TJiZwaSh5LHQsZSxpLHMsbixyKzEpO3JldHVybiEhQn19Y29uc3Qgb2U9bmV3IEEsbWk9bmV3IEE7ZnVuY3Rpb24gSnModSx0LGU9e30saT0wLHM9MS8wKXtjb25zdCBuPWkqaSxyPXMqcztsZXQgYT0xLzAsbz1udWxsO2lmKHUuc2hhcGVjYXN0KHtib3VuZHNUcmF2ZXJzZU9yZGVyOmM9PihvZS5jb3B5KHQpLmNsYW1wKGMubWluLGMubWF4KSxvZS5kaXN0YW5jZVRvU3F1YXJlZCh0KSksaW50ZXJzZWN0c0JvdW5kczooYyxmLGwpPT5sPGEmJmw8cixpbnRlcnNlY3RzVHJpYW5nbGU6KGMsZik9PntjLmNsb3Nlc3RQb2ludFRvUG9pbnQodCxvZSk7Y29uc3QgbD10LmRpc3RhbmNlVG9TcXVhcmVkKG9lKTtyZXR1cm4gbDxhJiYobWkuY29weShvZSksYT1sLG89ZiksbDxufX0pLGE9PT0xLzApcmV0dXJuIG51bGw7Y29uc3QgaD1NYXRoLnNxcnQoYSk7cmV0dXJuIGUucG9pbnQ/ZS5wb2ludC5jb3B5KG1pKTplLnBvaW50PW1pLmNsb25lKCksZS5kaXN0YW5jZT1oLGUuZmFjZUluZGV4PW8sZX1jb25zdCBXdD1uZXcgQSxYdD1uZXcgQSxPdD1uZXcgQSxCZT1uZXcgdixUZT1uZXcgdixQZT1uZXcgdixKaT1uZXcgQSxRaT1uZXcgQSxLaT1uZXcgQSxDZT1uZXcgQTtmdW5jdGlvbiBRcyh1LHQsZSxpLHMsbixyLGEpe2xldCBvO2lmKG49PT0xP289dS5pbnRlcnNlY3RUcmlhbmdsZShpLGUsdCwhMCxzKTpvPXUuaW50ZXJzZWN0VHJpYW5nbGUodCxlLGksbiE9PTIscyksbz09PW51bGwpcmV0dXJuIG51bGw7Y29uc3QgaD11Lm9yaWdpbi5kaXN0YW5jZVRvKHMpO3JldHVybiBoPHJ8fGg+YT9udWxsOntkaXN0YW5jZTpoLHBvaW50OnMuY2xvbmUoKX19ZnVuY3Rpb24gS3ModSx0LGUsaSxzLG4scixhLG8saCxjKXtXdC5mcm9tQnVmZmVyQXR0cmlidXRlKHQsbiksWHQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSh0LHIpLE90LmZyb21CdWZmZXJBdHRyaWJ1dGUodCxhKTtjb25zdCBmPVFzKHUsV3QsWHQsT3QsQ2UsbyxoLGMpO2lmKGYpe2kmJihCZS5mcm9tQnVmZmVyQXR0cmlidXRlKGksbiksVGUuZnJvbUJ1ZmZlckF0dHJpYnV0ZShpLHIpLFBlLmZyb21CdWZmZXJBdHRyaWJ1dGUoaSxhKSxmLnV2PW50LmdldEludGVycG9sYXRpb24oQ2UsV3QsWHQsT3QsQmUsVGUsUGUsbmV3IHYpKSxzJiYoQmUuZnJvbUJ1ZmZlckF0dHJpYnV0ZShzLG4pLFRlLmZyb21CdWZmZXJBdHRyaWJ1dGUocyxyKSxQZS5mcm9tQnVmZmVyQXR0cmlidXRlKHMsYSksZi51djE9bnQuZ2V0SW50ZXJwb2xhdGlvbihDZSxXdCxYdCxPdCxCZSxUZSxQZSxuZXcgdikpLGUmJihKaS5mcm9tQnVmZmVyQXR0cmlidXRlKGUsbiksUWkuZnJvbUJ1ZmZlckF0dHJpYnV0ZShlLHIpLEtpLmZyb21CdWZmZXJBdHRyaWJ1dGUoZSxhKSxmLm5vcm1hbD1udC5nZXRJbnRlcnBvbGF0aW9uKENlLFd0LFh0LE90LEppLFFpLEtpLG5ldyBBKSxmLm5vcm1hbC5kb3QodS5kaXJlY3Rpb24pPjAmJmYubm9ybWFsLm11bHRpcGx5U2NhbGFyKC0xKSk7Y29uc3QgbD17YTpuLGI6cixjOmEsbm9ybWFsOm5ldyBBLG1hdGVyaWFsSW5kZXg6MH07bnQuZ2V0Tm9ybWFsKFd0LFh0LE90LGwubm9ybWFsKSxmLmZhY2U9bCxmLmZhY2VJbmRleD1ufXJldHVybiBmfWZ1bmN0aW9uIEVlKHUsdCxlLGkscyxuLHIpe2NvbnN0IGE9aSozO2xldCBvPWErMCxoPWErMSxjPWErMjtjb25zdCBmPXUuaW5kZXg7dS5pbmRleCYmKG89Zi5nZXRYKG8pLGg9Zi5nZXRYKGgpLGM9Zi5nZXRYKGMpKTtjb25zdHtwb3NpdGlvbjpsLG5vcm1hbDpkLHV2OnAsdXYxOnl9PXUuYXR0cmlidXRlcyx4PUtzKGUsbCxkLHAseSxvLGgsYyx0LG4scik7cmV0dXJuIHg/KHguZmFjZUluZGV4PWkscyYmcy5wdXNoKHgpLHgpOm51bGx9ZnVuY3Rpb24gRCh1LHQsZSxpKXtjb25zdCBzPXUuYSxuPXUuYixyPXUuYztsZXQgYT10LG89dCsxLGg9dCsyO2UmJihhPWUuZ2V0WChhKSxvPWUuZ2V0WChvKSxoPWUuZ2V0WChoKSkscy54PWkuZ2V0WChhKSxzLnk9aS5nZXRZKGEpLHMuej1pLmdldFooYSksbi54PWkuZ2V0WChvKSxuLnk9aS5nZXRZKG8pLG4uej1pLmdldFoobyksci54PWkuZ2V0WChoKSxyLnk9aS5nZXRZKGgpLHIuej1pLmdldFooaCl9ZnVuY3Rpb24gdG4odSx0LGUsaSxzLG4scixhKXtjb25zdHtnZW9tZXRyeTpvLF9pbmRpcmVjdEJ1ZmZlcjpofT11O2ZvcihsZXQgYz1pLGY9aStzO2M8ZjtjKyspRWUobyx0LGUsYyxuLHIsYSl9ZnVuY3Rpb24gZW4odSx0LGUsaSxzLG4scil7Y29uc3R7Z2VvbWV0cnk6YSxfaW5kaXJlY3RCdWZmZXI6b309dTtsZXQgaD0xLzAsYz1udWxsO2ZvcihsZXQgZj1pLGw9aStzO2Y8bDtmKyspe2xldCBkO2Q9RWUoYSx0LGUsZixudWxsLG4sciksZCYmZC5kaXN0YW5jZTxoJiYoYz1kLGg9ZC5kaXN0YW5jZSl9cmV0dXJuIGN9ZnVuY3Rpb24gc24odSx0LGUsaSxzLG4scil7Y29uc3R7Z2VvbWV0cnk6YX09ZSx7aW5kZXg6b309YSxoPWEuYXR0cmlidXRlcy5wb3NpdGlvbjtmb3IobGV0IGM9dSxmPXQrdTtjPGY7YysrKXtsZXQgbDtpZihsPWMsRChyLGwqMyxvLGgpLHIubmVlZHNVcGRhdGU9ITAsaShyLGwscyxuKSlyZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBubih1LHQ9bnVsbCl7dCYmQXJyYXkuaXNBcnJheSh0KSYmKHQ9bmV3IFNldCh0KSk7Y29uc3QgZT11Lmdlb21ldHJ5LGk9ZS5pbmRleD9lLmluZGV4LmFycmF5Om51bGwscz1lLmF0dHJpYnV0ZXMucG9zaXRpb247bGV0IG4scixhLG8saD0wO2NvbnN0IGM9dS5fcm9vdHM7Zm9yKGxldCBsPTAsZD1jLmxlbmd0aDtsPGQ7bCsrKW49Y1tsXSxyPW5ldyBVaW50MzJBcnJheShuKSxhPW5ldyBVaW50MTZBcnJheShuKSxvPW5ldyBGbG9hdDMyQXJyYXkobiksZigwLGgpLGgrPW4uYnl0ZUxlbmd0aDtmdW5jdGlvbiBmKGwsZCxwPSExKXtjb25zdCB5PWwqMjtpZihhW3krMTVdPT09X2Upe2NvbnN0IG09cltsKzZdLGc9YVt5KzE0XTtsZXQgdz0xLzAsTT0xLzAsYj0xLzAsej0tMS8wLF89LTEvMCxTPS0xLzA7Zm9yKGxldCBCPTMqbSxUPTMqKG0rZyk7QjxUO0IrKyl7bGV0IEM9aVtCXTtjb25zdCBQPXMuZ2V0WChDKSxFPXMuZ2V0WShDKSxGPXMuZ2V0WihDKTtQPHcmJih3PVApLFA+eiYmKHo9UCksRTxNJiYoTT1FKSxFPl8mJihfPUUpLEY8YiYmKGI9RiksRj5TJiYoUz1GKX1yZXR1cm4gb1tsKzBdIT09d3x8b1tsKzFdIT09TXx8b1tsKzJdIT09Ynx8b1tsKzNdIT09enx8b1tsKzRdIT09X3x8b1tsKzVdIT09Uz8ob1tsKzBdPXcsb1tsKzFdPU0sb1tsKzJdPWIsb1tsKzNdPXosb1tsKzRdPV8sb1tsKzVdPVMsITApOiExfWVsc2V7Y29uc3QgbT1sKzgsZz1yW2wrNl0sdz1tK2QsTT1nK2Q7bGV0IGI9cCx6PSExLF89ITE7dD9ifHwoej10Lmhhcyh3KSxfPXQuaGFzKE0pLGI9IXomJiFfKTooej0hMCxfPSEwKTtjb25zdCBTPWJ8fHosQj1ifHxfO2xldCBUPSExO1MmJihUPWYobSxkLGIpKTtsZXQgQz0hMTtCJiYoQz1mKGcsZCxiKSk7Y29uc3QgUD1UfHxDO2lmKFApZm9yKGxldCBFPTA7RTwzO0UrKyl7Y29uc3QgRj1tK0UsVT1nK0UsUj1vW0ZdLGo9b1tGKzNdLGh0PW9bVV0sbHQ9b1tVKzNdO29bbCtFXT1SPGh0P1I6aHQsb1tsK0UrM109aj5sdD9qOmx0fXJldHVybiBQfX19ZnVuY3Rpb24gU3QodSx0LGUsaSxzKXtsZXQgbixyLGEsbyxoLGM7Y29uc3QgZj0xL2UuZGlyZWN0aW9uLngsbD0xL2UuZGlyZWN0aW9uLnksZD0xL2UuZGlyZWN0aW9uLnoscD1lLm9yaWdpbi54LHk9ZS5vcmlnaW4ueSx4PWUub3JpZ2luLno7bGV0IG09dFt1XSxnPXRbdSszXSx3PXRbdSsxXSxNPXRbdSszKzFdLGI9dFt1KzJdLHo9dFt1KzMrMl07cmV0dXJuIGY+PTA/KG49KG0tcCkqZixyPShnLXApKmYpOihuPShnLXApKmYscj0obS1wKSpmKSxsPj0wPyhhPSh3LXkpKmwsbz0oTS15KSpsKTooYT0oTS15KSpsLG89KHcteSkqbCksbj5vfHxhPnJ8fCgoYT5ufHxpc05hTihuKSkmJihuPWEpLChvPHJ8fGlzTmFOKHIpKSYmKHI9byksZD49MD8oaD0oYi14KSpkLGM9KHoteCkqZCk6KGg9KHoteCkqZCxjPShiLXgpKmQpLG4+Y3x8aD5yKT8hMTooKGg+bnx8biE9PW4pJiYobj1oKSwoYzxyfHxyIT09cikmJihyPWMpLG48PXMmJnI+PWkpfWZ1bmN0aW9uIHJuKHUsdCxlLGkscyxuLHIsYSl7Y29uc3R7Z2VvbWV0cnk6byxfaW5kaXJlY3RCdWZmZXI6aH09dTtmb3IobGV0IGM9aSxmPWkrcztjPGY7YysrKXtsZXQgbD1oP2hbY106YztFZShvLHQsZSxsLG4scixhKX19ZnVuY3Rpb24gb24odSx0LGUsaSxzLG4scil7Y29uc3R7Z2VvbWV0cnk6YSxfaW5kaXJlY3RCdWZmZXI6b309dTtsZXQgaD0xLzAsYz1udWxsO2ZvcihsZXQgZj1pLGw9aStzO2Y8bDtmKyspe2xldCBkO2Q9RWUoYSx0LGUsbz9vW2ZdOmYsbnVsbCxuLHIpLGQmJmQuZGlzdGFuY2U8aCYmKGM9ZCxoPWQuZGlzdGFuY2UpfXJldHVybiBjfWZ1bmN0aW9uIGFuKHUsdCxlLGkscyxuLHIpe2NvbnN0e2dlb21ldHJ5OmF9PWUse2luZGV4Om99PWEsaD1hLmF0dHJpYnV0ZXMucG9zaXRpb247Zm9yKGxldCBjPXUsZj10K3U7YzxmO2MrKyl7bGV0IGw7aWYobD1lLnJlc29sdmVUcmlhbmdsZUluZGV4KGMpLEQocixsKjMsbyxoKSxyLm5lZWRzVXBkYXRlPSEwLGkocixsLHMsbikpcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gY24odSx0LGUsaSxzLG4scil7ay5zZXRCdWZmZXIodS5fcm9vdHNbdF0pLHlpKDAsdSxlLGkscyxuLHIpLGsuY2xlYXJCdWZmZXIoKX1mdW5jdGlvbiB5aSh1LHQsZSxpLHMsbixyKXtjb25zdHtmbG9hdDMyQXJyYXk6YSx1aW50MTZBcnJheTpvLHVpbnQzMkFycmF5Omh9PWssYz11KjI7aWYoWShjLG8pKXtjb25zdCBsPSQodSxoKSxkPUooYyxvKTt0bih0LGUsaSxsLGQscyxuLHIpfWVsc2V7Y29uc3QgbD1RKHUpO1N0KGwsYSxpLG4scikmJnlpKGwsdCxlLGkscyxuLHIpO2NvbnN0IGQ9Syh1LGgpO1N0KGQsYSxpLG4scikmJnlpKGQsdCxlLGkscyxuLHIpfX1jb25zdCBobj1bIngiLCJ5IiwieiJdO2Z1bmN0aW9uIGxuKHUsdCxlLGkscyxuKXtrLnNldEJ1ZmZlcih1Ll9yb290c1t0XSk7Y29uc3Qgcj14aSgwLHUsZSxpLHMsbik7cmV0dXJuIGsuY2xlYXJCdWZmZXIoKSxyfWZ1bmN0aW9uIHhpKHUsdCxlLGkscyxuKXtjb25zdHtmbG9hdDMyQXJyYXk6cix1aW50MTZBcnJheTphLHVpbnQzMkFycmF5Om99PWs7bGV0IGg9dSoyO2lmKFkoaCxhKSl7Y29uc3QgZj0kKHUsbyksbD1KKGgsYSk7cmV0dXJuIGVuKHQsZSxpLGYsbCxzLG4pfWVsc2V7Y29uc3QgZj0kaSh1LG8pLGw9aG5bZl0scD1pLmRpcmVjdGlvbltsXT49MDtsZXQgeSx4O3A/KHk9USh1KSx4PUsodSxvKSk6KHk9Syh1LG8pLHg9USh1KSk7Y29uc3QgZz1TdCh5LHIsaSxzLG4pP3hpKHksdCxlLGkscyxuKTpudWxsO2lmKGcpe2NvbnN0IGI9Zy5wb2ludFtsXTtpZihwP2I8PXJbeCtmXTpiPj1yW3grZiszXSlyZXR1cm4gZ31jb25zdCBNPVN0KHgscixpLHMsbik/eGkoeCx0LGUsaSxzLG4pOm51bGw7cmV0dXJuIGcmJk0/Zy5kaXN0YW5jZTw9TS5kaXN0YW5jZT9nOk06Z3x8TXx8bnVsbH19Y29uc3QgRmU9bmV3IFcsWXQ9bmV3IHJ0LFp0PW5ldyBydCxhZT1uZXcgTix0cz1uZXcgWCxVZT1uZXcgWDtmdW5jdGlvbiB1bih1LHQsZSxpKXtrLnNldEJ1ZmZlcih1Ll9yb290c1t0XSk7Y29uc3Qgcz1naSgwLHUsZSxpKTtyZXR1cm4gay5jbGVhckJ1ZmZlcigpLHN9ZnVuY3Rpb24gZ2kodSx0LGUsaSxzPW51bGwpe2NvbnN0e2Zsb2F0MzJBcnJheTpuLHVpbnQxNkFycmF5OnIsdWludDMyQXJyYXk6YX09aztsZXQgbz11KjI7aWYocz09PW51bGwmJihlLmJvdW5kaW5nQm94fHxlLmNvbXB1dGVCb3VuZGluZ0JveCgpLHRzLnNldChlLmJvdW5kaW5nQm94Lm1pbixlLmJvdW5kaW5nQm94Lm1heCxpKSxzPXRzKSxZKG8scikpe2NvbnN0IGM9dC5nZW9tZXRyeSxmPWMuaW5kZXgsbD1jLmF0dHJpYnV0ZXMucG9zaXRpb24sZD1lLmluZGV4LHA9ZS5hdHRyaWJ1dGVzLnBvc2l0aW9uLHk9JCh1LGEpLHg9SihvLHIpO2lmKGFlLmNvcHkoaSkuaW52ZXJ0KCksZS5ib3VuZHNUcmVlKXJldHVybiBMKHUsbixVZSksVWUubWF0cml4LmNvcHkoYWUpLFVlLm5lZWRzVXBkYXRlPSEwLGUuYm91bmRzVHJlZS5zaGFwZWNhc3Qoe2ludGVyc2VjdHNCb3VuZHM6Zz0+VWUuaW50ZXJzZWN0c0JveChnKSxpbnRlcnNlY3RzVHJpYW5nbGU6Zz0+e2cuYS5hcHBseU1hdHJpeDQoaSksZy5iLmFwcGx5TWF0cml4NChpKSxnLmMuYXBwbHlNYXRyaXg0KGkpLGcubmVlZHNVcGRhdGU9ITA7Zm9yKGxldCB3PXkqMyxNPSh4K3kpKjM7dzxNO3crPTMpaWYoRChadCx3LGYsbCksWnQubmVlZHNVcGRhdGU9ITAsZy5pbnRlcnNlY3RzVHJpYW5nbGUoWnQpKXJldHVybiEwO3JldHVybiExfX0pO2ZvcihsZXQgbT15KjMsZz0oeCt5KSozO208ZzttKz0zKXtEKFl0LG0sZixsKSxZdC5hLmFwcGx5TWF0cml4NChhZSksWXQuYi5hcHBseU1hdHJpeDQoYWUpLFl0LmMuYXBwbHlNYXRyaXg0KGFlKSxZdC5uZWVkc1VwZGF0ZT0hMDtmb3IobGV0IHc9MCxNPWQuY291bnQ7dzxNO3crPTMpaWYoRChadCx3LGQscCksWnQubmVlZHNVcGRhdGU9ITAsWXQuaW50ZXJzZWN0c1RyaWFuZ2xlKFp0KSlyZXR1cm4hMH19ZWxzZXtjb25zdCBjPXUrOCxmPWFbdSs2XTtyZXR1cm4gTChjLG4sRmUpLCEhKHMuaW50ZXJzZWN0c0JveChGZSkmJmdpKGMsdCxlLGkscyl8fChMKGYsbixGZSkscy5pbnRlcnNlY3RzQm94KEZlKSYmZ2koZix0LGUsaSxzKSkpfX1jb25zdCBSZT1uZXcgTixiaT1uZXcgWCxjZT1uZXcgWCxmbj1uZXcgQSxkbj1uZXcgQSxwbj1uZXcgQSxtbj1uZXcgQTtmdW5jdGlvbiB5bih1LHQsZSxpPXt9LHM9e30sbj0wLHI9MS8wKXt0LmJvdW5kaW5nQm94fHx0LmNvbXB1dGVCb3VuZGluZ0JveCgpLGJpLnNldCh0LmJvdW5kaW5nQm94Lm1pbix0LmJvdW5kaW5nQm94Lm1heCxlKSxiaS5uZWVkc1VwZGF0ZT0hMDtjb25zdCBhPXUuZ2VvbWV0cnksbz1hLmF0dHJpYnV0ZXMucG9zaXRpb24saD1hLmluZGV4LGM9dC5hdHRyaWJ1dGVzLnBvc2l0aW9uLGY9dC5pbmRleCxsPXR0LmdldFByaW1pdGl2ZSgpLGQ9dHQuZ2V0UHJpbWl0aXZlKCk7bGV0IHA9Zm4seT1kbix4PW51bGwsbT1udWxsO3MmJih4PXBuLG09bW4pO2xldCBnPTEvMCx3PW51bGwsTT1udWxsO3JldHVybiBSZS5jb3B5KGUpLmludmVydCgpLGNlLm1hdHJpeC5jb3B5KFJlKSx1LnNoYXBlY2FzdCh7Ym91bmRzVHJhdmVyc2VPcmRlcjpiPT5iaS5kaXN0YW5jZVRvQm94KGIpLGludGVyc2VjdHNCb3VuZHM6KGIseixfKT0+XzxnJiZfPHI/KHomJihjZS5taW4uY29weShiLm1pbiksY2UubWF4LmNvcHkoYi5tYXgpLGNlLm5lZWRzVXBkYXRlPSEwKSwhMCk6ITEsaW50ZXJzZWN0c1JhbmdlOihiLHopPT57aWYodC5ib3VuZHNUcmVlKXJldHVybiB0LmJvdW5kc1RyZWUuc2hhcGVjYXN0KHtib3VuZHNUcmF2ZXJzZU9yZGVyOlM9PmNlLmRpc3RhbmNlVG9Cb3goUyksaW50ZXJzZWN0c0JvdW5kczooUyxCLFQpPT5UPGcmJlQ8cixpbnRlcnNlY3RzUmFuZ2U6KFMsQik9Pntmb3IobGV0IFQ9UyxDPVMrQjtUPEM7VCsrKXtEKGQsMypULGYsYyksZC5hLmFwcGx5TWF0cml4NChlKSxkLmIuYXBwbHlNYXRyaXg0KGUpLGQuYy5hcHBseU1hdHJpeDQoZSksZC5uZWVkc1VwZGF0ZT0hMDtmb3IobGV0IFA9YixFPWIrejtQPEU7UCsrKXtEKGwsMypQLGgsbyksbC5uZWVkc1VwZGF0ZT0hMDtjb25zdCBGPWwuZGlzdGFuY2VUb1RyaWFuZ2xlKGQscCx4KTtpZihGPGcmJih5LmNvcHkocCksbSYmbS5jb3B5KHgpLGc9Rix3PVAsTT1UKSxGPG4pcmV0dXJuITB9fX19KTt7Y29uc3QgXz1OdCh0KTtmb3IobGV0IFM9MCxCPV87UzxCO1MrKyl7RChkLDMqUyxmLGMpLGQuYS5hcHBseU1hdHJpeDQoZSksZC5iLmFwcGx5TWF0cml4NChlKSxkLmMuYXBwbHlNYXRyaXg0KGUpLGQubmVlZHNVcGRhdGU9ITA7Zm9yKGxldCBUPWIsQz1iK3o7VDxDO1QrKyl7RChsLDMqVCxoLG8pLGwubmVlZHNVcGRhdGU9ITA7Y29uc3QgUD1sLmRpc3RhbmNlVG9UcmlhbmdsZShkLHAseCk7aWYoUDxnJiYoeS5jb3B5KHApLG0mJm0uY29weSh4KSxnPVAsdz1ULE09UyksUDxuKXJldHVybiEwfX19fX0pLHR0LnJlbGVhc2VQcmltaXRpdmUobCksdHQucmVsZWFzZVByaW1pdGl2ZShkKSxnPT09MS8wP251bGw6KGkucG9pbnQ/aS5wb2ludC5jb3B5KHkpOmkucG9pbnQ9eS5jbG9uZSgpLGkuZGlzdGFuY2U9ZyxpLmZhY2VJbmRleD13LHMmJihzLnBvaW50P3MucG9pbnQuY29weShtKTpzLnBvaW50PW0uY2xvbmUoKSxzLnBvaW50LmFwcGx5TWF0cml4NChSZSkseS5hcHBseU1hdHJpeDQoUmUpLHMuZGlzdGFuY2U9eS5zdWIocy5wb2ludCkubGVuZ3RoKCkscy5mYWNlSW5kZXg9TSksaSl9ZnVuY3Rpb24geG4odSx0PW51bGwpe3QmJkFycmF5LmlzQXJyYXkodCkmJih0PW5ldyBTZXQodCkpO2NvbnN0IGU9dS5nZW9tZXRyeSxpPWUuaW5kZXg/ZS5pbmRleC5hcnJheTpudWxsLHM9ZS5hdHRyaWJ1dGVzLnBvc2l0aW9uO2xldCBuLHIsYSxvLGg9MDtjb25zdCBjPXUuX3Jvb3RzO2ZvcihsZXQgbD0wLGQ9Yy5sZW5ndGg7bDxkO2wrKyluPWNbbF0scj1uZXcgVWludDMyQXJyYXkobiksYT1uZXcgVWludDE2QXJyYXkobiksbz1uZXcgRmxvYXQzMkFycmF5KG4pLGYoMCxoKSxoKz1uLmJ5dGVMZW5ndGg7ZnVuY3Rpb24gZihsLGQscD0hMSl7Y29uc3QgeT1sKjI7aWYoYVt5KzE1XT09PV9lKXtjb25zdCBtPXJbbCs2XSxnPWFbeSsxNF07bGV0IHc9MS8wLE09MS8wLGI9MS8wLHo9LTEvMCxfPS0xLzAsUz0tMS8wO2ZvcihsZXQgQj1tLFQ9bStnO0I8VDtCKyspe2NvbnN0IEM9Myp1LnJlc29sdmVUcmlhbmdsZUluZGV4KEIpO2ZvcihsZXQgUD0wO1A8MztQKyspe2xldCBFPUMrUDtFPWk/aVtFXTpFO2NvbnN0IEY9cy5nZXRYKEUpLFU9cy5nZXRZKEUpLFI9cy5nZXRaKEUpO0Y8dyYmKHc9RiksRj56JiYoej1GKSxVPE0mJihNPVUpLFU+XyYmKF89VSksUjxiJiYoYj1SKSxSPlMmJihTPVIpfX1yZXR1cm4gb1tsKzBdIT09d3x8b1tsKzFdIT09TXx8b1tsKzJdIT09Ynx8b1tsKzNdIT09enx8b1tsKzRdIT09X3x8b1tsKzVdIT09Uz8ob1tsKzBdPXcsb1tsKzFdPU0sb1tsKzJdPWIsb1tsKzNdPXosb1tsKzRdPV8sb1tsKzVdPVMsITApOiExfWVsc2V7Y29uc3QgbT1sKzgsZz1yW2wrNl0sdz1tK2QsTT1nK2Q7bGV0IGI9cCx6PSExLF89ITE7dD9ifHwoej10Lmhhcyh3KSxfPXQuaGFzKE0pLGI9IXomJiFfKTooej0hMCxfPSEwKTtjb25zdCBTPWJ8fHosQj1ifHxfO2xldCBUPSExO1MmJihUPWYobSxkLGIpKTtsZXQgQz0hMTtCJiYoQz1mKGcsZCxiKSk7Y29uc3QgUD1UfHxDO2lmKFApZm9yKGxldCBFPTA7RTwzO0UrKyl7Y29uc3QgRj1tK0UsVT1nK0UsUj1vW0ZdLGo9b1tGKzNdLGh0PW9bVV0sbHQ9b1tVKzNdO29bbCtFXT1SPGh0P1I6aHQsb1tsK0UrM109aj5sdD9qOmx0fXJldHVybiBQfX19ZnVuY3Rpb24gZ24odSx0LGUsaSxzLG4scil7ay5zZXRCdWZmZXIodS5fcm9vdHNbdF0pLHdpKDAsdSxlLGkscyxuLHIpLGsuY2xlYXJCdWZmZXIoKX1mdW5jdGlvbiB3aSh1LHQsZSxpLHMsbixyKXtjb25zdHtmbG9hdDMyQXJyYXk6YSx1aW50MTZBcnJheTpvLHVpbnQzMkFycmF5Omh9PWssYz11KjI7aWYoWShjLG8pKXtjb25zdCBsPSQodSxoKSxkPUooYyxvKTtybih0LGUsaSxsLGQscyxuLHIpfWVsc2V7Y29uc3QgbD1RKHUpO1N0KGwsYSxpLG4scikmJndpKGwsdCxlLGkscyxuLHIpO2NvbnN0IGQ9Syh1LGgpO1N0KGQsYSxpLG4scikmJndpKGQsdCxlLGkscyxuLHIpfX1jb25zdCBibj1bIngiLCJ5IiwieiJdO2Z1bmN0aW9uIHduKHUsdCxlLGkscyxuKXtrLnNldEJ1ZmZlcih1Ll9yb290c1t0XSk7Y29uc3Qgcj1faSgwLHUsZSxpLHMsbik7cmV0dXJuIGsuY2xlYXJCdWZmZXIoKSxyfWZ1bmN0aW9uIF9pKHUsdCxlLGkscyxuKXtjb25zdHtmbG9hdDMyQXJyYXk6cix1aW50MTZBcnJheTphLHVpbnQzMkFycmF5Om99PWs7bGV0IGg9dSoyO2lmKFkoaCxhKSl7Y29uc3QgZj0kKHUsbyksbD1KKGgsYSk7cmV0dXJuIG9uKHQsZSxpLGYsbCxzLG4pfWVsc2V7Y29uc3QgZj0kaSh1LG8pLGw9Ym5bZl0scD1pLmRpcmVjdGlvbltsXT49MDtsZXQgeSx4O3A/KHk9USh1KSx4PUsodSxvKSk6KHk9Syh1LG8pLHg9USh1KSk7Y29uc3QgZz1TdCh5LHIsaSxzLG4pP19pKHksdCxlLGkscyxuKTpudWxsO2lmKGcpe2NvbnN0IGI9Zy5wb2ludFtsXTtpZihwP2I8PXJbeCtmXTpiPj1yW3grZiszXSlyZXR1cm4gZ31jb25zdCBNPVN0KHgscixpLHMsbik/X2koeCx0LGUsaSxzLG4pOm51bGw7cmV0dXJuIGcmJk0/Zy5kaXN0YW5jZTw9TS5kaXN0YW5jZT9nOk06Z3x8TXx8bnVsbH19Y29uc3Qga2U9bmV3IFcsSHQ9bmV3IHJ0LCR0PW5ldyBydCxoZT1uZXcgTixlcz1uZXcgWCxMZT1uZXcgWDtmdW5jdGlvbiBfbih1LHQsZSxpKXtrLnNldEJ1ZmZlcih1Ll9yb290c1t0XSk7Y29uc3Qgcz1NaSgwLHUsZSxpKTtyZXR1cm4gay5jbGVhckJ1ZmZlcigpLHN9ZnVuY3Rpb24gTWkodSx0LGUsaSxzPW51bGwpe2NvbnN0e2Zsb2F0MzJBcnJheTpuLHVpbnQxNkFycmF5OnIsdWludDMyQXJyYXk6YX09aztsZXQgbz11KjI7aWYocz09PW51bGwmJihlLmJvdW5kaW5nQm94fHxlLmNvbXB1dGVCb3VuZGluZ0JveCgpLGVzLnNldChlLmJvdW5kaW5nQm94Lm1pbixlLmJvdW5kaW5nQm94Lm1heCxpKSxzPWVzKSxZKG8scikpe2NvbnN0IGM9dC5nZW9tZXRyeSxmPWMuaW5kZXgsbD1jLmF0dHJpYnV0ZXMucG9zaXRpb24sZD1lLmluZGV4LHA9ZS5hdHRyaWJ1dGVzLnBvc2l0aW9uLHk9JCh1LGEpLHg9SihvLHIpO2lmKGhlLmNvcHkoaSkuaW52ZXJ0KCksZS5ib3VuZHNUcmVlKXJldHVybiBMKHUsbixMZSksTGUubWF0cml4LmNvcHkoaGUpLExlLm5lZWRzVXBkYXRlPSEwLGUuYm91bmRzVHJlZS5zaGFwZWNhc3Qoe2ludGVyc2VjdHNCb3VuZHM6Zz0+TGUuaW50ZXJzZWN0c0JveChnKSxpbnRlcnNlY3RzVHJpYW5nbGU6Zz0+e2cuYS5hcHBseU1hdHJpeDQoaSksZy5iLmFwcGx5TWF0cml4NChpKSxnLmMuYXBwbHlNYXRyaXg0KGkpLGcubmVlZHNVcGRhdGU9ITA7Zm9yKGxldCB3PXksTT14K3k7dzxNO3crKylpZihEKCR0LDMqdC5yZXNvbHZlVHJpYW5nbGVJbmRleCh3KSxmLGwpLCR0Lm5lZWRzVXBkYXRlPSEwLGcuaW50ZXJzZWN0c1RyaWFuZ2xlKCR0KSlyZXR1cm4hMDtyZXR1cm4hMX19KTtmb3IobGV0IG09eSxnPXgreTttPGc7bSsrKXtjb25zdCB3PXQucmVzb2x2ZVRyaWFuZ2xlSW5kZXgobSk7RChIdCwzKncsZixsKSxIdC5hLmFwcGx5TWF0cml4NChoZSksSHQuYi5hcHBseU1hdHJpeDQoaGUpLEh0LmMuYXBwbHlNYXRyaXg0KGhlKSxIdC5uZWVkc1VwZGF0ZT0hMDtmb3IobGV0IE09MCxiPWQuY291bnQ7TTxiO00rPTMpaWYoRCgkdCxNLGQscCksJHQubmVlZHNVcGRhdGU9ITAsSHQuaW50ZXJzZWN0c1RyaWFuZ2xlKCR0KSlyZXR1cm4hMH19ZWxzZXtjb25zdCBjPXUrOCxmPWFbdSs2XTtyZXR1cm4gTChjLG4sa2UpLCEhKHMuaW50ZXJzZWN0c0JveChrZSkmJk1pKGMsdCxlLGkscyl8fChMKGYsbixrZSkscy5pbnRlcnNlY3RzQm94KGtlKSYmTWkoZix0LGUsaSxzKSkpfX1jb25zdCBJZT1uZXcgTixBaT1uZXcgWCxsZT1uZXcgWCxNbj1uZXcgQSxBbj1uZXcgQSx6bj1uZXcgQSxTbj1uZXcgQTtmdW5jdGlvbiBCbih1LHQsZSxpPXt9LHM9e30sbj0wLHI9MS8wKXt0LmJvdW5kaW5nQm94fHx0LmNvbXB1dGVCb3VuZGluZ0JveCgpLEFpLnNldCh0LmJvdW5kaW5nQm94Lm1pbix0LmJvdW5kaW5nQm94Lm1heCxlKSxBaS5uZWVkc1VwZGF0ZT0hMDtjb25zdCBhPXUuZ2VvbWV0cnksbz1hLmF0dHJpYnV0ZXMucG9zaXRpb24saD1hLmluZGV4LGM9dC5hdHRyaWJ1dGVzLnBvc2l0aW9uLGY9dC5pbmRleCxsPXR0LmdldFByaW1pdGl2ZSgpLGQ9dHQuZ2V0UHJpbWl0aXZlKCk7bGV0IHA9TW4seT1Bbix4PW51bGwsbT1udWxsO3MmJih4PXpuLG09U24pO2xldCBnPTEvMCx3PW51bGwsTT1udWxsO3JldHVybiBJZS5jb3B5KGUpLmludmVydCgpLGxlLm1hdHJpeC5jb3B5KEllKSx1LnNoYXBlY2FzdCh7Ym91bmRzVHJhdmVyc2VPcmRlcjpiPT5BaS5kaXN0YW5jZVRvQm94KGIpLGludGVyc2VjdHNCb3VuZHM6KGIseixfKT0+XzxnJiZfPHI/KHomJihsZS5taW4uY29weShiLm1pbiksbGUubWF4LmNvcHkoYi5tYXgpLGxlLm5lZWRzVXBkYXRlPSEwKSwhMCk6ITEsaW50ZXJzZWN0c1JhbmdlOihiLHopPT57aWYodC5ib3VuZHNUcmVlKXtjb25zdCBfPXQuYm91bmRzVHJlZTtyZXR1cm4gXy5zaGFwZWNhc3Qoe2JvdW5kc1RyYXZlcnNlT3JkZXI6Uz0+bGUuZGlzdGFuY2VUb0JveChTKSxpbnRlcnNlY3RzQm91bmRzOihTLEIsVCk9PlQ8ZyYmVDxyLGludGVyc2VjdHNSYW5nZTooUyxCKT0+e2ZvcihsZXQgVD1TLEM9UytCO1Q8QztUKyspe2NvbnN0IFA9Xy5yZXNvbHZlVHJpYW5nbGVJbmRleChUKTtEKGQsMypQLGYsYyksZC5hLmFwcGx5TWF0cml4NChlKSxkLmIuYXBwbHlNYXRyaXg0KGUpLGQuYy5hcHBseU1hdHJpeDQoZSksZC5uZWVkc1VwZGF0ZT0hMDtmb3IobGV0IEU9YixGPWIrejtFPEY7RSsrKXtjb25zdCBVPXUucmVzb2x2ZVRyaWFuZ2xlSW5kZXgoRSk7RChsLDMqVSxoLG8pLGwubmVlZHNVcGRhdGU9ITA7Y29uc3QgUj1sLmRpc3RhbmNlVG9UcmlhbmdsZShkLHAseCk7aWYoUjxnJiYoeS5jb3B5KHApLG0mJm0uY29weSh4KSxnPVIsdz1FLE09VCksUjxuKXJldHVybiEwfX19fSl9ZWxzZXtjb25zdCBfPU50KHQpO2ZvcihsZXQgUz0wLEI9XztTPEI7UysrKXtEKGQsMypTLGYsYyksZC5hLmFwcGx5TWF0cml4NChlKSxkLmIuYXBwbHlNYXRyaXg0KGUpLGQuYy5hcHBseU1hdHJpeDQoZSksZC5uZWVkc1VwZGF0ZT0hMDtmb3IobGV0IFQ9YixDPWIrejtUPEM7VCsrKXtjb25zdCBQPXUucmVzb2x2ZVRyaWFuZ2xlSW5kZXgoVCk7RChsLDMqUCxoLG8pLGwubmVlZHNVcGRhdGU9ITA7Y29uc3QgRT1sLmRpc3RhbmNlVG9UcmlhbmdsZShkLHAseCk7aWYoRTxnJiYoeS5jb3B5KHApLG0mJm0uY29weSh4KSxnPUUsdz1ULE09UyksRTxuKXJldHVybiEwfX19fX0pLHR0LnJlbGVhc2VQcmltaXRpdmUobCksdHQucmVsZWFzZVByaW1pdGl2ZShkKSxnPT09MS8wP251bGw6KGkucG9pbnQ/aS5wb2ludC5jb3B5KHkpOmkucG9pbnQ9eS5jbG9uZSgpLGkuZGlzdGFuY2U9ZyxpLmZhY2VJbmRleD13LHMmJihzLnBvaW50P3MucG9pbnQuY29weShtKTpzLnBvaW50PW0uY2xvbmUoKSxzLnBvaW50LmFwcGx5TWF0cml4NChJZSkseS5hcHBseU1hdHJpeDQoSWUpLHMuZGlzdGFuY2U9eS5zdWIocy5wb2ludCkubGVuZ3RoKCkscy5mYWNlSW5kZXg9TSksaSl9ZnVuY3Rpb24gVG4oKXtyZXR1cm4gdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyPCJ1In1jb25zdCB1ZT1uZXcgay5jb25zdHJ1Y3RvcixEZT1uZXcgay5jb25zdHJ1Y3RvcixCdD1uZXcgZGkoKCk9Pm5ldyBXKSxqdD1uZXcgVyxHdD1uZXcgVyx6aT1uZXcgVyxTaT1uZXcgVztsZXQgQmk9ITE7ZnVuY3Rpb24gUG4odSx0LGUsaSl7aWYoQmkpdGhyb3cgbmV3IEVycm9yKCJNZXNoQlZIOiBSZWN1cnNpdmUgY2FsbHMgdG8gYnZoY2FzdCBub3Qgc3VwcG9ydGVkLiIpO0JpPSEwO2NvbnN0IHM9dS5fcm9vdHMsbj10Ll9yb290cztsZXQgcixhPTAsbz0wO2NvbnN0IGg9bmV3IE4oKS5jb3B5KGUpLmludmVydCgpO2ZvcihsZXQgYz0wLGY9cy5sZW5ndGg7YzxmO2MrKyl7dWUuc2V0QnVmZmVyKHNbY10pLG89MDtjb25zdCBsPUJ0LmdldFByaW1pdGl2ZSgpO0woMCx1ZS5mbG9hdDMyQXJyYXksbCksbC5hcHBseU1hdHJpeDQoaCk7Zm9yKGxldCBkPTAscD1uLmxlbmd0aDtkPHAmJihEZS5zZXRCdWZmZXIobltkXSkscj1vdCgwLDAsZSxoLGksYSxvLDAsMCxsKSxEZS5jbGVhckJ1ZmZlcigpLG8rPW5bZF0ubGVuZ3RoLCFyKTtkKyspO2lmKEJ0LnJlbGVhc2VQcmltaXRpdmUobCksdWUuY2xlYXJCdWZmZXIoKSxhKz1zW2NdLmxlbmd0aCxyKWJyZWFrfXJldHVybiBCaT0hMSxyfWZ1bmN0aW9uIG90KHUsdCxlLGkscyxuPTAscj0wLGE9MCxvPTAsaD1udWxsLGM9ITEpe2xldCBmLGw7Yz8oZj1EZSxsPXVlKTooZj11ZSxsPURlKTtjb25zdCBkPWYuZmxvYXQzMkFycmF5LHA9Zi51aW50MzJBcnJheSx5PWYudWludDE2QXJyYXkseD1sLmZsb2F0MzJBcnJheSxtPWwudWludDMyQXJyYXksZz1sLnVpbnQxNkFycmF5LHc9dSoyLE09dCoyLGI9WSh3LHkpLHo9WShNLGcpO2xldCBfPSExO2lmKHomJmIpYz9fPXMoJCh0LG0pLEoodCoyLGcpLCQodSxwKSxKKHUqMix5KSxvLHIrdCxhLG4rdSk6Xz1zKCQodSxwKSxKKHUqMix5KSwkKHQsbSksSih0KjIsZyksYSxuK3UsbyxyK3QpO2Vsc2UgaWYoeil7Y29uc3QgUz1CdC5nZXRQcmltaXRpdmUoKTtMKHQseCxTKSxTLmFwcGx5TWF0cml4NChlKTtjb25zdCBCPVEodSksVD1LKHUscCk7TChCLGQsanQpLEwoVCxkLEd0KTtjb25zdCBDPVMuaW50ZXJzZWN0c0JveChqdCksUD1TLmludGVyc2VjdHNCb3goR3QpO189QyYmb3QodCxCLGksZSxzLHIsbixvLGErMSxTLCFjKXx8UCYmb3QodCxULGksZSxzLHIsbixvLGErMSxTLCFjKSxCdC5yZWxlYXNlUHJpbWl0aXZlKFMpfWVsc2V7Y29uc3QgUz1RKHQpLEI9Syh0LG0pO0woUyx4LHppKSxMKEIseCxTaSk7Y29uc3QgVD1oLmludGVyc2VjdHNCb3goemkpLEM9aC5pbnRlcnNlY3RzQm94KFNpKTtpZihUJiZDKV89b3QodSxTLGUsaSxzLG4scixhLG8rMSxoLGMpfHxvdCh1LEIsZSxpLHMsbixyLGEsbysxLGgsYyk7ZWxzZSBpZihUKWlmKGIpXz1vdCh1LFMsZSxpLHMsbixyLGEsbysxLGgsYyk7ZWxzZXtjb25zdCBQPUJ0LmdldFByaW1pdGl2ZSgpO1AuY29weSh6aSkuYXBwbHlNYXRyaXg0KGUpO2NvbnN0IEU9USh1KSxGPUsodSxwKTtMKEUsZCxqdCksTChGLGQsR3QpO2NvbnN0IFU9UC5pbnRlcnNlY3RzQm94KGp0KSxSPVAuaW50ZXJzZWN0c0JveChHdCk7Xz1VJiZvdChTLEUsaSxlLHMscixuLG8sYSsxLFAsIWMpfHxSJiZvdChTLEYsaSxlLHMscixuLG8sYSsxLFAsIWMpLEJ0LnJlbGVhc2VQcmltaXRpdmUoUCl9ZWxzZSBpZihDKWlmKGIpXz1vdCh1LEIsZSxpLHMsbixyLGEsbysxLGgsYyk7ZWxzZXtjb25zdCBQPUJ0LmdldFByaW1pdGl2ZSgpO1AuY29weShTaSkuYXBwbHlNYXRyaXg0KGUpO2NvbnN0IEU9USh1KSxGPUsodSxwKTtMKEUsZCxqdCksTChGLGQsR3QpO2NvbnN0IFU9UC5pbnRlcnNlY3RzQm94KGp0KSxSPVAuaW50ZXJzZWN0c0JveChHdCk7Xz1VJiZvdChCLEUsaSxlLHMscixuLG8sYSsxLFAsIWMpfHxSJiZvdChCLEYsaSxlLHMscixuLG8sYSsxLFAsIWMpLEJ0LnJlbGVhc2VQcmltaXRpdmUoUCl9fXJldHVybiBffWNvbnN0IFZlPW5ldyBYLGlzPW5ldyBXLENuPXtzdHJhdGVneTpxaSxtYXhEZXB0aDo0MCxtYXhMZWFmVHJpczoxMCx1c2VTaGFyZWRBcnJheUJ1ZmZlcjohMSxzZXRCb3VuZGluZ0JveDohMCxvblByb2dyZXNzOm51bGwsaW5kaXJlY3Q6ITEsdmVyYm9zZTohMCxyYW5nZTpudWxsfTtjbGFzcyBOZXtzdGF0aWMgc2VyaWFsaXplKHQsZT17fSl7ZT17Y2xvbmVCdWZmZXJzOiEwLC4uLmV9O2NvbnN0IGk9dC5nZW9tZXRyeSxzPXQuX3Jvb3RzLG49dC5faW5kaXJlY3RCdWZmZXIscj1pLmdldEluZGV4KCk7bGV0IGE7cmV0dXJuIGUuY2xvbmVCdWZmZXJzP2E9e3Jvb3RzOnMubWFwKG89Pm8uc2xpY2UoKSksaW5kZXg6cj9yLmFycmF5LnNsaWNlKCk6bnVsbCxpbmRpcmVjdEJ1ZmZlcjpuP24uc2xpY2UoKTpudWxsfTphPXtyb290czpzLGluZGV4OnI/ci5hcnJheTpudWxsLGluZGlyZWN0QnVmZmVyOm59LGF9c3RhdGljIGRlc2VyaWFsaXplKHQsZSxpPXt9KXtpPXtzZXRJbmRleDohMCxpbmRpcmVjdDohIXQuaW5kaXJlY3RCdWZmZXIsLi4uaX07Y29uc3R7aW5kZXg6cyxyb290czpuLGluZGlyZWN0QnVmZmVyOnJ9PXQsYT1uZXcgTmUoZSx7Li4uaSxbb2ldOiEwfSk7aWYoYS5fcm9vdHM9bixhLl9pbmRpcmVjdEJ1ZmZlcj1yfHxudWxsLGkuc2V0SW5kZXgpe2NvbnN0IG89ZS5nZXRJbmRleCgpO2lmKG89PT1udWxsKXtjb25zdCBoPW5ldyBjdCh0LmluZGV4LDEsITEpO2Uuc2V0SW5kZXgoaCl9ZWxzZSBvLmFycmF5IT09cyYmKG8uYXJyYXkuc2V0KHMpLG8ubmVlZHNVcGRhdGU9ITApfXJldHVybiBhfWdldCBpbmRpcmVjdCgpe3JldHVybiEhdGhpcy5faW5kaXJlY3RCdWZmZXJ9Y29uc3RydWN0b3IodCxlPXt9KXtpZih0LmlzQnVmZmVyR2VvbWV0cnkpe2lmKHQuaW5kZXgmJnQuaW5kZXguaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSl0aHJvdyBuZXcgRXJyb3IoIk1lc2hCVkg6IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoZSBpbmRleCBhdHRyaWJ1dGUuIil9ZWxzZSB0aHJvdyBuZXcgRXJyb3IoIk1lc2hCVkg6IE9ubHkgQnVmZmVyR2VvbWV0cmllcyBhcmUgc3VwcG9ydGVkLiIpO2lmKGU9T2JqZWN0LmFzc2lnbih7Li4uQ24sW29pXTohMX0sZSksZS51c2VTaGFyZWRBcnJheUJ1ZmZlciYmIVRuKCkpdGhyb3cgbmV3IEVycm9yKCJNZXNoQlZIOiBTaGFyZWRBcnJheUJ1ZmZlciBpcyBub3QgYXZhaWxhYmxlLiIpO3RoaXMuZ2VvbWV0cnk9dCx0aGlzLl9yb290cz1udWxsLHRoaXMuX2luZGlyZWN0QnVmZmVyPW51bGwsZVtvaV18fChPcyh0aGlzLGUpLCF0LmJvdW5kaW5nQm94JiZlLnNldEJvdW5kaW5nQm94JiYodC5ib3VuZGluZ0JveD10aGlzLmdldEJvdW5kaW5nQm94KG5ldyBXKSkpLHRoaXMucmVzb2x2ZVRyaWFuZ2xlSW5kZXg9ZS5pbmRpcmVjdD9pPT50aGlzLl9pbmRpcmVjdEJ1ZmZlcltpXTppPT5pfXJlZml0KHQ9bnVsbCl7cmV0dXJuKHRoaXMuaW5kaXJlY3Q/eG46bm4pKHRoaXMsdCl9dHJhdmVyc2UodCxlPTApe2NvbnN0IGk9dGhpcy5fcm9vdHNbZV0scz1uZXcgVWludDMyQXJyYXkoaSksbj1uZXcgVWludDE2QXJyYXkoaSk7cigwKTtmdW5jdGlvbiByKGEsbz0wKXtjb25zdCBoPWEqMixjPW5baCsxNV09PT1fZTtpZihjKXtjb25zdCBmPXNbYSs2XSxsPW5baCsxNF07dChvLGMsbmV3IEZsb2F0MzJBcnJheShpLGEqNCw2KSxmLGwpfWVsc2V7Y29uc3QgZj1hK3NlLzQsbD1zW2ErNl0sZD1zW2ErN107dChvLGMsbmV3IEZsb2F0MzJBcnJheShpLGEqNCw2KSxkKXx8KHIoZixvKzEpLHIobCxvKzEpKX19fXJheWNhc3QodCxlPTAsaT0wLHM9MS8wKXtjb25zdCBuPXRoaXMuX3Jvb3RzLHI9dGhpcy5nZW9tZXRyeSxhPVtdLG89ZS5pc01hdGVyaWFsLGg9QXJyYXkuaXNBcnJheShlKSxjPXIuZ3JvdXBzLGY9bz9lLnNpZGU6ZSxsPXRoaXMuaW5kaXJlY3Q/Z246Y247Zm9yKGxldCBkPTAscD1uLmxlbmd0aDtkPHA7ZCsrKXtjb25zdCB5PWg/ZVtjW2RdLm1hdGVyaWFsSW5kZXhdLnNpZGU6Zix4PWEubGVuZ3RoO2lmKGwodGhpcyxkLHksdCxhLGkscyksaCl7Y29uc3QgbT1jW2RdLm1hdGVyaWFsSW5kZXg7Zm9yKGxldCBnPXgsdz1hLmxlbmd0aDtnPHc7ZysrKWFbZ10uZmFjZS5tYXRlcmlhbEluZGV4PW19fXJldHVybiBhfXJheWNhc3RGaXJzdCh0LGU9MCxpPTAscz0xLzApe2NvbnN0IG49dGhpcy5fcm9vdHMscj10aGlzLmdlb21ldHJ5LGE9ZS5pc01hdGVyaWFsLG89QXJyYXkuaXNBcnJheShlKTtsZXQgaD1udWxsO2NvbnN0IGM9ci5ncm91cHMsZj1hP2Uuc2lkZTplLGw9dGhpcy5pbmRpcmVjdD93bjpsbjtmb3IobGV0IGQ9MCxwPW4ubGVuZ3RoO2Q8cDtkKyspe2NvbnN0IHk9bz9lW2NbZF0ubWF0ZXJpYWxJbmRleF0uc2lkZTpmLHg9bCh0aGlzLGQseSx0LGkscyk7eCE9bnVsbCYmKGg9PW51bGx8fHguZGlzdGFuY2U8aC5kaXN0YW5jZSkmJihoPXgsbyYmKHguZmFjZS5tYXRlcmlhbEluZGV4PWNbZF0ubWF0ZXJpYWxJbmRleCkpfXJldHVybiBofWludGVyc2VjdHNHZW9tZXRyeSh0LGUpe2xldCBpPSExO2NvbnN0IHM9dGhpcy5fcm9vdHMsbj10aGlzLmluZGlyZWN0P19uOnVuO2ZvcihsZXQgcj0wLGE9cy5sZW5ndGg7cjxhJiYoaT1uKHRoaXMscix0LGUpLCFpKTtyKyspO3JldHVybiBpfXNoYXBlY2FzdCh0KXtjb25zdCBlPXR0LmdldFByaW1pdGl2ZSgpLGk9dGhpcy5pbmRpcmVjdD9hbjpzbjtsZXR7Ym91bmRzVHJhdmVyc2VPcmRlcjpzLGludGVyc2VjdHNCb3VuZHM6bixpbnRlcnNlY3RzUmFuZ2U6cixpbnRlcnNlY3RzVHJpYW5nbGU6YX09dDtpZihyJiZhKXtjb25zdCBmPXI7cj0obCxkLHAseSx4KT0+ZihsLGQscCx5LHgpPyEwOmkobCxkLHRoaXMsYSxwLHksZSl9ZWxzZSByfHwoYT9yPShmLGwsZCxwKT0+aShmLGwsdGhpcyxhLGQscCxlKTpyPShmLGwsZCk9PmQpO2xldCBvPSExLGg9MDtjb25zdCBjPXRoaXMuX3Jvb3RzO2ZvcihsZXQgZj0wLGw9Yy5sZW5ndGg7ZjxsO2YrKyl7Y29uc3QgZD1jW2ZdO2lmKG89R3ModGhpcyxmLG4scixzLGgpLG8pYnJlYWs7aCs9ZC5ieXRlTGVuZ3RofXJldHVybiB0dC5yZWxlYXNlUHJpbWl0aXZlKGUpLG99YnZoY2FzdCh0LGUsaSl7bGV0e2ludGVyc2VjdHNSYW5nZXM6cyxpbnRlcnNlY3RzVHJpYW5nbGVzOm59PWk7Y29uc3Qgcj10dC5nZXRQcmltaXRpdmUoKSxhPXRoaXMuZ2VvbWV0cnkuaW5kZXgsbz10aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24saD10aGlzLmluZGlyZWN0P3A9Pntjb25zdCB5PXRoaXMucmVzb2x2ZVRyaWFuZ2xlSW5kZXgocCk7RChyLHkqMyxhLG8pfTpwPT57RChyLHAqMyxhLG8pfSxjPXR0LmdldFByaW1pdGl2ZSgpLGY9dC5nZW9tZXRyeS5pbmRleCxsPXQuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbixkPXQuaW5kaXJlY3Q/cD0+e2NvbnN0IHk9dC5yZXNvbHZlVHJpYW5nbGVJbmRleChwKTtEKGMseSozLGYsbCl9OnA9PntEKGMscCozLGYsbCl9O2lmKG4pe2NvbnN0IHA9KHkseCxtLGcsdyxNLGIseik9Pntmb3IobGV0IF89bSxTPW0rZztfPFM7XysrKXtkKF8pLGMuYS5hcHBseU1hdHJpeDQoZSksYy5iLmFwcGx5TWF0cml4NChlKSxjLmMuYXBwbHlNYXRyaXg0KGUpLGMubmVlZHNVcGRhdGU9ITA7Zm9yKGxldCBCPXksVD15K3g7QjxUO0IrKylpZihoKEIpLHIubmVlZHNVcGRhdGU9ITAsbihyLGMsQixfLHcsTSxiLHopKXJldHVybiEwfXJldHVybiExfTtpZihzKXtjb25zdCB5PXM7cz1mdW5jdGlvbih4LG0sZyx3LE0sYix6LF8pe3JldHVybiB5KHgsbSxnLHcsTSxiLHosXyk/ITA6cCh4LG0sZyx3LE0sYix6LF8pfX1lbHNlIHM9cH1yZXR1cm4gUG4odGhpcyx0LGUscyl9aW50ZXJzZWN0c0JveCh0LGUpe3JldHVybiBWZS5zZXQodC5taW4sdC5tYXgsZSksVmUubmVlZHNVcGRhdGU9ITAsdGhpcy5zaGFwZWNhc3Qoe2ludGVyc2VjdHNCb3VuZHM6aT0+VmUuaW50ZXJzZWN0c0JveChpKSxpbnRlcnNlY3RzVHJpYW5nbGU6aT0+VmUuaW50ZXJzZWN0c1RyaWFuZ2xlKGkpfSl9aW50ZXJzZWN0c1NwaGVyZSh0KXtyZXR1cm4gdGhpcy5zaGFwZWNhc3Qoe2ludGVyc2VjdHNCb3VuZHM6ZT0+dC5pbnRlcnNlY3RzQm94KGUpLGludGVyc2VjdHNUcmlhbmdsZTplPT5lLmludGVyc2VjdHNTcGhlcmUodCl9KX1jbG9zZXN0UG9pbnRUb0dlb21ldHJ5KHQsZSxpPXt9LHM9e30sbj0wLHI9MS8wKXtyZXR1cm4odGhpcy5pbmRpcmVjdD9Cbjp5bikodGhpcyx0LGUsaSxzLG4scil9Y2xvc2VzdFBvaW50VG9Qb2ludCh0LGU9e30saT0wLHM9MS8wKXtyZXR1cm4gSnModGhpcyx0LGUsaSxzKX1nZXRCb3VuZGluZ0JveCh0KXtyZXR1cm4gdC5tYWtlRW1wdHkoKSx0aGlzLl9yb290cy5mb3JFYWNoKGk9PntMKDAsbmV3IEZsb2F0MzJBcnJheShpKSxpcyksdC51bmlvbihpcyl9KSx0fX1vbm1lc3NhZ2U9KHtkYXRhOnV9KT0+e2xldCB0PXBlcmZvcm1hbmNlLm5vdygpO2Z1bmN0aW9uIGUocil7cj1NYXRoLm1pbihyLDEpO2NvbnN0IGE9cGVyZm9ybWFuY2Uubm93KCk7YS10Pj0xMCYmciE9PTEmJihwb3N0TWVzc2FnZSh7ZXJyb3I6bnVsbCxzZXJpYWxpemVkOm51bGwscG9zaXRpb246bnVsbCxwcm9ncmVzczpyfSksdD1hKX1jb25zdHtpbmRleDppLHBvc2l0aW9uOnMsb3B0aW9uczpufT11O3RyeXtjb25zdCByPW5ldyBzaTtpZihyLnNldEF0dHJpYnV0ZSgicG9zaXRpb24iLG5ldyBjdChzLDMsITEpKSxpJiZyLnNldEluZGV4KG5ldyBjdChpLDEsITEpKSxuLmluY2x1ZGVkUHJvZ3Jlc3NDYWxsYmFjayYmKG4ub25Qcm9ncmVzcz1lKSxuLmdyb3Vwcyl7Y29uc3QgYz1uLmdyb3Vwcztmb3IoY29uc3QgZiBpbiBjKXtjb25zdCBsPWNbZl07ci5hZGRHcm91cChsLnN0YXJ0LGwuY291bnQsbC5tYXRlcmlhbEluZGV4KX19Y29uc3QgYT1uZXcgTmUocixuKSxvPU5lLnNlcmlhbGl6ZShhLHtjb3B5SW5kZXhCdWZmZXI6ITF9KTtsZXQgaD1bcy5idWZmZXIsLi4uby5yb290c107by5pbmRleCYmaC5wdXNoKG8uaW5kZXguYnVmZmVyKSxoPWguZmlsdGVyKGM9PnR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlcj4idSJ8fCEoYyBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyKSksYS5faW5kaXJlY3RCdWZmZXImJmgucHVzaChvLmluZGlyZWN0QnVmZmVyLmJ1ZmZlcikscG9zdE1lc3NhZ2Uoe2Vycm9yOm51bGwsc2VyaWFsaXplZDpvLHBvc2l0aW9uOnMscHJvZ3Jlc3M6MX0saCl9Y2F0Y2gocil7cG9zdE1lc3NhZ2Uoe2Vycm9yOnIsc2VyaWFsaXplZDpudWxsLHBvc2l0aW9uOm51bGwscHJvZ3Jlc3M6MX0pfX19KSgpOwo=",V=typeof window<"u"&&window.Blob&&new Blob([atob(u)],{type:"text/javascript;charset=utf-8"});function C(){let X;try{if(X=V&&(window.URL||window.webkitURL).createObjectURL(V),!X)throw"";return new Worker(X)}catch{return new Worker("data:application/javascript;base64,"+u)}finally{X&&(window.URL||window.webkitURL).revokeObjectURL(X)}}class o extends x{constructor(){super(new C),this.name="GenerateMeshBVHWorker"}runTask(l,d,G={}){return new Promise((h,L)=>{if(d.getAttribute("position").isInterleavedBufferAttribute||d.index&&d.index.isInterleavedBufferAttribute)throw new Error("GenerateMeshBVHWorker: InterleavedBufferAttribute are not supported for the geometry attributes.");l.onerror=b=>{L(new Error(`GenerateMeshBVHWorker: ${b.message}`))},l.onmessage=b=>{const{data:c}=b;if(c.error)L(new Error(c.error)),l.onmessage=null;else if(c.serialized){const{serialized:Z,position:s}=c,y=z.deserialize(Z,d,{setIndex:!1}),a=Object.assign({setBoundingBox:!0},G);if(d.attributes.position.array=s,Z.index)if(d.index)d.index.array=Z.index;else{const K=new R(Z.index,1,!1);d.setIndex(K)}a.setBoundingBox&&(d.boundingBox=y.getBoundingBox(new Y)),G.onProgress&&G.onProgress(c.progress),h(y),l.onmessage=null}else G.onProgress&&G.onProgress(c.progress)};const m=d.index?d.index.array:null,p=d.attributes.position.array,W=[p];m&&W.push(m),l.postMessage({index:m,position:p,options:{...G,onProgress:null,includedProgressCallback:!!G.onProgress,groups:[...d.groups]}},W.map(b=>b.buffer).filter(b=>typeof SharedArrayBuffer>"u"||!(b instanceof SharedArrayBuffer)))})}}export{o as GenerateMeshBVHWorker};
